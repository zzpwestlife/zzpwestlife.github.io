<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2020/09/11/PHP%20%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="1-echo-print-print-r-的区别？"><a href="#1-echo-print-print-r-的区别？" class="headerlink" title="1. echo(),print(),print_r()的区别？"></a>1. echo(),print(),print_r()的区别？</h3><ul>
<li>echo 和 print 不是一个函数，是一个语言结构；</li>
<li><code>print(string $arg)</code> 只有一个参数；</li>
<li><code>echo arg1,arg2</code> 可以输出多个参数，返回 <code>void</code> ；</li>
<li><code>echo</code> 和 <code>print</code> 只能打印出string，不能打印出结构；</li>
<li><code>print_r</code> 能打印出结构。比如:</li>
</ul>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$arr &#x3D; array(&quot;key&quot;&#x3D;&gt;&quot;value&quot;);</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [key] &#x3D;&gt; value</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-语句include和require的区别是什么"><a href="#2-语句include和require的区别是什么" class="headerlink" title="2. 语句include和require的区别是什么?"></a>2. 语句include和require的区别是什么?</h3><p>在失败的时候：<br>include 产生一个 warning ，而 require 直接产生错误中断；</p>
<p>require 在运行前载入；</p>
<p>include 在运行时载入；</p>
<p>require_once 和 include_once 可以避免重复包含同一文件。</p>
<h3 id="3-php中传值与传引用有啥区别"><a href="#3-php中传值与传引用有啥区别" class="headerlink" title="3. php中传值与传引用有啥区别?"></a>3. php中传值与传引用有啥区别?</h3><p>&amp;表示传引用；</p>
<p>函数中参数传引用会将参数进行改变；</p>
<p>一般在输出参数有多个的时候可以考虑使用引用。</p>
<h3 id="4-下面哪项没有将john添加到users数组中？"><a href="#4-下面哪项没有将john添加到users数组中？" class="headerlink" title="4. 下面哪项没有将john添加到users数组中？"></a>4. 下面哪项没有将john添加到users数组中？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a) $users[] &#x3D; &#39;john&#39;;</span><br><span class="line">(b) array_add($users,&#39;john&#39;);</span><br><span class="line">(c) array_push($users,&#39;john&#39;);</span><br><span class="line">(d) $users ||&#x3D; &#39;john&#39;;</span><br></pre></td></tr></table></figure>

<p>答案为bd，php 里面无 <code>array_add</code> 函数，d项为语法错误的表达。</p>
<h3 id="5-HTTP协议中几个状态码的含义。"><a href="#5-HTTP协议中几个状态码的含义。" class="headerlink" title="5. HTTP协议中几个状态码的含义。"></a>5. HTTP协议中几个状态码的含义。</h3><ul>
<li>200 : 请求成功，请求的数据随之返回 OK。</li>
<li>301 : 永久性重定向 Moved permanently。</li>
<li>302 : 暂时行重定向 Moved Temporarily</li>
<li>401 : 当前请求需要用户验证 Unauthorized。</li>
<li>403 : 服务器拒绝执行请求，即没有权限 Forbidden。</li>
<li>404 : 请求失败，请求的数据在服务器上未发现 Not found。</li>
<li>500 : 服务器错误。一般服务器端程序执行错误 Internal server error。</li>
<li>503 : 服务器临时维护或过载。这个状态时临时性的 Service unavailable。</li>
<li>504：超时，Gateway timeout</li>
</ul>
<h3 id="6-写出一些php魔术方法。"><a href="#6-写出一些php魔术方法。" class="headerlink" title="6. 写出一些php魔术方法。"></a>6. 写出一些php魔术方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__construct() 实例化类时自动调用。</span><br><span class="line">__destruct() 类对象使用结束时自动调用。</span><br><span class="line">__set() 在给未定义的属性赋值的时候调用。</span><br><span class="line">__get() 调用未定义的属性时候调用。</span><br><span class="line">__isset() 使用isset()或empty()函数时候会调用。</span><br><span class="line">__unset() 使用unset()时候会调用。</span><br><span class="line">__sleep() 使用serialize序列化时候调用。</span><br><span class="line">__wakeup() 使用unserialize反序列化的时候调用。</span><br><span class="line">__call() 调用一个不存在的方法的时候调用。</span><br><span class="line">__callStatic()调用一个不存在的静态方法是调用。</span><br><span class="line">__toString() 把对象转换成字符串的时候会调用。比如 echo。</span><br><span class="line">__invoke() 当尝试把对象当方法调用时调用。</span><br><span class="line">__set_state() 当使用var_export()函数时候调用。接受一个数组参数。</span><br><span class="line">__clone() 当使用clone复制一个对象时候调用。</span><br></pre></td></tr></table></figure>

<h3 id="7-MySQL存储引擎-MyISAM-和-InnoDB-的区别。"><a href="#7-MySQL存储引擎-MyISAM-和-InnoDB-的区别。" class="headerlink" title="7. MySQL存储引擎 MyISAM 和 InnoDB 的区别。"></a>7. MySQL存储引擎 MyISAM 和 InnoDB 的区别。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a. MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持.</span><br><span class="line">b. MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快.</span><br><span class="line">c. InnoDB不支持FULLTEXT类型的索引.</span><br><span class="line">d. InnoDB中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可.</span><br><span class="line">e. 对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</span><br><span class="line">f. DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</span><br><span class="line">g. LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用.</span><br><span class="line">h. MyISAM支持表锁，InnoDB支持行锁。</span><br></pre></td></tr></table></figure>

<h3 id="8-说出一些MySQL优化方法？"><a href="#8-说出一些MySQL优化方法？" class="headerlink" title="8. 说出一些MySQL优化方法？"></a>8. 说出一些MySQL优化方法？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a. 设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</span><br><span class="line">b. 选择合适的表字段数据类型和存储引擎，适当的添加索引。</span><br><span class="line">c. mysql库主从读写分离。</span><br><span class="line">d. 找规律分表，减少单表中的数据量提高查询速度。</span><br><span class="line">e. 添加缓存机制，比如memcached，apc等。</span><br><span class="line">f. 不经常改动的页面，生成静态页面。</span><br><span class="line">g. 书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</span><br></pre></td></tr></table></figure>

<h3 id="9-下面-a的结果是："><a href="#9-下面-a的结果是：" class="headerlink" title="9. 下面$a的结果是："></a>9. 下面$a的结果是：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; in_array(&#39;01&#39;, array(&#39;1&#39;)) &#x3D;&#x3D; var_dump(&#39;01&#39; &#x3D;&#x3D; 1);</span><br><span class="line">?&gt;</span><br><span class="line">A true</span><br><span class="line">B false</span><br><span class="line"></span><br><span class="line">var_dump(&#39;01&#39; &#x3D;&#x3D; 1) &#x2F;&#x2F; return NULL</span><br><span class="line">in_array(&#39;01&#39;, array(&#39;1&#39;)) &#x2F;&#x2F; return true</span><br><span class="line"></span><br><span class="line">$a &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<p>答案为B</p>
<h3 id="10-说下php中empty-和isset-的区别。"><a href="#10-说下php中empty-和isset-的区别。" class="headerlink" title="10. 说下php中empty()和isset()的区别。"></a>10. 说下php中empty()和isset()的区别。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">isset 用于检测变量是否被设置，使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE 。</span><br><span class="line">empty 如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，&quot;&quot;、0、&quot;0&quot;、NULL、FALSE、array()、var $var; 以及没有任何属性的对象（只有这8个，记住了）都将被认为是空的，如果 var 为空，则返回 TRUE 。</span><br><span class="line"></span><br><span class="line">如果变量为 0 ，则empty()会返回TRUE，isset()会返回TRUE；</span><br><span class="line">如果变量为空字符串，则empty()会返回TRUE，isset()会返回TRUE；</span><br><span class="line">如果变量未定义，则empty()会返回TRUE，isset()会返回FLASE。</span><br><span class="line"></span><br><span class="line">注意：isset() 只能用于变量，因为传递任何其它参数都将造成解析错误。若想检测常量是否已设置，可使用 defined() 函数。</span><br><span class="line">当要 判断一个变量是否已经声明的时候 可以使用 isset 函数；</span><br><span class="line">当要 判断一个变量是否已经赋予数据且不为空 可以用 empty函数；</span><br><span class="line">当要 判断 一个变量 存在且不为空 先 isset 函数 再用 empty 函数；</span><br></pre></td></tr></table></figure>

<h3 id="题2：nginx使用哪种网络协议"><a href="#题2：nginx使用哪种网络协议" class="headerlink" title="题2：nginx使用哪种网络协议?"></a>题2：nginx使用哪种网络协议?</h3><p>答案：nginx是应用层 我觉得从下往上的话 传输层用的是tcp/ip 应用层用的是http fastcgi负责调度进程。</p>
<h3 id="cookie-和session-的区别："><a href="#cookie-和session-的区别：" class="headerlink" title="cookie 和session 的区别："></a>cookie 和session 的区别：</h3><ol>
<li><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
</li>
<li><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>考虑到安全应当使用session。</p>
</li>
<li><p>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>考虑到减轻服务器性能方面，应当使用COOKIE。</p>
</li>
<li><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
</li>
<li><p>所以个人建议：<br>将登陆信息等重要信息存放为SESSION，其他信息如果需要保留，可以放在COOKIE中</p>
<h3 id="题9：数据库中的事务是什么"><a href="#题9：数据库中的事务是什么" class="headerlink" title="题9：数据库中的事务是什么?"></a>题9：数据库中的事务是什么?</h3></li>
</ol>
<p>答案：事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p>
<h3 id="题11：简述下面程序的输出结果-简要说明为什么-如何解决这类问题"><a href="#题11：简述下面程序的输出结果-简要说明为什么-如何解决这类问题" class="headerlink" title="题11：简述下面程序的输出结果, 简要说明为什么, 如何解决这类问题?"></a>题11：简述下面程序的输出结果, 简要说明为什么, 如何解决这类问题?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$tmp = <span class="number">0</span> == <span class="string">&quot;a&quot;</span>? <span class="number">1</span>: <span class="number">2</span>; </span><br><span class="line"><span class="keyword">echo</span> $tmp; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>答案： 1</p>
<p>int和string类型强制转换造成的，0 ＝＝ 0 肯定是true啊 </p>
<p>PHP是弱类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$tmp &#x3D; 0 &#x3D;&#x3D;&#x3D; &quot;a&quot;? 1: 2; </span><br><span class="line">echo $tmp; </span><br></pre></td></tr></table></figure>
<p>这样就是2 </p>
<h3 id="题12：什么是MVC？"><a href="#题12：什么是MVC？" class="headerlink" title="题12：什么是MVC？"></a>题12：什么是MVC？</h3><p>答案：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。</p>
<ul>
<li>Model：数据信息存取层。</li>
<li>View：view层负责将应用的数据以特定的方式展现在界面上。</li>
<li>Controller：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>题21：简述两种屏蔽php程序的notice警告的方法 </p>
<p>答案：</p>
<ol>
<li>在程序中添加：error_reporting (E_ALL &amp; ~E_NOTICE); </li>
<li>修改php.ini中的：error_reporting = E_ALL 改为：error_reporting = E_ALL &amp; ~E_NOTICE </li>
<li>error_reporting(0);或者修改php.inidisplay_errors=Off </li>
</ol>
<h3 id="题28：写一个排序算法，可以是冒泡排序或者是快速排序，假设待排序对象是一个维数组"><a href="#题28：写一个排序算法，可以是冒泡排序或者是快速排序，假设待排序对象是一个维数组" class="headerlink" title="题28：写一个排序算法，可以是冒泡排序或者是快速排序，假设待排序对象是一个维数组"></a>题28：写一个排序算法，可以是冒泡排序或者是快速排序，假设待排序对象是一个维数组</h3><p>答案：</p>
<p>冒泡排序（数组排序）：原理：两两相邻的数进行比较，如果反序就交换，否则不交换</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params">$array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = count($array);</span><br><span class="line">    <span class="keyword">if</span> ($count &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;$count; $i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j=$count<span class="number">-1</span>; $j&gt;$i; $j--)&#123;</span><br><span class="line">            <span class="keyword">if</span> ($array[$j] &lt; $array[$j<span class="number">-1</span>])&#123;</span><br><span class="line">                $tmp = $array[$j];</span><br><span class="line">                $array[$j] = $array[$j<span class="number">-1</span>];</span><br><span class="line">                $array[$j<span class="number">-1</span>] = $tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快速排序（数组排序）：</p>
<p>原理：找到当前数组中的任意一个元素（一般选择第一个元素），作为标准，新建两个空数组，遍历整个数组元素，<br>如果遍历到的元素比当前的元素要小，那么就放到左边的数组，否则放到右面的数组，然后再对新数组进行同样的操作</p>
<p>不难发现，这里符合递归的原理，所以我们可以用递归来实现。</p>
<p>使用递归，则需要找到递归点和递归出口：</p>
<ul>
<li>递归点：如果数组的元素大于 1，就需要再进行分解，所以我们的递归点就是新构造的数组元素个数大于 1</li>
<li>递归出口：我们什么时候不需要再对新数组不进行排序了呢？就是当数组元素个数变成 1 的时候，所以这就是我们的出口。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">$array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count($array) &lt;= <span class="number">1</span>) <span class="keyword">return</span> $array;</span><br><span class="line">    $key = $array[<span class="number">0</span>];</span><br><span class="line">    $left_arr = <span class="keyword">array</span>();</span><br><span class="line">    $right_arr = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">1</span>; $i&lt;count($array); $i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($array[$i] &lt;= $key)</span><br><span class="line">            $left_arr[] = $array[$i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $right_arr[] = $array[$i];</span><br><span class="line">    &#125;</span><br><span class="line">    $left_arr = quicksort($left_arr);</span><br><span class="line">    $right_arr = quicksort($right_arr);</span><br><span class="line">    <span class="keyword">return</span> array_merge($left_arr, <span class="keyword">array</span>($key), $right_arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 后台搜索功能的实现]]></title>
      <url>/2020/09/11/Laravel%20%E5%90%8E%E5%8F%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>目标:</p>
<ol>
<li>实现根据多个条件的搜索功能，在结果页展示搜索结果</li>
<li>不同的搜索条件，匹配方式不同，如时间为时间段，名字为模糊搜索等</li>
<li>搜索结果也要分页，并且所有页展示的都是搜索结果</li>
<li>搜索条件保留在搜索框中</li>
<li>一键清空所有搜索条件</li>
</ol>
<a id="more"></a>

<h2 id="1-list-的-blade-模板页面"><a href="#1-list-的-blade-模板页面" class="headerlink" title="1. list 的 blade 模板页面"></a>1. list 的 blade 模板页面</h2><h3 id="1-在列表之前，添加搜索框选项的html代码"><a href="#1-在列表之前，添加搜索框选项的html代码" class="headerlink" title="1. 在列表之前，添加搜索框选项的html代码"></a>1. 在列表之前，添加搜索框选项的html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot; id&#x3D;&quot;frm_search_info&quot; style&#x3D;&quot;margin-bottom: 30px&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-4&quot;&gt;</span><br><span class="line">            用户：</span><br><span class="line">            &lt;select id&#x3D;&quot;user_id&quot; name&#x3D;&quot;user_id&quot; class&#x3D;&quot;form-control select2&quot;&gt;</span><br><span class="line">                &lt;option value&#x3D;&quot;0&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">                @foreach($users as $key &#x3D;&gt; $value)</span><br><span class="line">                    &lt;option value&#x3D;&quot;&#123;&#123;$value-&gt;id&#125;&#125;&quot; @if($value-&gt;id &#x3D;&#x3D; $searchParams[&#39;user_id&#39;]) selected</span><br><span class="line">                            @endif&gt;&#123;&#123;$value-&gt;name&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">                @endforeach</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-4&quot;&gt;</span><br><span class="line">            论坛：</span><br><span class="line">            &lt;select id&#x3D;&quot;forum_id&quot; name&#x3D;&quot;forum_id&quot; class&#x3D;&quot;form-control select2&quot;&gt;</span><br><span class="line">                &lt;option value&#x3D;&quot;0&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">                @foreach($forums as $key &#x3D;&gt; $value)</span><br><span class="line">                    &lt;option value&#x3D;&quot;&#123;&#123;$value-&gt;id&#125;&#125;&quot;</span><br><span class="line">                            @if($value-&gt;id &#x3D;&#x3D; $searchParams[&#39;forum_id&#39;]) selected</span><br><span class="line">                            @endif&gt;&#123;&#123;$value-&gt;name&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">                @endforeach</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-4&quot;&gt;</span><br><span class="line">            修改日期：&lt;input type&#x3D;&#39;text&#39; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;start_time&quot; name&#x3D;&quot;start_time&quot;</span><br><span class="line">                        value&#x3D;&quot;&#123;&#123;$searchParams[&#39;startTime&#39;]&#125;&#125;&quot;</span><br><span class="line">                        placeholder&#x3D;&quot;开始时间&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            - &lt;input type&#x3D;&#39;text&#39; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;end_time&quot; name&#x3D;&quot;end_time&quot;</span><br><span class="line">                     value&#x3D;&quot;&#123;&#123;$searchParams[&#39;endTime&#39;]&#125;&#125;&quot;</span><br><span class="line">                     placeholder&#x3D;&quot;结束时间&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-4&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;文件名&quot;</span><br><span class="line">                   value&#x3D;&quot;&#123;&#123;$searchParams[&#39;name&#39;]&#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;button name&#x3D;&quot;&quot; id&#x3D;&quot;btn_clear&quot; class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">                清空</span><br><span class="line">            &lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button name&#x3D;&quot;&quot; id&#x3D;&quot;btn_search&quot; class&#x3D;&quot;btn btn-success&quot; type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">                搜索</span><br><span class="line">            &lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-同时添加处理选项的js代码，用于拼接跳转url"><a href="#2-同时添加处理选项的js代码，用于拼接跳转url" class="headerlink" title="2. 同时添加处理选项的js代码，用于拼接跳转url"></a>2. 同时添加处理选项的js代码，用于拼接跳转url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    $(&quot;.select2&quot;).select2(&#123;language: &quot;zh-CN&quot;&#125;);</span><br><span class="line">    &#x2F;&#x2F; 搜索</span><br><span class="line">    searchWithParams(&#39;&#x2F;files&#x2F;?page&#x3D;1&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-js-方法在单独的文件中，-blade-模板中引入"><a href="#3-js-方法在单独的文件中，-blade-模板中引入" class="headerlink" title="3. js 方法在单独的文件中， blade 模板中引入"></a>3. js 方法在单独的文件中， blade 模板中引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 搜索按钮</span><br><span class="line"> * @param url</span><br><span class="line"> *&#x2F;</span><br><span class="line">function searchWithParams(url) &#123;</span><br><span class="line">    $(&quot;#btn_search&quot;).click(function () &#123;</span><br><span class="line">        var params &#x3D; &#123;&#125;;</span><br><span class="line">        $(&quot;#frm_search_info select, #frm_search_info input[type&#x3D;text], #frm_search_info input[type&#x3D;hidden]&quot;).each(function () &#123;</span><br><span class="line">            var value &#x3D; $(this).val();</span><br><span class="line">            if (&#39;&#39; !&#x3D; value) &#123;</span><br><span class="line">                params[$(this).attr(&#39;name&#39;)] &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        if (!$.isEmptyObject(params)) &#123;</span><br><span class="line">            url +&#x3D; &quot;&amp;&quot; + parserParams2Url(params);</span><br><span class="line">        &#125;</span><br><span class="line">        location.href &#x3D; url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parserParams2Url &#x3D; function (params) &#123;</span><br><span class="line">    var url &#x3D; &#39;&#39;;</span><br><span class="line">    $.each(params, function (index, item) &#123;</span><br><span class="line">        if (url) &#123;</span><br><span class="line">            url +&#x3D; &#39;&amp;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        url +&#x3D; index + &#39;&#x3D;&#39; + item;</span><br><span class="line">    &#125;);</span><br><span class="line">    return url;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 清空搜索条件</span><br><span class="line">$(&quot;#btn_clear&quot;).click(function () &#123;</span><br><span class="line">    $(&#39;#frm_search_info&#39;).find(&#39;select&#39;).each(function () &#123;</span><br><span class="line">        $(this).find(&#39;option:first&#39;).prop(&quot;selected&quot;, true);</span><br><span class="line">        $(this).change();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;#frm_search_info input[type&#x3D;text]&quot;).each(function () &#123;</span><br><span class="line">        $(this).val(&quot;&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;#frm_search_info input[type&#x3D;number]&quot;).each(function () &#123;</span><br><span class="line">        $(this).val(&quot;&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-同时，分页部分也要带上搜索参数-appends"><a href="#4-同时，分页部分也要带上搜索参数-appends" class="headerlink" title="4. 同时，分页部分也要带上搜索参数 appends"></a>4. 同时，分页部分也要带上搜索参数 appends</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">        &#123;&#123;$files-&gt;appends($searchParams)-&gt;links()&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h2><h3 id="1-首先接收所有的请求参数，包括搜索参数"><a href="#1-首先接收所有的请求参数，包括搜索参数" class="headerlink" title="1. 首先接收所有的请求参数，包括搜索参数"></a>1. 首先接收所有的请求参数，包括搜索参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$userId &#x3D; intval($request-&gt;input(&#39;user_id&#39;, 0));</span><br><span class="line">$forumId &#x3D; intval($request-&gt;input(&#39;forum_id&#39;, 0));</span><br><span class="line">$startTime &#x3D; trim($request-&gt;input(&#39;start_time&#39;, &#39;&#39;));</span><br><span class="line">$endTime &#x3D; trim($request-&gt;input(&#39;end_time&#39;, &#39;&#39;));</span><br><span class="line">$name &#x3D; trim($request-&gt;input(&#39;name&#39;, &#39;&#39;));</span><br></pre></td></tr></table></figure>

<h3 id="2-拼接搜索的query"><a href="#2-拼接搜索的query" class="headerlink" title="2. 拼接搜索的query"></a>2. 拼接搜索的query</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$query &#x3D; File::with(&#39;forum&#39;)-&gt;with(&#39;user&#39;)-&gt;orderBy(&#39;updated_at&#39;, &#39;desc&#39;);</span><br><span class="line">if (!empty($name)) &#123;</span><br><span class="line">        $query-&gt;where(&#39;filename&#39;, &#39;like&#39;, &#39;%&#39; . $name . &#39;%&#39;);</span><br><span class="line">&#125;</span><br><span class="line">if (!empty($startTime) &amp;&amp; !empty($endTime) &amp;&amp; ($endTime &gt; $startTime)) &#123;</span><br><span class="line">    $query-&gt;where(&#39;updated_at&#39;, &#39;&gt;&#39;, $startTime);</span><br><span class="line">    $query-&gt;where(&#39;updated_at&#39;, &#39;&lt;&#39;, $endTime);</span><br><span class="line">&#125;</span><br><span class="line">if (!empty($userId)) &#123;</span><br><span class="line">    $query-&gt;where(&#39;user_id&#39;, $userId);</span><br><span class="line">&#125;</span><br><span class="line">if (!empty($forumId)) &#123;</span><br><span class="line">    $query-&gt;where(&#39;forum_id&#39;, $forumId);</span><br><span class="line">&#125;</span><br><span class="line">$query &#x3D; $query-&gt;paginate();</span><br></pre></td></tr></table></figure>

<h3 id="3-如果搜索query中包含多个orWhere条件，并且需要以括号的形式处理时，需要使用闭包"><a href="#3-如果搜索query中包含多个orWhere条件，并且需要以括号的形式处理时，需要使用闭包" class="headerlink" title="3. 如果搜索query中包含多个orWhere条件，并且需要以括号的形式处理时，需要使用闭包"></a>3. 如果搜索query中包含多个orWhere条件，并且需要以括号的形式处理时，需要使用闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (!empty($name)) &#123;</span><br><span class="line">    $query-&gt;where(function ($query) use ($name) &#123;</span><br><span class="line">        $query-&gt;where(&#39;name&#39;, &#39;like&#39;, &#39;%&#39; . $name . &#39;%&#39;)</span><br><span class="line">            -&gt;orWhere(&#39;alias&#39;, &#39;like&#39;, &#39;%&#39; . $name . &#39;%&#39;)</span><br><span class="line">            -&gt;orWhere(&#39;alias_abbr&#39;, &#39;like&#39;, &#39;%&#39; . $name . &#39;%&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-最后，给模板文件返回所需参数，搜索条件以数组的形式返回，便于appends到分页语句中"><a href="#4-最后，给模板文件返回所需参数，搜索条件以数组的形式返回，便于appends到分页语句中" class="headerlink" title="4. 最后，给模板文件返回所需参数，搜索条件以数组的形式返回，便于appends到分页语句中"></a>4. 最后，给模板文件返回所需参数，搜索条件以数组的形式返回，便于appends到分页语句中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$returnData &#x3D; [</span><br><span class="line">    &#39;files&#39; &#x3D;&gt; $query,</span><br><span class="line">    &#39;searchParams&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;startTime&#39; &#x3D;&gt; $startTime,</span><br><span class="line">        &#39;endTime&#39; &#x3D;&gt; $endTime,</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; $name,</span><br><span class="line">        &#39;user_id&#39; &#x3D;&gt; $userId,</span><br><span class="line">        &#39;forum_id&#39; &#x3D;&gt; $forumId,</span><br><span class="line">    ],</span><br><span class="line">    &#39;forums&#39; &#x3D;&gt; $forums,</span><br><span class="line">    &#39;users&#39; &#x3D;&gt; $users</span><br><span class="line">];</span><br><span class="line">return view(&#39;&#x2F;file&#x2F;index&#39;, $returnData);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[API 断点调试 -- PHPStorm && XDebug && Postman]]></title>
      <url>/2019/02/16/API%20%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%20--%20PHPStorm%20&amp;&%20XDebug%20&&%20Postman/</url>
      <content type="html"><![CDATA[<p>折腾了好久，记录一下，方便以后查阅。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>MacOS Majave version 10.14.2</li>
<li>phpstorm 2018.2.2</li>
<li>Docker version 18.09.1, build 4c52b90</li>
<li>docker-compose version 1.23.2, build 1110ad01</li>
<li>postman 6.6.1</li>
<li>php 7.1.23</li>
<li>xdebug v2.6.1</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><blockquote>
<p>docker-compose.yml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 本机 80 端口被占用，随便改一个其他未使用端口</span><br><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  fpm:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">    - &quot;9111:80&quot;</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    volumes:</span><br><span class="line">    - .:&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">    restart: always</span><br><span class="line">    command: &quot;sh -c &#39;nginx &amp;&amp; php-fpm&#39;&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Dockerfile</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">FROM php:7.1-fpm</span><br><span class="line"></span><br><span class="line">RUN cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp; echo &#39;Asia&#x2F;Shanghai&#39; &gt;&#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">RUN sed -i &#39;s&#x2F;deb.debian.org&#x2F;mirrors.ustc.edu.cn&#x2F;g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">RUN echo &#39;date.timezone&#x3D;PRC&#39; &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;timezone.ini</span><br><span class="line"></span><br><span class="line"># Install modules</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        git \</span><br><span class="line">        curl \</span><br><span class="line">        openssl \</span><br><span class="line">        wget \</span><br><span class="line">        vim \</span><br><span class="line">        procps \</span><br><span class="line">        libssl-dev \</span><br><span class="line">        libfreetype6-dev \</span><br><span class="line">        libjpeg62-turbo-dev \</span><br><span class="line">        libmcrypt-dev \</span><br><span class="line">        libpng-dev \</span><br><span class="line">        libicu-dev \</span><br><span class="line">        libpcre3 libpcre3-dev \</span><br><span class="line">        zlib1g-dev \</span><br><span class="line">        gnupg2 \</span><br><span class="line">             --no-install-recommends</span><br><span class="line"></span><br><span class="line"># ########### nginx ################</span><br><span class="line">RUN wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.0.tar.gz -O nginx.tar.gz \</span><br><span class="line">    &amp;&amp; mkdir -p nginx \</span><br><span class="line">    &amp;&amp; tar -xf nginx.tar.gz -C nginx --strip-components&#x3D;1 \</span><br><span class="line">    &amp;&amp; rm nginx.tar.gz</span><br><span class="line"></span><br><span class="line">RUN cd nginx &amp;&amp; .&#x2F;configure \</span><br><span class="line">    --prefix&#x3D;&#x2F;etc&#x2F;nginx \</span><br><span class="line">    --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx \</span><br><span class="line">    --modules-path&#x3D;&#x2F;usr&#x2F;lib&#x2F;nginx&#x2F;modules \</span><br><span class="line">    --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</span><br><span class="line">    --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log \</span><br><span class="line">    --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log \</span><br><span class="line">    --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.pid \</span><br><span class="line">    --lock-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.lock \</span><br><span class="line">    --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;client_temp \</span><br><span class="line">    --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;proxy_temp \</span><br><span class="line">    --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;fastcgi_temp \</span><br><span class="line">    --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;uwsgi_temp \</span><br><span class="line">    --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;scgi_temp \</span><br><span class="line">    --user&#x3D;www-data \</span><br><span class="line">    --group&#x3D;www-data \</span><br><span class="line">    --with-compat \</span><br><span class="line">    --with-file-aio \</span><br><span class="line">    --with-threads \</span><br><span class="line">    --with-http_addition_module \</span><br><span class="line">    --with-http_auth_request_module \</span><br><span class="line">    --with-http_dav_module \</span><br><span class="line">    --with-http_flv_module \</span><br><span class="line">    --with-http_gunzip_module \</span><br><span class="line">    --with-http_gzip_static_module \</span><br><span class="line">    --with-http_mp4_module \</span><br><span class="line">    --with-http_random_index_module \</span><br><span class="line">    --with-http_realip_module \</span><br><span class="line">    --with-http_secure_link_module \</span><br><span class="line">    --with-http_slice_module \</span><br><span class="line">    --with-http_ssl_module \</span><br><span class="line">    --with-http_stub_status_module \</span><br><span class="line">    --with-http_sub_module \</span><br><span class="line">    --with-http_v2_module \</span><br><span class="line">    --with-mail \</span><br><span class="line">    --with-mail_ssl_module \</span><br><span class="line">    --with-stream \</span><br><span class="line">    --with-stream_realip_module \</span><br><span class="line">    --with-stream_ssl_module \</span><br><span class="line">    --with-stream_ssl_preread_module \</span><br><span class="line">    --with-cc-opt&#x3D;&#39;-g -O2 -fstack-protector-strong -Wformat -Werror&#x3D;format-security -Wp,-D_FORTIFY_SOURCE&#x3D;2 -fPIC&#39; \</span><br><span class="line">    --with-ld-opt&#x3D;&#39;-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#39; \</span><br><span class="line">    &amp;&amp; make \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; mkdir -p &#x2F;var&#x2F;cache&#x2F;nginx&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Install composer &amp;&amp; global asset plugin</span><br><span class="line">ENV COMPOSER_HOME &#x2F;root&#x2F;.composer</span><br><span class="line">ENV PATH &#x2F;root&#x2F;.composer&#x2F;vendor&#x2F;bin:$PATH</span><br><span class="line">RUN curl -sS https:&#x2F;&#x2F;getcomposer.org&#x2F;installer | php -- --install-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;bin --filename&#x3D;composer \</span><br><span class="line">    &amp;&amp; composer config -g repo.packagist composer https:&#x2F;&#x2F;packagist.phpcomposer.com</span><br><span class="line"></span><br><span class="line">#install extension</span><br><span class="line">RUN docker-php-ext-install zip \</span><br><span class="line">    &amp;&amp; docker-php-ext-install mcrypt \</span><br><span class="line">    &amp;&amp; docker-php-ext-install intl \</span><br><span class="line">    &amp;&amp; docker-php-ext-install mbstring \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pdo_mysql \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pcntl \</span><br><span class="line">    &amp;&amp; docker-php-ext-install bcmath</span><br><span class="line"></span><br><span class="line">#install gd</span><br><span class="line">RUN docker-php-ext-configure gd --with-freetype-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; --with-jpeg-dir&#x3D;&#x2F;usr&#x2F;include&#x2F; \</span><br><span class="line">    &amp;&amp; docker-php-ext-install gd</span><br><span class="line"></span><br><span class="line"># redis</span><br><span class="line">RUN wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;redis-3.1.6.tgz \</span><br><span class="line">    &amp;&amp; pecl install redis-3.1.6.tgz \</span><br><span class="line">    &amp;&amp; rm -f redis-3.1.6.tgz \</span><br><span class="line">    &amp;&amp; docker-php-ext-enable redis</span><br><span class="line"></span><br><span class="line"># amqp</span><br><span class="line">RUN apt install librabbitmq-dev -y</span><br><span class="line"></span><br><span class="line">RUN wget https:&#x2F;&#x2F;github.com&#x2F;alanxz&#x2F;rabbitmq-c&#x2F;releases&#x2F;download&#x2F;v0.8.0&#x2F;rabbitmq-c-0.8.0.tar.gz -O rabbitmq.tar.gz \</span><br><span class="line">    &amp;&amp; mkdir -p rabbitmq \</span><br><span class="line">    &amp;&amp; tar -xf rabbitmq.tar.gz -C rabbitmq --strip-components&#x3D;1 \</span><br><span class="line">    &amp;&amp; rm rabbitmq.tar.gz \</span><br><span class="line">    &amp;&amp; cd rabbitmq \</span><br><span class="line">    &amp;&amp; .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;rabbitmq-dev \</span><br><span class="line">    &amp;&amp; make \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; cd .. \</span><br><span class="line">    &amp;&amp; rm -rf rabbitmq</span><br><span class="line"></span><br><span class="line">RUN wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;amqp-1.9.3.tgz -O amqp.tar.gz \</span><br><span class="line">    &amp;&amp; mkdir -p amqp \</span><br><span class="line">    &amp;&amp; tar -xf amqp.tar.gz -C amqp --strip-components&#x3D;1 \</span><br><span class="line">    &amp;&amp; rm amqp.tar.gz \</span><br><span class="line">    &amp;&amp; cd amqp \</span><br><span class="line">    &amp;&amp; phpize \</span><br><span class="line">    &amp;&amp; .&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;php-config  --with-amqp --with-librabbitmq-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;rabbitmq-dev \</span><br><span class="line">    &amp;&amp; make -j$(nproc) \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; docker-php-ext-enable amqp</span><br><span class="line"></span><br><span class="line"># tideways</span><br><span class="line">RUN git clone https:&#x2F;&#x2F;github.com&#x2F;tideways&#x2F;php-profiler-extension.git \</span><br><span class="line">        &amp;&amp; cd php-profiler-extension \ tideways_xhprof --strip-components&#x3D;1 \</span><br><span class="line">        &amp;&amp; phpize \</span><br><span class="line">        &amp;&amp; .&#x2F;configure \</span><br><span class="line">        &amp;&amp; make \</span><br><span class="line">        &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># xdebug 重点看这里即可</span><br><span class="line">RUN yes | pecl install xdebug \</span><br><span class="line">    &amp;&amp; echo &quot;zend_extension&#x3D;$(find &#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;extensions&#x2F; -name xdebug.so)&quot; &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;xdebug.ini \</span><br><span class="line">    &amp;&amp; echo &quot;xdebug.remote_enable&#x3D;on&quot; &gt;&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;xdebug.ini \</span><br><span class="line">    &amp;&amp; echo &quot;xdebug.remote_autostart&#x3D;on&quot; &gt;&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;xdebug.ini \</span><br><span class="line">    &amp;&amp; echo &quot;xdebug.remote_port&#x3D;9211&quot; &gt;&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;xdebug.ini \</span><br><span class="line">    &amp;&amp; echo &quot;xdebug.remote_host&#x3D;192.168.0.103&quot; &gt;&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;xdebug.ini</span><br><span class="line"></span><br><span class="line">RUN apt-get purge -y g++ \</span><br><span class="line">    &amp;&amp; apt-get autoremove -y \</span><br><span class="line">    &amp;&amp; rm -r &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;tmp&#x2F;*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">COPY .&#x2F;nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">COPY .&#x2F;local.ini &#x2F;usr&#x2F;local&#x2F;php&#x2F;conf&#x2F;</span><br><span class="line"></span><br><span class="line">RUN echo &#39;date.timezone&#x3D;PRC&#39; &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;timezone.ini</span><br><span class="line"></span><br><span class="line">RUN usermod -u 1000 www-data</span><br><span class="line"></span><br><span class="line">EXPOSE 80 443</span><br><span class="line">CMD [&quot;sh&quot;, &#39;-c&#39;, &#39;nginx &amp;&amp; php-fpm&#39;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color='red'>重点关注 xdebug 一段的安装及配置</font>，相当于</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; Enable xdebug extension module</span><br><span class="line">zend_extension&#x3D;$(find &#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;extensions&#x2F; -name xdebug.so)</span><br><span class="line">xdebug.idekey &#x3D; &quot;PHPSTORM&quot;</span><br><span class="line">; 因为DBGp调试代理是可以做调试分发的，所以，定义一个IDEKEY，目的是让调试器知道，是不是发给自己的请求</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">; 设置为1的时候，会先参数链接到remote_host和remote_port指定的调试器端口，如果连接不上，就继续执行，类似设置&gt;了0</span><br><span class="line"></span><br><span class="line">xdebug.remote_mode &#x3D; &quot;req&quot;</span><br><span class="line">xdebug.remote_handler &#x3D; &quot;dbgp&quot;</span><br><span class="line">; 也就是调试走哪种协议，有老的PHP3协议，也有GDB协议，DBGP是当前的默认协议，也是当前主流支持的协议</span><br><span class="line"></span><br><span class="line">xdebug.remote_connect_back &#x3D; 0</span><br><span class="line">; 如果为1，xdebug会通过$_SERVER[‘REMOTE_ADDR’]变量，向发起HTTP请求的客户端发起链接，和remote_host功能类似&gt;，但是优先级比remote_host高，所以，设置了这个选项就会忽略remote_host，由于我的运行时服务器不能主动链接IDE所&gt;在PC，所以不能开启自动回连模式(内网访问外网的网页，也不能开启)</span><br><span class="line"></span><br><span class="line"># 刚开始这里配置错了，怎么样都不行。。。</span><br><span class="line">xdebug.remote_host &#x3D; &quot;192.168.0.103&quot;</span><br><span class="line">; 默认是主机，如果服务器可以直接你的本地电脑，可以直接填写本机ip，我这里使用xshell做tcp转发</span><br><span class="line"></span><br><span class="line">xdebug.remote_port &#x3D; 9211</span><br><span class="line">; 默认端口是9000，由于端口被fpm占用，我修改为9211，建议没有端口冲突时不修改</span><br><span class="line"></span><br><span class="line">xdebug.remote_autostart &#x3D; 0</span><br><span class="line">; 这个为1，会忽略COOKIE或者POST&#x2F;GET中带的XDEBUG_SESSION参数，不管有没有，都会启动调试，所以，还是设置为0比较好，默认0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>local.ini</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">post_max_size &#x3D; 256m</span><br><span class="line">upload_max_filesize &#x3D; 256m</span><br></pre></td></tr></table></figure>

<blockquote>
<p>nginx.conf</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">user  www-data;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;json;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    ## PHP-FPM Servers ##</span><br><span class="line">    upstream php-fpm &#123;</span><br><span class="line">        server localhost:9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root   &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">        client_max_body_size 32m;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            index  index.php;</span><br><span class="line">            if (!-e $request_filename)&#123;</span><br><span class="line">                rewrite ^&#x2F;(.*) &#x2F;index.php last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ ^(.+\.php)(.*)$ &#123;</span><br><span class="line">            fastcgi_index        index.php;</span><br><span class="line">            fastcgi_split_path_info ^(.+\.php)(.*)$;</span><br><span class="line">            fastcgi_param        SCRIPT_FILENAME        $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param        PATH_INFO              $fastcgi_path_info;</span><br><span class="line">            fastcgi_param        PATH_TRANSLATED        $document_root$fastcgi_path_info;</span><br><span class="line">            fastcgi_pass php-fpm;</span><br><span class="line">            client_max_body_size 100m;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">            add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-安装及验证"><a href="#2-安装及验证" class="headerlink" title="2. 安装及验证"></a>2. 安装及验证</h4><blockquote>
<p>docker 环境</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">docker-compose build</span><br><span class="line"># 启动</span><br><span class="line">docker-compose up -d</span><br><span class="line"># 查看容器状态</span><br><span class="line">docker-compose ps</span><br><span class="line"># 进入容器</span><br><span class="line">docker-compose exec fpm bash</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">php -v</span><br><span class="line">PHP 7.1.23 (cli) (built: Oct 16 2018 01:08:49) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans</span><br><span class="line"># 可以看到PHP已正确安装，且 xdebug 扩展已开启</span><br><span class="line"></span><br><span class="line"># 新建 index.php 文件，在宿主机浏览器直接访问，得到结果，表示 nginx 已正确配置</span><br><span class="line"># 我这里 docker 虚拟机配置的端口为 9111</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:9111</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置 PHPstorm</p>
</blockquote>
<p>首先配置 PHPstorm 使用的 CLI 解释器为 docker 虚拟机内的 PHP</p>
<p><img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-195714.jpg"></p>
<p><img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-195838.jpg"></p>
<p>配置 xdebug 端口<br><img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-200745.jpg"></p>
<p>Run -&gt; Edit Configuration 或者 或者点击 PHPstorm 右上角的 Edit Configuration</p>
<p><img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-201139.jpg"></p>
<p><img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-201423.jpg"></p>
<blockquote>
<p>浏览器调试，安装对应的扩展即可，略</p>
</blockquote>
<blockquote>
<p>postman 断点调试</p>
</blockquote>
<ol>
<li>选择刚才的配置，设置断点，开启小电话<br> <img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-201724.jpg"></li>
<li>在指定域名（如 localhost）的 cookie 中添加一次 XDEBUG_SESSION=PHPSTORM<br> <img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-201904.jpg"><br> <img src="https://zzpwestlife.oss-cn-beijing.aliyuncs.com/blog/Jietu20190216-201952.jpg"></li>
<li>访问，即可自动跳回至 PHPstorm 的断点处，可以愉快地调试了。</li>
</ol>
<p>下一步，记录调试的流程、快捷键、技巧等，敬请期待。</p>
]]></content>
      
        
        <tags>
            
            <tag> xdebug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几个小问题 201806]]></title>
      <url>/2018/06/08/%20%E5%87%A0%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%20201806/</url>
      <content type="html"><![CDATA[<h2 id="Linux-warning-setlocale-LC-CTYPE-cannot-change-locale-UTF-8-No-such-file-or-directory"><a href="#Linux-warning-setlocale-LC-CTYPE-cannot-change-locale-UTF-8-No-such-file-or-directory" class="headerlink" title="Linux warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory"></a>Linux warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory</h2><p>这个问题经常遇到，记录一下，解决方法也很简单</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;environment</span><br><span class="line"></span><br><span class="line"># add these lines...</span><br><span class="line"></span><br><span class="line">LANG&#x3D;en_US.utf-8</span><br><span class="line">LC_ALL&#x3D;en_US.utf-8</span><br></pre></td></tr></table></figure>

<h2 id="mac-ssh-连接服务器，vim-文件内的中文为乱码"><a href="#mac-ssh-连接服务器，vim-文件内的中文为乱码" class="headerlink" title="mac ssh 连接服务器，vim 文件内的中文为乱码"></a>mac ssh 连接服务器，vim 文件内的中文为乱码</h2><p>iterm 配置utf8编码，本地终端中文不乱码，ssh远程中文乱码</p>
<p>遇到了同样的问题，主要是远程服务器的语言编码与终端的编码不一致。<br>在远程服务器端的  <code>~/.bashrc</code> 文件里面加入以下代码：<br><code>export LANG=&#39;UTC-8&#39;export LC_ALL=&#39;en_US.UTF-8&#39;</code><br>然后source一下，中文就可以正常显示。<br>下次登录 <code>.bashrc</code> 文件自动运行，中文照样正常显示。</p>
<h2 id="nginx-access-log"><a href="#nginx-access-log" class="headerlink" title="nginx access_log"></a>nginx access_log</h2><p>其实网上说的 access_log /dev/null; 只是针对nginx的error_log而言的。如果想关闭error_log，那么就用error_log /dev/null（看老外是这么做的）。</p>
<p>但是想关闭access_log的话，直接在nginx.conf的http模块中配置<code>access_log off</code>;即可。</p>
<p>需要注意的是，已经继承了http模块的那些模块不要再设置access_log off;了。 </p>
<p>比如，我已经在http模块中设置了access_log off;，那么就不要在http模块所包含的server模块或location模块中设置access_log off;，以及虚拟主机目录(vhost)下的配置文件也不要添加access_log off;。</p>
<h2 id="composer-内存限制解除"><a href="#composer-内存限制解除" class="headerlink" title="composer 内存限制解除"></a>composer 内存限制解除</h2><p><code>php -d memory_limit=-1 composer.phar install</code></p>
<h2 id="mac-允许安装-app"><a href="#mac-允许安装-app" class="headerlink" title="mac 允许安装 app"></a>mac 允许安装 app</h2><p><code>sudo spctl --master-disable</code></p>
<h2 id="搬瓦工-ss-面板"><a href="#搬瓦工-ss-面板" class="headerlink" title="搬瓦工 ss 面板"></a>搬瓦工 ss 面板</h2><p><code>main-exec.php?mode=extras_shadowsocks</code></p>
<h2 id="mac-微信动图目录"><a href="#mac-微信动图目录" class="headerlink" title="mac 微信动图目录"></a>mac 微信动图目录</h2><p><code>/Users/ZouZhipeng/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/a3ac8c8fd9e2cbceb1e690f6bcbf8741/Stickers/File</code></p>
<h2 id="vim-统计字符串个数"><a href="#vim-统计字符串个数" class="headerlink" title="vim 统计字符串个数"></a>vim 统计字符串个数</h2><p><code>:%s/字符串/&amp;/gn</code></p>
<h2 id="vim-未使用-root-用户时，-sudo-保存退出"><a href="#vim-未使用-root-用户时，-sudo-保存退出" class="headerlink" title="vim 未使用 root 用户时， sudo 保存退出"></a>vim 未使用 root 用户时， sudo 保存退出</h2><p><code>:w !sudo tee %</code></p>
<h2 id="mac-text-文件乱码问题"><a href="#mac-text-文件乱码问题" class="headerlink" title="mac text 文件乱码问题"></a>mac text 文件乱码问题</h2><p><code>iconv -c -f GB2312 -t UTF-8 [你要看的文件] &gt;&gt; [新文件的名称]</code></p>
<h2 id="MySQL密码的恢复方法"><a href="#MySQL密码的恢复方法" class="headerlink" title="MySQL密码的恢复方法"></a>MySQL密码的恢复方法</h2><ul>
<li>修改MySQL的登录设置： <code># sudo vi /etc/my.cnf</code> 在[mysqld]的段中加上一句：<code>skip-grant-tables</code> 保存并且退出vi。</li>
<li>重新启动mysqld <code># /etc/init.d/mysqld restart  ( sudo service mysqld restart )</code></li>
<li>用以下命令启动MySQL，以不检查权限的方式启动； <code>mysqld --skip-grant-tables &amp;</code></li>
<li>然后用空密码方式使用root用户登录 MySQL； <code>mysql -u root</code></li>
</ul>
<p><code>mysql&gt; USE mysql;</code></p>
<blockquote>
<p>注意： mysql 5.7 用户密码字段改为了 <code>authentication_string</code>  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set authentication_string&#x3D;PASSWORD(&#39;zzp123456&#39;) where User&#x3D;&#39;root&#39;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure>

<ul>
<li>将MySQL的登录设置修改回来 <code># vi /etc/my.cnf</code> 将刚才在[mysqld]的段中加上的 <code>skip-grant-tables</code> 删除 保存并且退出vi。</li>
<li>重新启动mysqld <code># /etc/init.d/mysqld restart   ( service mysqld restart )</code></li>
<li>恢复服务器的正常工作状态</li>
</ul>
<p>将步骤一中的操作逆向操作。恢复服务器的工作状态。</p>
<h2 id="mysql-密码过于简单的问题"><a href="#mysql-密码过于简单的问题" class="headerlink" title="mysql 密码过于简单的问题"></a>mysql 密码过于简单的问题</h2><p>Building on the answer from Sharfi, edit the <code>/etc/my.cnf</code> file and add just this one line:<br><code>validate_password_policy=LOW</code></p>
<p>That should sufficiently neuter the validation as requested by the OP. You will probably want to restart mysqld after this change. Depending on your OS, it would look something like:<br><code>sudo service mysqld restart</code></p>
<p><code>mysql&gt; SET PASSWORD = PASSWORD(&#39;your_new_password&#39;);</code></p>
<h2 id="vagrant-up-的问题"><a href="#vagrant-up-的问题" class="headerlink" title="vagrant up 的问题"></a>vagrant up 的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vagrant was unable to mount VirtualBox shared folders. This is usually</span><br><span class="line">because the filesystem &quot;vboxsf&quot; is not available. This filesystem is</span><br><span class="line">made available via the VirtualBox Guest Additions and kernel module.</span><br><span class="line">Please verify that these guest additions are properly installed in the</span><br><span class="line">guest. This is not a bug in Vagrant and is usually caused by a faulty</span><br><span class="line">Vagrant box. For context, the command attempted was:</span><br><span class="line"></span><br><span class="line">mount -t vboxsf -o uid&#x3D;1000,gid&#x3D;1000 home_vagrant_www &#x2F;home&#x2F;vagrant&#x2F;www</span><br><span class="line"></span><br><span class="line">The error output from the command was:</span><br><span class="line"></span><br><span class="line">&#x2F;sbin&#x2F;mount.vboxsf: mounting failed with the error: No such device</span><br></pre></td></tr></table></figure>

<p>I have been able to workaround this by logging on with with <code>vagrant ssh</code> and running a<code>sudo yum update -y</code></p>
<p>Then once that completed I disconnected from ssh <code>vagrant halt</code> and re-ran <code>vagrant reload --provision</code><br>The guest-additions were then showing as running OK <code>vagrant up</code>.</p>
<h2 id="删除-time-machine-备份"><a href="#删除-time-machine-备份" class="headerlink" title="删除 time machine 备份"></a>删除 time machine 备份</h2><p>所有： <code>sudo tmutil delete /Volumes/17702250105T2/Backups.backupdb</code><br>时间很长，慢慢等</p>
<p>指定：<code>sudo tmutil delete /Volumes/17702250105T2/Backups.backupdb/志鹏’s MacBook Pro/2017-01-07-002750</code></p>
<p>Total deleted: 431.3G 用时 20小时左右</p>
<h2 id="允许mysql远程访问"><a href="#允许mysql远程访问" class="headerlink" title="允许mysql远程访问"></a>允许mysql远程访问</h2><p>在安装mysql的机器上运行：</p>
<p>进入MySQL服务器<br><code>mysql -h localhost -u root</code></p>
<p>赋予任何主机访问数据的权限<br><code>mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; WITH GRANT OPTION</code></p>
<p>使修改生效<br><code>mysql&gt;FLUSH PRIVILEGES</code></p>
<p>退出MySQL服务器<br><code>mysql&gt;exit</code></p>
]]></content>
      
        
        <tags>
            
            <tag> trivia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vagrant-docker-php-env]]></title>
      <url>/2018/04/07/vagrant-docker-php-env/</url>
      <content type="html"><![CDATA[<h1 id="vagrant-docker-php-env"><a href="#vagrant-docker-php-env" class="headerlink" title="vagrant-docker-php-env"></a>vagrant-docker-php-env</h1><h2 id="Mac-系统下-vagrant-docker-php-env"><a href="#Mac-系统下-vagrant-docker-php-env" class="headerlink" title="Mac 系统下 vagrant-docker-php-env"></a>Mac 系统下 vagrant-docker-php-env</h2><h3 id="折腾了两天，备份一下"><a href="#折腾了两天，备份一下" class="headerlink" title="折腾了两天，备份一下"></a>折腾了两天，备份一下</h3><p>在 <a href="https://github.com/kasperisager/php-dockerized">https://github.com/kasperisager/php-dockerized</a> 的基础上修改，感谢</p>
<a id="more"></a>

<h3 id="1-下载配置文件"><a href="#1-下载配置文件" class="headerlink" title="1. 下载配置文件"></a>1. 下载配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zzpwestlife&#x2F;vagrant-docker-php-env.git</span><br></pre></td></tr></table></figure>

<p>按需修改 Vagrantfile 的虚拟机 ip 和 共享文件目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:eth1 &#x3D;&gt; &quot;192.168.10.10&quot;, &#x2F;&#x2F; 这一行是虚拟机的 ip，安装完成后使用浏览器访问该 ip 即可</span><br><span class="line">config.vm.synced_folder &quot;&#x2F;Users&#x2F;ZouZhipeng&#x2F;www&quot;, &quot;&#x2F;home&#x2F;vagrant&#x2F;www&quot; &#x2F;&#x2F; 这里是共享目录，前者为本机目录，后者为虚拟机目录</span><br></pre></td></tr></table></figure>

<h3 id="2-进入该目录"><a href="#2-进入该目录" class="headerlink" title="2. 进入该目录"></a>2. 进入该目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vagrant-docker-php-env</span><br></pre></td></tr></table></figure>

<p>并将准备好的 nginx 配置放入 php-dockerized/sites/ 目录中</p>
<h3 id="3-安装-vagrant-虚拟机"><a href="#3-安装-vagrant-虚拟机" class="headerlink" title="3. 安装 vagrant 虚拟机"></a>3. 安装 vagrant 虚拟机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>如果没有安装 vagrant，需要提前安装</p>
<p>这个过程可能会比较漫长，建议开启代理</p>
<h3 id="4-安装完成后进入虚拟机"><a href="#4-安装完成后进入虚拟机" class="headerlink" title="4. 安装完成后进入虚拟机"></a>4. 安装完成后进入虚拟机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant status</span><br><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>

<p>其他命令，如停止、重启、删除等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant halt</span><br><span class="line">vagrant reload</span><br><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure>


<h3 id="5-进入-docker-compose-yml-所在的目录"><a href="#5-进入-docker-compose-yml-所在的目录" class="headerlink" title="5. 进入 docker-compose.yml 所在的目录"></a>5. 进入 docker-compose.yml 所在的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;vagrant&#x2F;www&#x2F;docker&#x2F;php-dockerized</span><br></pre></td></tr></table></figure>


<p>将 daemon.json 复制至 /etc/docker 目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ..&#x2F;daemon.json &#x2F;etc&#x2F;docker&#x2F;</span><br></pre></td></tr></table></figure>

<p>这个配置文件替换了 docker 镜像的下载源，使用国内的下载源速度会快些</p>
<h3 id="6-构建镜像"><a href="#6-构建镜像" class="headerlink" title="6. 构建镜像"></a>6. 构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>

<h3 id="7-生成容器并启动"><a href="#7-生成容器并启动" class="headerlink" title="7. 生成容器并启动"></a>7. 生成容器并启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>第一次生成也需要不少时间</p>
<h3 id="8-在本机增加-hosts-映射"><a href="#8-在本机增加-hosts-映射" class="headerlink" title="8. 在本机增加 hosts 映射"></a>8. 在本机增加 hosts 映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">192.168.10.10 xb.insurance.com</span><br></pre></td></tr></table></figure>
<p>通过浏览器访问</p>
<h3 id="9-其他命令"><a href="#9-其他命令" class="headerlink" title="9. 其他命令"></a>9. 其他命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 停止所有容器</span><br><span class="line">docker-compose stop</span><br><span class="line"># 停止并删除容器</span><br><span class="line">docker-compose down</span><br><span class="line"># 进入某个容器</span><br><span class="line">docker-compose exec containerName bash</span><br><span class="line"># 每次修改配置都需要重新 build 一下</span><br><span class="line">docker-compose build containerName</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
</blockquote>
<p>本机目录、虚拟机目录、容器目录三者关系要搞清楚</p>
<p>nginx 和 php-fpm 使用 socket 通信，需要设置多个位置</p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 分区分表]]></title>
      <url>/2018/02/26/MySQL-%E5%88%86%E5%8C%BA%E5%88%86%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-MySQL-分区-amp-amp-分库分表"><a href="#1-MySQL-分区-amp-amp-分库分表" class="headerlink" title="1. MySQL 分区 &amp;&amp; 分库分表"></a>1. MySQL 分区 &amp;&amp; 分库分表</h2><h3 id="1-分区表"><a href="#1-分区表" class="headerlink" title="1. 分区表"></a>1. 分区表</h3><p>分区表是一个独立的逻辑表，但是底层 MySQL 将其分成了多个物理子表，每一个分区表都会使用一个独立的表文件</p>
<p>客户端和 PHP 无感知，代码不需要修改，对业务逻辑没有任何影响</p>
<a id="more"></a>

<h4 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h4><p>创建表时使用 <code>partition by</code> 子句定义每个分区存放的数据，执行查询时，优化器会根据分区定义过滤那些没有所需数据的分区，这样查询只需要查询所需数据所在的分区即可，大大提高查询效率</p>
<p>分区的主要目的是将数据按照一个较粗的粒度分在不同的表中，这样可以将相关的数据存放在一起，而且如果想一次性删除整个分区的数据也很方便</p>
<h4 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>表非常大，无法全部存在内存，或者只在表的最后有热点数据，其他都是历史数据</li>
<li>分区表的数据更易维护，可以对独立的分区进行独立的操作</li>
<li>分区表的数据可以分布在不同的机器上，从而高效使用资源</li>
<li>可以使用分区表来避免某些特殊的瓶颈</li>
<li>可以备份和恢复独立的分区</li>
</ol>
<h4 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h4><ol>
<li>一个表最多只能有 1024 个分区</li>
<li>5.1 版本，分区表表达式必须是整数，5.5 之后可以使用列分区</li>
<li>分区字段如果有主键和唯一索引列，那么主键列和唯一列都必须包含进来</li>
<li>分区表中无法使用外键约束</li>
<li>需要对现有表的结构进行修改</li>
<li>所有分区都必须使用相同的存储引擎</li>
<li>可以使用的函数和表达式会有一些限制</li>
<li>部分存储引擎不支持分区（InnoDB 和 MyISAM 都支持）</li>
<li>对于 MyISAM 的分区表，不能使用 load index into cache，即不能将索引缓存</li>
<li>对于 MyISAM 的分区表，使用分区表时需要打开更多的文件描述符，降低查询效率。</li>
</ol>
<h3 id="2-分库分表"><a href="#2-分库分表" class="headerlink" title="2. 分库分表"></a>2. 分库分表</h3><h4 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h4><p>通过一些 hash 算法或者工具实现将一张数据表垂直或者水平进行物理切分。</p>
<h4 id="2-适用场景-1"><a href="#2-适用场景-1" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h4><ol>
<li>单表记录条数达到百万或者千万级别时</li>
<li>解决表锁的问题</li>
</ol>
<h4 id="3-分表方式"><a href="#3-分表方式" class="headerlink" title="3. 分表方式"></a>3. 分表方式</h4><h5 id="1-水平分割"><a href="#1-水平分割" class="headerlink" title="1. 水平分割"></a>1. 水平分割</h5><p>表很大，分割后可以降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，提高查询速度</p>
<h6 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h6><ol>
<li>表中的数据本身就有独立性，例如表中分别记录各个地区的数据或者不同时期的数据，特别是有些数据常用，有些不常用，比如切分历史数据和活跃数据</li>
<li>需要把数据存放到多个介质上</li>
</ol>
<h6 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h6><ol>
<li>给应用增加复杂度，通常查询时需要多个表名，查询所有数据都需要 union 操作；</li>
<li>在许多数据库应用中，这种复杂性会超过带来的优点，查询时会增加读一个索引层的磁盘次数；</li>
</ol>
<h5 id="2-垂直分表"><a href="#2-垂直分表" class="headerlink" title="2. 垂直分表"></a>2. 垂直分表</h5><p>把主键和一些列放在一张表，然后把主键和另外的列放在另一张表中</p>
<h6 id="1-使用场景-1"><a href="#1-使用场景-1" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h6><ol>
<li>表中某些列常用，而另外一些列不常用</li>
<li>可以使数据行变小，一个数据页能存储更多数据，查询时减少 I/O 次数</li>
</ol>
<h6 id="2-缺点-1"><a href="#2-缺点-1" class="headerlink" title="2. 缺点"></a>2. 缺点</h6><p>管理冗余列，查询所有数据都需要 join 操作</p>
<h3 id="3-分库分表缺点"><a href="#3-分库分表缺点" class="headerlink" title="3. 分库分表缺点"></a>3. 分库分表缺点</h3><ol>
<li>有些分表的策略基于应用层的逻辑算法，一旦逻辑算法改变，整个分表逻辑都会改变，扩展性较差</li>
<li>对于应用层来说，逻辑算法无疑会增加开发成本</li>
</ol>
<h2 id="2-MySQL-复制原理及负载均衡"><a href="#2-MySQL-复制原理及负载均衡" class="headerlink" title="2. MySQL 复制原理及负载均衡"></a>2. MySQL 复制原理及负载均衡</h2><h3 id="1-MySQL-主从复制工作原理"><a href="#1-MySQL-主从复制工作原理" class="headerlink" title="1. MySQL 主从复制工作原理"></a>1. MySQL 主从复制工作原理</h3><ol>
<li>在主库上把数据更改记录到二进制文件，即所有的写操作都记录到 binlog</li>
<li>从库将主库的日志复制到自己的中继日志</li>
<li>从库读取中继日志中的事件，将其重放到从库数据中，即执行了日志中的 SQL 语句</li>
</ol>
<h3 id="2-解决了哪些问题"><a href="#2-解决了哪些问题" class="headerlink" title="2. 解决了哪些问题"></a>2. 解决了哪些问题</h3><ol>
<li>数据分布：随意停止或开始复制，并在不同地理位置分布数据备份</li>
<li>负载均衡：降低单个服务器的压力</li>
<li>高可用和故障切换：帮助应用程序避免单点失败</li>
<li>升级测试：可以使用更高版本的 MySQL 作为从库</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 知识整理]]></title>
      <url>/2018/02/24/MySQL-%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="mysql-关联更新"><a href="#mysql-关联更新" class="headerlink" title="mysql 关联更新"></a>mysql 关联更新</h3><p>update 后面跟的表名是即将要使用到的表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> A,B <span class="keyword">set</span> A.c1=b.c1, A.c2=b.c2 <span class="keyword">where</span> A.id=B.id;</span><br><span class="line"><span class="keyword">update</span> A <span class="keyword">inner</span> <span class="keyword">join</span> B <span class="keyword">on</span> A.id=b.id <span class="keyword">set</span> A.c1=B.c1, A.c2=B.c2 <span class="keyword">where</span> ...;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="6-种关联查询"><a href="#6-种关联查询" class="headerlink" title="6 种关联查询"></a>6 种关联查询</h3><ul>
<li>交叉连接 cross join: 笛卡尔积<ul>
<li><code>select * from A, B, (,C)</code></li>
<li><code>select * from A cross join B (cross join C)</code></li>
<li>没有任何关联条件，结果是笛卡尔积，结果集会很大，没有意义，很少使用</li>
</ul>
</li>
<li>内连接 inner join<ul>
<li><code>select * from A,B where A.id=B.id</code></li>
<li><code>select * from A (inner) join B on A.id=B.id</code></li>
<li>多表中同时符合某种条件的数据记录的集合</li>
<li>等值连接（<code>on A.id=B.id</code>）、不等值连接（<code>on A.id&gt;B.id</code>）、自连接（<code>select * from A t1 inner join A t2 on t1.id=t2.pid</code>）</li>
<li>可以缩写为 join</li>
</ul>
</li>
<li>外连接 left join/right join<ul>
<li>左外连接： left outer join，以左表为主，先查询出左表，按照 on 后的关联条件匹配右表，没有匹配到的用 null 填充，可以简写为 left join</li>
<li>右外连接 right outer join</li>
</ul>
</li>
<li>联合查询 union, union all<ul>
<li><code>select * from A union select * from B union ...</code></li>
<li>多条 select 语句的结果集进行累加，union 前的结果为基准</li>
<li>列数要相等，相同的记录行会合并</li>
<li>如果使用 union all，则不会合并重复的记录行</li>
<li>union 效率高于 union all</li>
</ul>
</li>
<li>全连接 full join<ul>
<li>只是一个概念，mysql 不支持</li>
<li>可以使用 left join，union，right join 联合实现，<code>select * from A left join B on A.id=B.id union select * from A right join B on A.id=B.id</code></li>
</ul>
</li>
</ul>
<h3 id="MySQL-查询优化"><a href="#MySQL-查询优化" class="headerlink" title="MySQL 查询优化"></a>MySQL 查询优化</h3><h4 id="1-查找分享查询速度慢的原因"><a href="#1-查找分享查询速度慢的原因" class="headerlink" title="1. 查找分享查询速度慢的原因"></a>1. 查找分享查询速度慢的原因</h4><h5 id="记录慢查询日志"><a href="#记录慢查询日志" class="headerlink" title="记录慢查询日志"></a>记录慢查询日志</h5><p>分析查询日志，不建议直接打开慢查询日志进行分析，可以使用 pt-query-digest 工具进行分析</p>
<h5 id="使用-show-profile"><a href="#使用-show-profile" class="headerlink" title="使用 show profile"></a>使用 show profile</h5><p><code>set profiling=1;</code> 开启，服务器上执行的所有语句都会监测消耗的时间，存到临时表中</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;</span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> <span class="keyword">query</span> 临时表中单条记录<span class="keyword">ID</span>;</span><br></pre></td></tr></table></figure>

<h5 id="使用-show-status"><a href="#使用-show-status" class="headerlink" title="使用 show status"></a>使用 show status</h5><p><code>show status</code> 会返回一些计数器，<code>show global status</code> 查看服务器级别的所有计数</p>
<p>有时根据这些计数，可以猜测出哪些操作代价较高或者消耗时间多</p>
<h5 id="使用-show-processlist"><a href="#使用-show-processlist" class="headerlink" title="使用 show processlist"></a>使用 show processlist</h5><p>观察是否有大量进程处于不正常的状态或者特征</p>
<h5 id="使用-explain"><a href="#使用-explain" class="headerlink" title="使用 explain"></a>使用 explain</h5><p>分析单条 SQL 语句<br><code>explain select * from A;</code></p>
<h4 id="2-优化查询过程中的数据访问"><a href="#2-优化查询过程中的数据访问" class="headerlink" title="2. 优化查询过程中的数据访问"></a>2. 优化查询过程中的数据访问</h4><ul>
<li>访问数据太多导致查询性能下降</li>
<li>确定应用程序是否在检索大量超过需要的数据，可能是太多行或列</li>
<li>确认 mysql 服务器是否在分析大量不必要的数据行</li>
</ul>
<p>方案</p>
<ul>
<li>查询不需要的记录，使用 limit</li>
<li>多表关联只返回所需要的列</li>
<li>select * 不要用</li>
<li>重复查询相同的数据，可以缓存数据，下次直接读取缓存</li>
<li>使用索引覆盖扫描，把所有用的列都放到索引中，这样存储引擎不需要回表获取对应行就可以返回结果</li>
<li>改变数据库和表的结构，修改数据表范式（冗余字段降低范式，用空间换取时间）</li>
<li>重写 SQL 语句，让优化器可以以更优的方式执行查询</li>
</ul>
<h4 id="3-优化长难的查询语句"><a href="#3-优化长难的查询语句" class="headerlink" title="3. 优化长难的查询语句"></a>3. 优化长难的查询语句</h4><p>应当使用一个复杂查询还是多个简单查询？</p>
<p>MySQL 内部每秒能扫描内存中上百万行的数据，相比之下，响应数据给客户端就要慢得多</p>
<p>大多数情况下，使用尽可能少的查询是好的，但是有时将一个大的查询分解为多个小的查询也是很有必要的，这样可以方便地做缓存</p>
<h5 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h5><p>将一个大的查询分为多个小的相同的查询</p>
<p>一次性删除 1000 万的数据比一次删除一万，暂停一会的方案更加损耗服务器开销。</p>
<h5 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h5><ul>
<li>可以将一条关联语句分解成多条 SQL 来执行</li>
<li>让缓存效率更高</li>
<li>执行单个查询可以减少锁的竞争</li>
<li>在应用层做关联可以更容易对数据库进行拆分</li>
</ul>
<h4 id="4-优化特定类型的查询语句"><a href="#4-优化特定类型的查询语句" class="headerlink" title="4. 优化特定类型的查询语句"></a>4. 优化特定类型的查询语句</h4><h5 id="优化-count"><a href="#优化-count" class="headerlink" title="优化 count(*)"></a>优化 count(*)</h5><ul>
<li>count(*) 中的 * 会忽略所有的列，直接统计所有列数，速度更快，因此不要使用 count(列名)</li>
<li>MyISAM 中，没有任何 where 条件的 count(*) 非常快</li>
<li>当有 where 条件，MyISAM 的 count 统计也不一定比其他表引擎快</li>
<li>或者增加一张汇总表</li>
<li>缓存汇总信息</li>
</ul>
<h5 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h5><ul>
<li>确认 on 或者 using 子句的列上有索引，如果没有要添加，否则会导致全表扫描</li>
<li>确保 group by 和 order by 中只有一个表中的列，这样 MySQL 才有可能使用索</li>
</ul>
<h5 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h5><p>尽可能使用关联查询来替代</p>
<h5 id="优化-group-by-和-distinct"><a href="#优化-group-by-和-distinct" class="headerlink" title="优化 group by 和 distinct"></a>优化 group by 和 distinct</h5><ul>
<li>均可使用索引来优化，是最有效的优化方法</li>
<li>关联查询中，使用标识列进行分组效率更高，即 group by 后面跟的列名是主键列或 auto_increment 列</li>
<li>如果不需要排序，进行 group by 时使用 order by null，MySQL 就不会再进行文件排序</li>
<li>with rollup 超级聚合，尽量挪到应用程序处理，而不应该在数据库中处理</li>
</ul>
<h5 id="优化-limit-分页"><a href="#优化-limit-分页" class="headerlink" title="优化 limit 分页"></a>优化 limit 分页</h5><ul>
<li>limit 偏移量大的时候，查询效率较低</li>
<li>可以记录上次查询的最大ID，下次查询时直接根据该ID来查询</li>
</ul>
<h5 id="优化-union-查询"><a href="#优化-union-查询" class="headerlink" title="优化 union 查询"></a>优化 union 查询</h5><p>使用 union all 替代 union 查询，效率更高，数据去重放到应用层面</p>
]]></content>
      
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 权限管理]]></title>
      <url>/2018/02/22/linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="linux-权限-https-www-imooc-com-video-9434"><a href="#linux-权限-https-www-imooc-com-video-9434" class="headerlink" title="linux 权限 https://www.imooc.com/video/9434"></a>linux 权限 <a href="https://www.imooc.com/video/9434">https://www.imooc.com/video/9434</a></h2><h3 id="1-权限对目录的作用"><a href="#1-权限对目录的作用" class="headerlink" title="1. 权限对目录的作用"></a>1. 权限对目录的作用</h3><ul>
<li>r：可以查询目录下文件名（ls）</li>
<li>w：具有修改目录结构的权限。如新建文件和目录，删除此目录下的文件和目录，重命名此目录下的文件和目录，剪切（touch，rm，mv，cp）</li>
<li>x：可以进入目录（cd）</li>
</ul>
<a id="more"></a>

<h3 id="2-权限对文件的作用"><a href="#2-权限对文件的作用" class="headerlink" title="2. 权限对文件的作用"></a>2. 权限对文件的作用</h3><ul>
<li>r：读取文件内容（cat，more，head，tail）</li>
<li>w：编辑、新增、修改文件内容（vi echo），但是不包含删除文件</li>
<li>x：可执行</li>
</ul>
<p><b style="color:red">对文件来讲，最高权限是 x；<br>对目录来讲，最高权限是 w</p>
<p>目录的有效权限只有 0，5（rx），7（rwx），其他都没意义</b></p>
<h3 id="3-文件的默认权限"><a href="#3-文件的默认权限" class="headerlink" title="3. 文件的默认权限"></a>3. 文件的默认权限</h3><p>umask 值：root 用户默认为 0022，普通用户默认为 0002。 <code>/etc/profile</code></p>
<ul>
<li>文件默认不能建立为执行文件，必须手动赋予执行权限</li>
<li>所以文件默认权限最大为 666</li>
<li>默认权限需要换算成字母再相减</li>
<li>建立文件的默认权限，是 666 减去 umask 值 （换成字母逻辑减）</li>
</ul>
<h3 id="4-目录的默认权限"><a href="#4-目录的默认权限" class="headerlink" title="4. 目录的默认权限"></a>4. 目录的默认权限</h3><ul>
<li>目录默认权限最大为 777</li>
<li>默认权限需要换算成字母再相减</li>
<li>建立目录之后的默认权限，为 777 减去 umask 值（换算成字母逻辑减）</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 入门到实践 慕课网]]></title>
      <url>/2018/02/18/nginx-%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E6%85%95%E8%AF%BE%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>nginx 是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>
<p>安装 <code>yum install nginx</code></p>
<a id="more"></a>

<h3 id="1-安装目录"><a href="#1-安装目录" class="headerlink" title="1. 安装目录"></a>1. 安装目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze4kikm9076bxac1noqz opt]# rpm -ql nginx</span><br><span class="line">&#x2F;etc&#x2F;logrotate.d&#x2F;nginx</span><br><span class="line">&#x2F;etc&#x2F;nginx</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;fastcgi_params</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;koi-utf</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;koi-win</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;mime.types</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;modules</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;scgi_params</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;uwsgi_params</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;win-utf</span><br><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;nginx</span><br><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;nginx-debug</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx-debug.service</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service</span><br><span class="line">&#x2F;usr&#x2F;lib64&#x2F;nginx</span><br><span class="line">&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;initscripts&#x2F;legacy-actions&#x2F;nginx</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;initscripts&#x2F;legacy-actions&#x2F;nginx&#x2F;check-reload</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;initscripts&#x2F;legacy-actions&#x2F;nginx&#x2F;upgrade</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx-debug</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.12.2</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.12.2&#x2F;COPYRIGHT</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;nginx.8.gz</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;50x.html</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">&#x2F;var&#x2F;cache&#x2F;nginx</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;nginx</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>路径</th>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>/etc/logrotate.d/nginx</code></td>
<td>配置文件</td>
<td>nginx日志轮转，用于logrotate服务的日志切割</td>
</tr>
<tr>
<td><code>/etc/nginx</code> <br/> <code>/etc/nginx/nginx.conf</code> <br/> <code>/etc/nginx/conf.d</code> <br/> <code>/etc/nginx/conf.d/default.conf</code></td>
<td>目录、配置文件</td>
<td>nginx主配置文件</td>
</tr>
<tr>
<td><code>/etc/nginx/fastcgi_params</code> <br/> <code>/etc/nginx/uwsgi_params</code> <br/> <code>/etc/nginx/scgi_params</code></td>
<td>配置文件</td>
<td>cgi配置相关，fastcgi配置</td>
</tr>
<tr>
<td><code>/etc/nginx/koi-utf</code> <br/> <code>/etc/nginx/koi-win</code> <br/> <code>/etc/nginx/win-utf </code></td>
<td>配置文件</td>
<td>编码转换映射转化文件 很少用到</td>
</tr>
<tr>
<td><code>/etc/nginx/mime.types</code></td>
<td>配置文件</td>
<td>设置HTTP协议的Content-Type与扩展名对应关系</td>
</tr>
<tr>
<td><code>/etc/sysconfig/nginx</code> <br/> <code>/etc/sysconfig/nginx-debug</code> <br/> <code>/usr/lib/system/system/nginx-debug.service</code> <br/> <code>/usr/lib/systemd/system/nginx.service</code></td>
<td>配置文件</td>
<td>用于配置出系统守护进程管理器管理方式，取代旧的init.d的脚本管理方式</td>
</tr>
<tr>
<td><code>/usr/lib64/nginx/modules</code> <br/> <code>/etc/nginx/modules</code></td>
<td>目录</td>
<td>nginx 模块目录</td>
</tr>
<tr>
<td><code>/usr/sbin/nginx</code> <br/> <code>/usr/sbin/nginx-debug</code></td>
<td>命令</td>
<td>nginx 服务的启动管理终端命令， nginx 服务的启动、关闭、配置、管理</td>
</tr>
<tr>
<td><code>/usr/share/doc/nginx-1.12.2</code> <br/> <code>/usr/share/doc/nginx-1.12.2/COPYRIGHT</code> <br/> <code>/usr/share/man/man8/nginx.8.gz</code></td>
<td>文件、目录</td>
<td>nginx的手册和帮助文件</td>
</tr>
<tr>
<td><code>/var/cache/nginx</code></td>
<td>目录</td>
<td>nginx的缓存目录</td>
</tr>
<tr>
<td><code>/var/log/nginx</code></td>
<td>目录</td>
<td>nginx的日志目录</td>
</tr>
</tbody></table>
<h3 id="2-编译参数"><a href="#2-编译参数" class="headerlink" title="2. 编译参数"></a>2. 编译参数</h3><p>查看编译时所用到的参数 <code>nginx -V</code> 大写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze4kikm9076bxac1noqz opt]# nginx -V</span><br><span class="line">nginx version: nginx&#x2F;1.12.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix&#x3D;&#x2F;etc&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --modules-path&#x3D;&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.lock --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;client_temp --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;proxy_temp --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;fastcgi_temp --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;uwsgi_temp --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;scgi_temp --user&#x3D;nginx --group&#x3D;nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt&#x3D;&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE&#x3D;2 -fexceptions -fstack-protector-strong --param&#x3D;ssp-buffer-size&#x3D;4 -grecord-gcc-switches -m64 -mtune&#x3D;generic -fPIC&#39; --with-ld-opt&#x3D;&#39;-Wl,-z,relro -Wl,-z,now -pie&#39;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>路径</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>--prefix=/etc/nginx</code> <br/> <code>--sbin-path=/usr/sbin/nginx</code>  <br/> <code>--modules-path=/usr/lib64/nginx/modules</code> <br/> <code>--conf-path=/etc/nginx/nginx.conf</code> <br/> <code>--error-log-path=/var/log/nginx/error.log</code> <br/> <code>--http-log-path=/var/log/nginx/access.log</code> <br/> <code>--pid-path=/var/run/nginx.pid</code> <br/> <code>--lock-path=/var/run/nginx.lock</code></td>
<td>安装目的目录或路径 nginx 基础路径</td>
</tr>
<tr>
<td><code>--http-client-body-temp-path=/var/cache/nginx/client_temp</code> <br/> <code>--http-proxy-temp-path=/var/cache/nginx/proxy_temp</code>  <br/> <code>--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp</code> <br/> <code>--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp</code> <br/> <code>--http-scgi-temp-path=/var/cache/nginx/scgi_temp</code></td>
<td>执行对应模块时，nginx所保留的临时文件</td>
</tr>
<tr>
<td><code>--user=nginx --group=nginx</code></td>
<td>设定nginx进程启动的用户和用户组</td>
</tr>
<tr>
<td><code>--with-cc-opt= ... </code></td>
<td>设置额外的参数将被添加到CFLAGS变量 不需要了解</td>
</tr>
<tr>
<td><code>--with-ld-opt= ... </code></td>
<td>设置附件的参数，链接系统库</td>
</tr>
</tbody></table>
<h3 id="3-基本配置语法-nginx-conf-default-conf"><a href="#3-基本配置语法-nginx-conf-default-conf" class="headerlink" title="3. 基本配置语法 nginx.conf default.conf"></a>3. 基本配置语法 nginx.conf default.conf</h3><h4 id="全局性、服务级别配置"><a href="#全局性、服务级别配置" class="headerlink" title="全局性、服务级别配置"></a>全局性、服务级别配置</h4><table>
<thead>
<tr>
<th>配置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>设置nginx服务的系统使用用户，一般为nginx，不用修改</td>
</tr>
<tr>
<td>worker_processes</td>
<td>工作进程数，一般和cpu核数保持一致即可</td>
</tr>
<tr>
<td>error_log</td>
<td>nginx错误日志</td>
</tr>
<tr>
<td>pid</td>
<td>nginx服务启动时的pid</td>
</tr>
</tbody></table>
<h4 id="事件模块配置-events"><a href="#事件模块配置-events" class="headerlink" title="事件模块配置 events"></a>事件模块配置 events</h4><table>
<thead>
<tr>
<th>配置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>worker_connections</td>
<td>每个进程运行的最大连接数 最大65535，一般10000左右最多</td>
</tr>
<tr>
<td>use</td>
<td>工作进程数，内核模型</td>
</tr>
</tbody></table>
<h4 id="default-conf-配置"><a href="#default-conf-配置" class="headerlink" title="default.conf 配置"></a>default.conf 配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 监听的端口号</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost; <span class="comment"># 服务的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 首页路径或子路径</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment"># 错误页面</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


























]]></content>
      
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 软件安装管理]]></title>
      <url>/2018/02/18/Linux-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="linux-安装软件"><a href="#linux-安装软件" class="headerlink" title="linux 安装软件"></a>linux 安装软件</h2><p>只有两种方式，源码（二进制文件）编译和 rpm 包，yum 其实也是 rpm 包的一种在线安装方式，并解决了依赖问题。但是不支持查询和校验。</p>
<a id="more"></a>

<h3 id="1-rpm-安装"><a href="#1-rpm-安装" class="headerlink" title="1. rpm 安装"></a>1. rpm 安装</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh 软件包全名</span><br><span class="line">rpm -ivh httpd-2.2.15-15.e16.centos.1.i686.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>i：install</li>
<li>v：verbose，显示指令执行过程；</li>
<li>h：hash，显示安装百分比</li>
</ul>
<h4 id="2-升级"><a href="#2-升级" class="headerlink" title="2. 升级"></a>2. 升级</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh 软件包全名</span><br><span class="line">rpm -Uvh httpd-2.2.15-15.e16.centos.1.i686.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>U：upgrade 升级</li>
</ul>
<p>如果没有安装过，相当于全新安装</p>
<h4 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3. 卸载"></a>3. 卸载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e 包名，而不是包全名，只有安装和升级需要包全名</span><br><span class="line">rpm -e httpd &#x2F;&#x2F; 系统会去 &#x2F;var&#x2F;lib&#x2F;rpm 目录下的数据库中找</span><br></pre></td></tr></table></figure>

<ul>
<li>e：erase，删除</li>
<li>–nodeps：不检查依赖，实际环境中不允许使用</li>
</ul>
<p>卸载的依赖顺序和安装时的依赖顺序相反</p>
<p>rpm 包一定要解决依赖性才可以正确安装和卸载</p>
<p>为什么会有卸载命令？源码安装就没有卸载命令。因为 rpm 包安装的位置为系统默认位置，分布在系统的各个位置，想要卸载所有的文件非常麻烦，所以设置了一个卸载命令。</p>
<h4 id="4-rpm-包查询"><a href="#4-rpm-包查询" class="headerlink" title="4. rpm 包查询"></a>4. rpm 包查询</h4><h5 id="1-系统是否已安装软件"><a href="#1-系统是否已安装软件" class="headerlink" title="1. 系统是否已安装软件"></a>1. 系统是否已安装软件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -q 包名</span><br><span class="line">rpm -q httpd</span><br></pre></td></tr></table></figure>
<ul>
<li>q：query</li>
<li>a：all</li>
</ul>
<h5 id="2-查询系统中所有已安装的软件"><a href="#2-查询系统中所有已安装的软件" class="headerlink" title="2. 查询系统中所有已安装的软件"></a>2. 查询系统中所有已安装的软件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd</span><br></pre></td></tr></table></figure>

<h5 id="3-查询软件包详细信息"><a href="#3-查询软件包详细信息" class="headerlink" title="3. 查询软件包详细信息"></a>3. 查询软件包详细信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi 包名</span><br><span class="line">rpm -qi httpd</span><br></pre></td></tr></table></figure>

<ul>
<li>i：information</li>
<li>p：package，查询未安装包信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qip 包全名</span><br><span class="line">rpm -qi httpd-2.2.15-15.e16.centos.1.i686.rpm</span><br></pre></td></tr></table></figure>

<h5 id="4-查询包中文件安装位置"><a href="#4-查询包中文件安装位置" class="headerlink" title="4. 查询包中文件安装位置"></a>4. 查询包中文件安装位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql 包名</span><br></pre></td></tr></table></figure>

<ul>
<li>l：list，列表</li>
</ul>
<h5 id="5-rpm-包默认安装路径"><a href="#5-rpm-包默认安装路径" class="headerlink" title="5. rpm 包默认安装路径"></a>5. rpm 包默认安装路径</h5><table>
<thead>
<tr>
<th>路径</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>/etc</td>
<td align="center">配置文件安装目录</td>
</tr>
<tr>
<td>/usr/bin/</td>
<td align="center">可执行命令安装目录</td>
</tr>
<tr>
<td>/usr/lib</td>
<td align="center">程序所使用的函数库保存位置</td>
</tr>
<tr>
<td>/usr/share/doc/</td>
<td align="center">基本的软件使用手册保存位置</td>
</tr>
<tr>
<td>/usr/share/man/</td>
<td align="center">帮助文件保存位置</td>
</tr>
</tbody></table>
<h5 id="6-查询系统文件（rpm-安装生成的文件）属于哪个-rpm-包"><a href="#6-查询系统文件（rpm-安装生成的文件）属于哪个-rpm-包" class="headerlink" title="6. 查询系统文件（rpm 安装生成的文件）属于哪个 rpm 包"></a>6. 查询系统文件（rpm 安装生成的文件）属于哪个 rpm 包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf 系统文件名</span><br></pre></td></tr></table></figure>

<h5 id="7-查询软件包的依赖性"><a href="#7-查询软件包的依赖性" class="headerlink" title="7. 查询软件包的依赖性"></a>7. 查询软件包的依赖性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qR 包名</span><br><span class="line">rpm -qR httpd</span><br></pre></td></tr></table></figure>
<p>查询结果没什么意义，还不如一步步安装，根据提示来安装各种依赖</p>
<ul>
<li>R：requires</li>
</ul>
<h4 id="4-rpm-包校验"><a href="#4-rpm-包校验" class="headerlink" title="4. rpm 包校验"></a>4. rpm 包校验</h4><p>包含 md5 校验、文件修改时间校验等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -V 已安装的包名</span><br><span class="line">rpm -V httpd</span><br></pre></td></tr></table></figure>

<ul>
<li>V：verify</li>
</ul>
<p>如果没有任何输出，表示校验通过，文件没有被修改</p>
<h4 id="5-rpm-包内文件提取"><a href="#5-rpm-包内文件提取" class="headerlink" title="5. rpm 包内文件提取"></a>5. rpm 包内文件提取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm2cpio 包全名 | cpio -idv .文件绝对路径</span><br></pre></td></tr></table></figure>

<ul>
<li>rpm2cpio：将 rpm 包转换为 cpio 格式的命令</li>
<li>cpio：是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpio 选项 &lt; [文件|设备]</span><br></pre></td></tr></table></figure>

<ul>
<li>i：copy-in 模式，还原</li>
<li>d：还原时自动新建目录</li>
<li>v：显示还原过程</li>
</ul>
<p>示例</p>
<h5 id="1-查询-ls-命令属于哪个-rpm-包"><a href="#1-查询-ls-命令属于哪个-rpm-包" class="headerlink" title="1. 查询 ls 命令属于哪个 rpm 包"></a>1. 查询 ls 命令属于哪个 rpm 包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf &#x2F;bin&#x2F;ls</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">##### 2. 造成 ls 命令误删除假象</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>mv /bin/ls /tmp/</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 3. 提取 rpm 包中 ls 命令到当前目录的 &#x2F;bin&#x2F;ls</span><br><span class="line"> 下</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 4. 把 ls 命令复制到 &#x2F;bin&#x2F; 目录，修复文件丢失</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>cp /root/bin/ls /bin/</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2. yum 在线安装</span><br><span class="line"></span><br><span class="line">网络下载</span><br><span class="line"></span><br><span class="line">rpm 包的安装过程中，依赖性太强，使用难度较大。</span><br><span class="line"></span><br><span class="line">yum 好处：将所有软件包放到官方服务器上，当进行 yum 在线安装时，可以自动解决依赖性问题。</span><br><span class="line"></span><br><span class="line">Redhat 的 yum 在线安装需要付费，CentOS 的 yum 免费</span><br><span class="line"></span><br><span class="line">#### 1. yum 源文件</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;yum&#x2F;repos.d&#x2F;CentOS-Base.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[base]<br>name=CentOS-$releasever - Base - mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=<a href="http://mirrors.aliyun.com/centos/$releasever/os/$basearch/">http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</a><br>        <a href="http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/">http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/</a><br>#mirrorlist=<a href="http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os">http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</a><br>gpgcheck=1<br>gpgkey=<a href="http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](http:&#x2F;&#x2F;omp48p40q.bkt.clouddn.com&#x2F;18-2-18&#x2F;43605225.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2. yum 命令</span><br><span class="line"></span><br><span class="line">##### 1. 查询</span><br><span class="line"></span><br><span class="line">查询所有可用软件包列表</span><br></pre></td></tr></table></figure>
<p>yum list</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">搜索服务器上所有和关键字相关的包</span><br></pre></td></tr></table></figure>
<p>yum search 关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">##### 2. 安装</span><br><span class="line"></span><br><span class="line">yum 安装不需要写包全名</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>yum -y install 包名<br>yum -y install gcc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- install：安装</span><br><span class="line">- y：自动回答 yes</span><br><span class="line"></span><br><span class="line">##### 3. 升级</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>yum -y update 包名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;b style&#x3D;&#39;color:red&#39;&gt;稳定和安全为主，没必要尽量不要升级&lt;&#x2F;b&gt;</span><br><span class="line"></span><br><span class="line">##### 4. 卸载</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>yum -y remove 包名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">卸载也是要卸载各种依赖，很容易造成系统崩溃</span><br><span class="line"></span><br><span class="line">&lt;b style&#x3D;&#39;color:red&#39;&gt;服务器使用最小化安装，用什么软件安装什么，尽量不卸载&lt;&#x2F;b&gt;</span><br><span class="line"></span><br><span class="line">#### yum 软件组管理命令</span><br><span class="line"></span><br><span class="line">列出所有可用的软件组列表</span><br></pre></td></tr></table></figure>
<p>yum grouplist</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装指定软件组，组名可以由 grouplist 查询处理</span><br></pre></td></tr></table></figure>
<p>yum groupinstall 软件组名（必须英文）<br>yum groupinstall “Chinese Support”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">卸载指定软件组</span><br></pre></td></tr></table></figure>
<p>yum groupremove 软件组名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">### 3. 源码包和 rpm 包的区别</span><br><span class="line"></span><br><span class="line">- 安装之前的区别：概念上的区别</span><br><span class="line">- 安装之后的区别：安装位置不同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rpm 包安装在默认位置（包作者所指定的位置），可以指定安装位置，但是强烈不建议这么做。</span><br><span class="line"></span><br><span class="line">#### 1. 安装位置不同带来的影响</span><br><span class="line"></span><br><span class="line">rpm 包安装的服务可以使用系统服务管理命令（service）管理，例如 rpm 包安装的 Apache 的启动方法是</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>/etc/rc.d/init.d/httpd start # linux 标准启动方法<br>service httpd start</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;b style&#x3D;&quot;color:red&quot;&gt;service 搜索的目录实际上就是 &#96;&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;&#96; 目录&lt;&#x2F;b&gt;</span><br><span class="line"></span><br><span class="line">源码包安装必须指定安装位置，一般是 &#96;&#x2F;usr&#x2F;local&#x2F;软件名&#x2F;&#96;，相当于 Windows 下的 &#96;C:\Programs&#96;，因为源码包没有卸载命令，直接删除安装目录就是卸载。</span><br><span class="line"></span><br><span class="line">源码包安装的服务不能被服务管理命令管理，因为没有安卓到默认路径中。所以只能用绝对路径进行服务的管理，如：</span><br></pre></td></tr></table></figure>
<p>/usr/local/apache2/bin/apachectl start</p>
<pre><code>### 4. 源码包安装软件

#### 1. 安装准备：

- 安装 C 语言编译器 `rpm -qa | grep gcc`
- 下载源码包，一般都是由官方网站提供


&lt;b style=&quot;color:red&quot;&gt;原则：给大量用户提供服务的软件，建议使用源码包安装，因为源码包效率更高

不太影响效率的软件，可以使用 rpm 包安装&lt;/b&gt;

#### 2. 安装注意事项

- 源代码保存位置：`/usr/local/src`
- 软件安装位置：`/usr/local/`
- 如何确定安装过程报错
  - 安装过程停止
  - 并且最后几行出现 error、warning 或 no 的提示

#### 3. 安装过程
1. 下载源码包
2. 解压安装包
3. 进入到解压缩目录
4. `./configure` 软件配置与检查
  - 定义需要的功能选项；
  - 监测系统环境是否符合安装要求；
  - 把定义好的功能选项和检测系统环境的信息都写到 Makefile 文件，用于后续的编辑。

5.  `make` 编译，如果有报错，使用 `make clean` 清除缓存文件
6. `make install` 编译安装

### 5. 脚本安装软件

所谓的一键安装包，实际上还是安装的源码包和 rpm 包，只是把安装过程写成了脚本，便于初学者安装

优点：简单、快速、方便

缺点：
- 不能定义安装软件的版本
- 不能定义所需要的软件功能
- 源码包的优势（自定义、安装位置、依赖等）丧失




</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法、逻辑思维2]]></title>
      <url>/2018/02/17/%E7%AE%97%E6%B3%95%E3%80%81%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B42/</url>
      <content type="html"><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><blockquote>
<p>真题：1，1，2，3，5，8，13，21，34… 求第 30 位的数是多少，请用伪代码描述其实现方法</p>
</blockquote>
<p>考点：逻辑思维能力</p>
<p>解题方法：找到要处理的数组或者字符串的规律，也可以是一个数列的规律，如果要求使用伪代码实现，建议先说明规律，然后白话说明解题步骤即可。</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">2</span>; $i &lt; <span class="number">30</span>; ++$i) &#123;</span><br><span class="line">	$arr[$i] = $arr[$i - <span class="number">1</span>] + $arr[$i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>真题：请写一个函数，实现以下功能：字符串 “open_door” 转换成 “OpenDoor”，”make_by_id” 转换成 “MakeById”</p>
</blockquote>
<p>分割–首字母大写–合并</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strConvert</span>(<span class="params">$str</span>) </span>&#123;</span><br><span class="line">	$returnData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	$arr = explode(<span class="string">&#x27;_&#x27;</span>, $str);</span><br><span class="line">	<span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">		$returnData .= ucfirst($value);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模拟内置函数"><a href="#模拟内置函数" class="headerlink" title="模拟内置函数"></a>模拟内置函数</h3><p>真题：不使用 PHP 函数，用方法写一个反转字符串的方法</p>
<p>考点：逻辑思维能力；对 PHP 内置函数的熟悉程度；<b style='color:red'>字符串和数组</b>的处理能力</p>
<p><b style='color:red'>把字符串直接当成数组来处理</b></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strReverse</span>(<span class="params">$str</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 自己实现字符串长度的统计，不能使用 strlen()</span></span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">0</span>; <span class="literal">true</span>; ++$i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">isset</span>($str[$i])) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">	$returnData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> ($j = $i - <span class="number">1</span>; $j &gt;= <span class="number">0</span>; --$j) &#123;</span><br><span class="line">		$returnData .= $str[$j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>真题：写一个函数，要求不使用 array_merge 完成多个数组的合并</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrMerge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	returnData = [];</span><br><span class="line">	$arrays = func_get_args();</span><br><span class="line">	<span class="keyword">foreach</span> ($arrays <span class="keyword">as</span> $arr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (is_array($arr)) &#123;</span><br><span class="line">			<span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">				$returnData[] = $value;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法、逻辑思维]]></title>
      <url>/2018/02/17/%E7%AE%97%E6%B3%95%E3%80%81%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>真题：请简单描述一下数据结构的特征（stack、heap、list、doubly-linked-list、queue、array(vector)）</p>
</blockquote>
<p>考点: 常见数据结构特征</p>
<a id="more"></a>

<h4 id="1-Array-数组"><a href="#1-Array-数组" class="headerlink" title="1. Array 数组"></a>1. Array 数组</h4><p>数组，最简单而且应用最广泛的数据结构之一</p>
<p>特性：<b style='color:red'>使用连续的内存来存储，数组中的所有元素必须是相同的类型或类型的衍生（同质数据结构）</b>，元素可以通过下标直接访问</p>
<h4 id="2-LinkedList-链表"><a href="#2-LinkedList-链表" class="headerlink" title="2. LinkedList 链表"></a>2. LinkedList 链表</h4><p>线性表的一种，最基本、最简单、也是最常用的数据结构</p>
<p>特性：元素之间的关系是一对一的关系（除了第一个和最后一个元素，其他元素都是首尾相接），有顺序存储结构和链式存储结构两种存储方式</p>
<h4 id="3-Stack-栈"><a href="#3-Stack-栈" class="headerlink" title="3.Stack 栈"></a>3.Stack 栈</h4><p>和队列相似，一个带有数据存储特性的数据结构</p>
<p>特性：存储数据是先进后出，栈只有一个出口，只能从栈顶部增加和移除元素</p>
<h4 id="4-Heap-堆"><a href="#4-Heap-堆" class="headerlink" title="4. Heap 堆"></a>4. Heap 堆</h4><p>一般情况下，堆叫二叉堆，近似完全二叉树的数据结构</p>
<p>特性：子节点的键值或者索引总是小于它的父节点，每个节点的左右子树又是一个二叉堆，根节点最大的堆叫最大堆或者大根堆，最小的叫最小堆或者小根堆</p>
<h4 id="5-list-线性表"><a href="#5-list-线性表" class="headerlink" title="5. list 线性表"></a>5. list 线性表</h4><p>由零个或多个数据元素组成的有限序列</p>
<p>特性：线性表是一个序列，0 个元素够成的线性表是空表，第一个元素无先驱，最后一个元素无后继，其他元素都只有一个先驱和后继，有长度，长度是元素个数，长度有限</p>
<h4 id="6-doubly-linked-list-双向链表"><a href="#6-doubly-linked-list-双向链表" class="headerlink" title="6. doubly-linked-list 双向链表"></a>6. doubly-linked-list 双向链表</h4><p>特性：每个元素都是一个对象，每个对象有一个关键字 key 和两个指针（next 和 prev）</p>
<h4 id="7-queue-队列"><a href="#7-queue-队列" class="headerlink" title="7. queue 队列"></a>7. queue 队列</h4><p>特性：先进先出（FIFO），并发中使用，可以安全地将对象从一个任务传给另一个任务</p>
<h4 id="8-set-集合"><a href="#8-set-集合" class="headerlink" title="8. set 集合"></a>8. set 集合</h4><p>特性：保存不重复的元素</p>
<h4 id="9-map-字典"><a href="#9-map-字典" class="headerlink" title="9. map 字典"></a>9. map 字典</h4><p>特性：关联数组，也被叫做字典或者键值对</p>
<h4 id="10-graph-图"><a href="#10-graph-图" class="headerlink" title="10. graph 图"></a>10. graph 图</h4><p>特性：通常使用邻接矩阵和邻接表表示，前者易实现但是对于稀疏矩阵会浪费较多空间，后者使用链表的方式存储信息但是对于图搜索时间复杂度较高</p>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>先理解每种数据结构的特征，有时会遇到让用 PHP 代码实现其中的数据结构，遇到此类题目，先要理解该种数据结构的特性是什么，然后再实现，通常可以使用 PHP 的数组来模拟。</p>
<p>真题：用 PHP 实现一个双向队列</p>
<p>队列是一种线性表，按照先进先出的原则进行</p>
<ul>
<li>单向队列：只能从头进，从尾出</li>
<li>双向队列：头尾都可以进出</li>
</ul>
<p>PHP 有四个数组方法可以实现</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $queue = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部入对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [type] $value [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addLast</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;queue, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部出队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeLast</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_pop(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部入队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [type] $value [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFirst</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_unshift(<span class="keyword">$this</span>-&gt;queue, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部出队</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFirst</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_shift(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeEmpty</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirst</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reset(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列尾</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLast</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count(<span class="keyword">$this</span>-&gt;queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>






]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见算法]]></title>
      <url>/2018/02/16/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>写出常见的排序算法，并用 PHP 实现冒泡排序，将数组按照从小到大的方式进行排序</p>
</blockquote>
<a id="more"></a>

<p>考点：</p>
<ul>
<li>冒泡排序的原理和实现</li>
<li>延伸：算法的概念</li>
<li>延伸：时间复杂度和空间复杂度的概念</li>
<li>延伸：常见排序算法</li>
<li>延伸：常见查找算法</li>
</ul>
<h3 id="1-算法概念"><a href="#1-算法概念" class="headerlink" title="1. 算法概念"></a>1. 算法概念</h3><p>解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作</p>
<p>一个问题可以有多种算法，每种算法都有不同的效率</p>
<p>一个算法具有 5 个特性：有穷性（算法能计算完，不能是死循环）、确切性（每一步都要有意义）、输入项、输出项、可行性（可以执行，每一步都是正确的）。</p>
<h3 id="2-算法评定"><a href="#2-算法评定" class="headerlink" title="2. 算法评定"></a>2. 算法评定</h3><p>算法分析的目的在于选择合适的算法和改进算法</p>
<p>一个算法的评价主要是从时间复杂度和空间复杂度来考虑</p>
<h4 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h4><p>执行算法所需要的计算工作量，也就是时间消耗的效率。一般来说，计算机算法是问题规模 $$n$$ 的函数 $$f(n)$$，算法的时间复杂度也一次记作 $$T(n)=O(f(n))$$</p>
<p>问题的规模 $$n$$ 越大，算法执行的时间的增长率与 $$f(n)$$ 的增长率正相关，称作渐进时间复杂度。</p>
<h5 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h5><ol>
<li>得出算法的计算次数公式</li>
<li>用常数 $$1$$ 来取代所有时间中的所有加法常数，如 $$O(3)$$ 要写成 $$O(1)$$</li>
<li>在修改后的运行次数函数中，只保留最高阶项，如 $$O(n^2+n+1)$$ 要写成 $$O(n^2)$$</li>
<li>如果最高阶存在且不是1，则去除与这个项相乘的常数，如 $$O(3n)$$ 要写成 $$O(n)$$</li>
</ol>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ol>
<li><p>常数阶：$$O(1)$$</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">echo</span> $n;</span><br><span class="line"><span class="keyword">echo</span> $n;</span><br><span class="line"><span class="keyword">echo</span> $n;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线性阶：$$O(n)$$</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n = <span class="number">100</span>;</span><br><span class="line">$sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; ++$i) &#123;</span><br><span class="line">	$sum += $n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure>
</li>
<li><p>平（立）方阶：$$O(n^2)/O(n^3)$$</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n = <span class="number">100</span>;</span><br><span class="line">$sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; ++$i) &#123;</span><br><span class="line">	<span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; $n; ++$j) &#123;</span><br><span class="line">		$sum += $j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $sum;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对数阶：$$O(log_2n)$$</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$n = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">while</span> ($n &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">	$n = $n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效率对比<br>$$$<br>O(1) &gt; O(log_2n) &gt; O(n) &gt; O(nlog_2n) &gt; O(n^2) &gt; O(n^3) &gt; O(2^n) &gt; O(n!) &gt; O(n^n)<br>$$$</p>
<p>最坏情况，如果没有特别说明，时间复杂度就是指最坏情况下的时间复杂度</p>
<h4 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2. 空间复杂度"></a>2. 空间复杂度</h4><p>算法需要消耗的内存空间，记作 $$S(n)=O(f(n))$$</p>
<p>包括程序代码所占用的空间，输入数据所占用的空间和辅助变量所占用的空间三部分</p>
<p>计算和表示方法与时间复杂度类似，一般用复杂度的渐进性来表示</p>
<p>有时用空间换取时间</p>
<p>冒泡排序的元素交换，空间复杂度$$O(1)$$</p>
<p>排序算法：冒泡排序、直接插入排序、希尔排序、选择排序、快速排序、堆排序、归并排序</p>
<h3 id="3-排序算法"><a href="#3-排序算法" class="headerlink" title="3. 排序算法"></a>3. 排序算法</h3><h4 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h4><p>原理：两两相邻的数进行比较，如果反序就交换，否则不交换</p>
<p>时间复杂度：最坏 $$O(n^2)$$，平均 $$O(n^2)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<p>对于一个长度为 N 的数组，我们需要排序 N-1 轮，每 i 轮 要比较 N-i 次。对此我们可以用双重循环语句，外层循环控制循环轮次，内层循环控制每轮的比较次数。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">$arr</span>) </span>&#123;</span><br><span class="line">  　　$count = count($arr);</span><br><span class="line">  　　$temp = <span class="number">0</span>; </span><br><span class="line"> 　　 <span class="comment">// 外层控制排序轮次</span></span><br><span class="line">  　　<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $count - <span class="number">1</span>; $i++) &#123;</span><br><span class="line">      　　<span class="comment">// 内层控制每轮比较次数</span></span><br><span class="line">      　　<span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; $count - <span class="number">1</span>- $i; $j++)&#123;</span><br><span class="line">            　　<span class="keyword">if</span> ($arr[$j] &gt; $arr[$j + <span class="number">1</span>]) &#123;</span><br><span class="line">                　　$temp = $arr[$j];</span><br><span class="line">                　　$arr[$j] = $arr[$j + <span class="number">1</span>];</span><br><span class="line">                　　$arr[$j + <span class="number">1</span>] = $temp;</span><br><span class="line">           　　&#125;</span><br><span class="line">     　　 &#125;</span><br><span class="line">  　　&#125; </span><br><span class="line">    <span class="keyword">return</span> $arr;</span><br><span class="line">   &#125;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> $arr= <span class="keyword">array</span>(<span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">$res =  order($arr);</span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure>

<h4 id="2-直接插入排序"><a href="#2-直接插入排序" class="headerlink" title="2. 直接插入排序"></a>2. 直接插入排序</h4><p>原理：每次从无序表中取出第一个元素，把它出入到有序表的合适位置，使有序表仍然有序</p>
<p>时间复杂度：最坏 $$O(n^2)$$，平均 $$O(n^2)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<h4 id="3-希尔排序（shell-sort）"><a href="#3-希尔排序（shell-sort）" class="headerlink" title="3. 希尔排序（shell sort）"></a>3. 希尔排序（shell sort）</h4><p>希尔排序是基于插入排序的，区别在于插入排序是相邻的一个个比较（类似于希尔中 h=1 的情形），而希尔排序是距离 h 的比较和替换。</p>
<p>希尔排序中一个常数因子 n，原数组被分成各个小组，每个小组由 h 个元素组成，很可能会有多余的元素。当然每次循环的时候，h 也是递减的（h=h/n）。第一次循环就是从下标为 h 开始。希尔排序的一个思想就是，分成小组去排序。</p>
<p>时间复杂度：最坏 $$O(n^2)$$，平均 $$O(n*log_2n)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<h4 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h4><p>原理：每次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完</p>
<p>时间复杂度：最坏 $$O(n^2)$$，平均 $$O(n^2)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<h4 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h4><p>原理：找到当前数组中的任意一个元素（一般选择第一个元素），作为标准，新建两个空数组，遍历整个数组元素，<br>如果遍历到的元素比当前的元素要小，那么就放到左边的数组，否则放到右面的数组，然后再对新数组进行同样的操作，<br>不难发现，这里符合递归的原理，所以我们可以用递归来实现。<br>使用递归，则需要找到递归点和递归出口：<br>递归点：如果数组的元素大于 1，就需要再进行分解，所以我们的递归点就是新构造的数组元素个数大于 1<br>递归出口：我们什么时候不需要再对新数组不进行排序了呢？就是当数组元素个数变成 1 的时候，所以这就是我们的出口。</p>
<p>时间复杂度：最坏 $$O(n^2)$$，平均 $$O(nlog_2n)$$</p>
<p>空间复杂度：最坏 $$O(n)$$，平均 $$O(log_2n)$$</p>
<h4 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6 .堆排序"></a>6 .堆排序</h4><p>二叉树。。。</p>
<p>时间复杂度：最坏 $$O(nlog_2n)$$，平均 $$O(nlog_2n)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<h4 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7. 归并排序"></a>7. 归并排序</h4><p>就是利用归并（合并）的思想实现的排序方法。它的原理是假设初始序列含有 n 个元素，则可以看成是 n 个有序的子序列，每个子序列的长度为 1，然后两两归并，得到 ⌈ n / 2⌉ （⌈ x ⌉ 表示不小于 x 的最小整数）个长度为 2 或 1 的有序序列；再两两归并，······，如此重复，直至得到一个长度为 n 的有序序列为止，这种排序方法就成为 2 路归并排序。</p>
<p>时间复杂度：最坏 $$O(nlog_2n)$$，平均 $$O(nlog_2n)$$</p>
<p>空间复杂度：$$O(n)$$</p>
<h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h4><p>快速排序、归并排序的理想时间复杂度都是 $$O(nlog_2n)$$，但是快速排序的时间复杂度并不稳定，最坏情况下复杂度为 $$O(n^2)$$，所以最理想的算法还是归并排序。</p>
<h3 id="4-查找方法"><a href="#4-查找方法" class="headerlink" title="4. 查找方法"></a>4. 查找方法</h3><h4 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1. 二分查找"></a>1. 二分查找</h4><p>原理：从数组的中间元素开始，如果中间元素正好是要查找的元素，搜索结束，如果某一个特定的元素大于有这小鱼中间元素，则在数组大于或者小于中间元素的那一半中查找，而且跟开始一样从中间开始比较，如果某一步骤数组为空，表示找不到。</p>
<p>时间复杂度：最坏 $$O(log_2n)$$，平均 $$O(log_2n)$$</p>
<p>空间复杂度：迭代 $$O(1)$$，递归 $$O(log_2n)$$</p>
<h4 id="2-顺序查找"><a href="#2-顺序查找" class="headerlink" title="2. 顺序查找"></a>2. 顺序查找</h4><p>原理：按一定的顺序检查数组中的每一个元素，直到找到所要寻找的特定值为止。</p>
<p>时间复杂度：最差 $$O(n)$$，平均 $$O(n)$$</p>
<p>空间复杂度：$$O(1)$$</p>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>二分查找算法的时间复杂度最差是 $$O(log_2n)$$，顺序查找的时间复杂度最差为 $$O(n)$$，所以二分查找更快，但是递归条件下，二分查找更消耗内存。</p>
<h3 id="5-解题方法"><a href="#5-解题方法" class="headerlink" title="5. 解题方法"></a>5. 解题方法</h3><p>需要充分理解各种排序算法和查找算法的原理以及实现方式，另外还需要理解时间复杂度和空间复杂度的计算方式和概念，考察的是逻辑思维能力，需要仔细研究各种算法的实现方式。</p>
<h3 id="6-真题"><a href="#6-真题" class="headerlink" title="6. 真题"></a>6. 真题</h3><h4 id="1-简述时间复杂度和空间复杂度的概念"><a href="#1-简述时间复杂度和空间复杂度的概念" class="headerlink" title="1. 简述时间复杂度和空间复杂度的概念"></a>1. 简述时间复杂度和空间复杂度的概念</h4><h4 id="2-对无序数组排序，最优的时间复杂度是什么，用-PHP-或者-JavaScript-写出一个实际的例子，该算法的空间复杂度是多少？"><a href="#2-对无序数组排序，最优的时间复杂度是什么，用-PHP-或者-JavaScript-写出一个实际的例子，该算法的空间复杂度是多少？" class="headerlink" title="2. 对无序数组排序，最优的时间复杂度是什么，用 PHP 或者 JavaScript 写出一个实际的例子，该算法的空间复杂度是多少？"></a>2. 对无序数组排序，最优的时间复杂度是什么，用 PHP 或者 JavaScript 写出一个实际的例子，该算法的空间复杂度是多少？</h4><p>快速或归并</p>
<h4 id="3-一个有序数组中，查询特定-item-是否存在的最优算法是什么？时间复杂度多少？"><a href="#3-一个有序数组中，查询特定-item-是否存在的最优算法是什么？时间复杂度多少？" class="headerlink" title="3. 一个有序数组中，查询特定 item 是否存在的最优算法是什么？时间复杂度多少？"></a>3. 一个有序数组中，查询特定 item 是否存在的最优算法是什么？时间复杂度多少？</h4>]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MVC 框架工作原理]]></title>
      <url>/2018/02/16/MVC-%E6%A1%86%E6%9E%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="1-真题：谈谈你对-MVC-的认识，介绍几种目前比较流行的-MVC-框架"><a href="#1-真题：谈谈你对-MVC-的认识，介绍几种目前比较流行的-MVC-框架" class="headerlink" title="1. 真题：谈谈你对 MVC 的认识，介绍几种目前比较流行的 MVC 框架"></a>1. 真题：谈谈你对 MVC 的认识，介绍几种目前比较流行的 MVC 框架</h3><p>考点：</p>
<ul>
<li>MVC 工作原理</li>
<li>常见 MVC 框架</li>
<li>单一入口的理解</li>
<li>模板引擎的理解</li>
</ul>
<a id="more"></a>

<h4 id="1-MVC-工作原理"><a href="#1-MVC-工作原理" class="headerlink" title="1. MVC 工作原理"></a>1. MVC 工作原理</h4><ul>
<li>M: Model，数据模型层，通过对数据进行一些加工和处理，数据相关的操作基本都在 Model 层里操作。</li>
<li>V: View，视图层，跟用户进行交互的页面都在 View 层处理。</li>
<li>C: Controller，业务处理层，处理业务逻辑。</li>
</ul>
<p><img src="http://omp48p40q.bkt.clouddn.com/18-2-16/56348745.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/18-2-16/78897666.jpg"></p>
<h4 id="2-常见MVC-框架"><a href="#2-常见MVC-框架" class="headerlink" title="2. 常见MVC 框架"></a>2. 常见MVC 框架</h4><p>ThinkPHP、Yii2、CI、Laravel、Symfony、Yaf</p>
<h4 id="3-单一入口的工作原理"><a href="#3-单一入口的工作原理" class="headerlink" title="3. 单一入口的工作原理"></a>3. 单一入口的工作原理</h4><p>用一个处理程序文件处理所有的 HTTP 请求，根据请求时的参数的不同区分不同模块和操作的请求</p>
<p>优势：</p>
<ul>
<li>可以进行统一的安全性检查</li>
<li>集中处理程序</li>
</ul>
<p>劣势：</p>
<ul>
<li>URL 不美观，可通过 URL 重写机制修改</li>
<li>处理效率稍低</li>
</ul>
<h4 id="4-模板引擎"><a href="#4-模板引擎" class="headerlink" title="4. 模板引擎"></a>4. 模板引擎</h4><p>PHP 是一种 HTML 内嵌式的在服务端执行的脚本语言，但是 PHP 有很多可以使 PHP 代码和 HTML 代码分开的模板引擎，如 <b style='color:red;'>Smarty</b>、Twig、Haml、Liquid、blade 等。</p>
<p>工作原理：<b style="color:red;">模板引擎就是庞大的完善的正则表达式替换库</b></p>
<p>真题：框架中什么是单一入口和多入口，单一入口的优缺点</p>
<h3 id="2-PHP-框架有哪些，用过哪些？各自的优缺点是什么？"><a href="#2-PHP-框架有哪些，用过哪些？各自的优缺点是什么？" class="headerlink" title="2. PHP 框架有哪些，用过哪些？各自的优缺点是什么？"></a>2. PHP 框架有哪些，用过哪些？各自的优缺点是什么？</h3><p>考点：PHP 框架的差异和优缺点</p>
<h4 id="1-Yaf"><a href="#1-Yaf" class="headerlink" title="1. Yaf"></a>1. Yaf</h4><p>使用 PHP 扩展的形式写的一个 PHP 框架，也就是以 C 语言为底层编写的，性能上要比 PHP 代码写的框架要快一个数量级。</p>
<ul>
<li>优点：执行效率高、轻量级框架、可扩展性强</li>
<li>缺点：高版本兼容性差、底层代码可读性差、需要安装扩展、功能单一、开发需要编写大量插件，影响开发效率</li>
</ul>
<h4 id="2-Yii2"><a href="#2-Yii2" class="headerlink" title="2.Yii2"></a>2.Yii2</h4><p>是一款非常优秀的通用 web 后端框架，结构简单优雅、实用功能丰富、扩展性强、性能高是它最突出的优点。</p>
<ul>
<li>缺点：功能多，学习成本较高；相比 Yaf，量级较重</li>
</ul>
<h4 id="3-常见框架特性"><a href="#3-常见框架特性" class="headerlink" title="3. 常见框架特性"></a>3. 常见框架特性</h4><p>根据自己的框架实用经验，理解所使用框架的特性。例如，YII2 框架的路由配置等。</p>
<p>此类题目，说明的最好是自己真正用过的框架，最好结合自己的简历，简历当中提高的框架，要着重准备，可以说说在开发过程中使用该框架最让你印象深刻的功能和特性，最好多进行框架间的对比，展现你对 PHP 框架的理解，侧面说明你的开发经验。</p>
<h4 id="4-真题：Yii2-框架如何实现数据的自动验证？"><a href="#4-真题：Yii2-框架如何实现数据的自动验证？" class="headerlink" title="4. 真题：Yii2 框架如何实现数据的自动验证？"></a>4. 真题：Yii2 框架如何实现数据的自动验证？</h4><p>在 Model 中编写一个 rules 规则，在 rules 里面写验证规则，数据接收以后调用 validate 方法进行验证，验证成功后才可以进行数据的 curd 操作。</p>
]]></content>
      
        
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序功能设计]]></title>
      <url>/2018/02/16/%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>真题：编写一个在线留言本，实现用户的在线留言功能，留言信息存储到数据库，要求设计数据表内容以及使用 PHP 编码完成。</p>
</blockquote>
<p>考点：</p>
<ul>
<li>数据表设计</li>
<li>数据表创建语句</li>
<li>PHP 连接数据库的方式</li>
<li>编码能力</li>
</ul>
<a id="more"></a>

<h4 id="1-分析数据表结构"><a href="#1-分析数据表结构" class="headerlink" title="1. 分析数据表结构"></a>1. 分析数据表结构</h4><p>留言本有哪些信息需要存储</p>
<p>留言信息： ID，留言标题，留言内容，留言时间，留言人</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE message (</span><br><span class="line">&#96;id&#96; INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">&#96;title&#96; VARCHAR(120) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">&#96;content&#96; VARCHAR(255) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">&#96;created_at&#96; INT NOT NULL DEFAULT 0,</span><br><span class="line">&#96;user_name&#96; VARCHAR(32) NOT NULL DEFAULT &#39;&#39;</span><br><span class="line">KEY message_user_name(user_name)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<h4 id="2-PHP-连接数据库的方式"><a href="#2-PHP-连接数据库的方式" class="headerlink" title="2. PHP 连接数据库的方式"></a>2. PHP 连接数据库的方式</h4><ul>
<li>PDO：可扩展性更好、支持预处理、面向对象。建议使用，扩展性好，之后切换其他数据库方便，方法完善</li>
<li>MySQLi：只支持 MySQL 操作、支持预处理、面向对象和过程、效率更高</li>
<li>mysql：只支持 MySQL 数据库，没有预处理的支持、面向过程</li>
</ul>
<p>PDO 的基本操作</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">// 操作数据库的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作数据库的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO($dsn, $username, $password, $attr);</span><br><span class="line">$sql = <span class="string">&#x27;SELECT id, title, content FROM message where user_name=:user_name&#x27;</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute([<span class="string">&#x27;:user_name&#x27;</span> =&gt; $user_name]);</span><br><span class="line">$result = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);</span><br></pre></td></tr></table></figure>

<h4 id="3-解题方法"><a href="#3-解题方法" class="headerlink" title="3. 解题方法"></a>3. 解题方法</h4><p>根据考题给出的功能，先分析应该存储哪些信息，设计好数据表，这一步很关键，如果编码时才发现设计有问题，会浪费大量的时间，基本没有时间改，所以要先设计好，然后根据设计好的数据表创建数据表语句，通常建议使用 PDO 来连接 MySQL，最终完成编码，所以一定要熟悉 PDO 的操作。</p>
<p>示例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	$dsn = <span class="string">&#x27;mysql:dbname=test;host=localhost&#x27;</span>;</span><br><span class="line">	$username = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">	$password = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">	$attr = [</span><br><span class="line">		PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION</span><br><span class="line">	];</span><br><span class="line">	$pdo = <span class="keyword">new</span> PDO($dsn, $username, $password, $attr);</span><br><span class="line">	$sql = <span class="string">&#x27;insert into message(title, content, created_at, user_name) values(:title, :content. :created_at, :user_name)&#x27;</span>;</span><br><span class="line">	$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">	$data = [</span><br><span class="line">		<span class="string">&#x27;:title&#x27;</span> =&gt; $title,</span><br><span class="line">		<span class="string">&#x27;:content&#x27;</span> =&gt; $content,</span><br><span class="line">		<span class="string">&#x27;:created_at&#x27;</span> =&gt; time(),</span><br><span class="line">		<span class="string">&#x27;user_name&#x27;</span> =&gt; $user_name</span><br><span class="line">	];</span><br><span class="line">	$stmt-&gt;execute($data);</span><br><span class="line">	$rows = $stmt-&gt;rowCount();</span><br><span class="line">	<span class="keyword">if</span> ($rows) &#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;执行成功&#x27;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;执行失败&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-真题：设计一个无限分类表"><a href="#4-真题：设计一个无限分类表" class="headerlink" title="4. 真题：设计一个无限分类表"></a>4. 真题：设计一个无限分类表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE message (</span><br><span class="line">&#96;id&#96; INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">&#96;title&#96; VARCHAR(120) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">&#96;pid&#96; INT NOT NULL DEFAULT 0,</span><br><span class="line">&#96;path&#96; VARCHAR NOT NULL DEFAULT &#39;&#39;</span><br><span class="line">KEY message_user_name(user_name)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<p><img src="http://omp48p40q.bkt.clouddn.com/18-2-16/13030217.jpg"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 11 web 服务器的负载均衡，请求分发]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-11-web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%88%86%E5%8F%91/</url>
      <content type="html"><![CDATA[<h3 id="1-web-服务器的负载均衡，请求分发"><a href="#1-web-服务器的负载均衡，请求分发" class="headerlink" title="1. web 服务器的负载均衡，请求分发"></a>1. web 服务器的负载均衡，请求分发</h3><h4 id="1-1-七层负载均衡的实现"><a href="#1-1-七层负载均衡的实现" class="headerlink" title="1.  #### 1. 七层负载均衡的实现"></a>1.  #### 1. 七层负载均衡的实现</h4><p>基于 url 等应用层信息的负载均衡</p>
<p>nginx 的 proxy 是它一个很强大的功能，实现了七层负载均衡</p>
<a id="more"></a>

<ul>
<li>功能强大、性能卓越、运行稳定</li>
<li>配置简单灵活 upstream</li>
<li>能够自动剔除工作不正常的后端服务器</li>
<li>上传文件使用异步模式</li>
<li>支持多种分配策略，可以分配权重，分配方式灵活</li>
</ul>
<blockquote>
<p>nginx 负载均衡</p>
</blockquote>
<ol>
<li>内置策略: IP hash、加权轮询</li>
</ol>
<ul>
<li>加权轮询策略：首先将请求都分给高权重的机器，直到该机器的权值降到了比其他机器低，才开始将请求分给下一个高权重的机器。<br>当所有后端机器都 down 掉时，nginx 会立即将所有机器的标志位清成初始状态，以避免造成所有的机器都处于 timeout 状态。</li>
<li>IP hash 策略：nginx 内置的另一个负载均衡的策略，流程和轮询很类似，只是其中的算法和具体的策略有些变化。IP hash 算法是一种变相的轮询算法</li>
</ul>
<ol start="2">
<li>扩展策略: fair 策略、通用 hash、一致性 hash</li>
</ol>
<ul>
<li>fair 策略：根据后端服务器的响应时间判断负载情况，从中选出负载最轻的机器进行分流，有点类似 CDN 的原理。</li>
<li>通用 hash、一致性 hash：通用 hash 比较简单，可以以 nginx 内置的变量为 key 进行 hash，一致性 hash 采用了 nginx 内置的一致性 hash 环，支持 memcache</li>
</ul>
<p>nginx 配置方案</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="comment"># cluster 为集群名称</span></span><br><span class="line">	<span class="attribute">upstream</span> cluster &#123;</span><br><span class="line">		<span class="attribute">server</span> srv1;</span><br><span class="line">		<span class="attribute">server</span> srv2;</span><br><span class="line">		<span class="attribute">server</span> srv3;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://cluster;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-四层负载均衡的实现"><a href="#2-四层负载均衡的实现" class="headerlink" title="2. 四层负载均衡的实现"></a>2. 四层负载均衡的实现</h4><p>通过报文中的模板地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器</p>
<p>lVS 实现服务器集群负载均衡有三种方式：NAT、DR 和 TUN</p>
<p>总结：大概思路，再细化</p>
<ul>
<li>流量优化：防盗链处理；</li>
<li>前端优化：浏览器缓存，数据压缩，CDN 加速，独立图片服务器；</li>
<li>服务端：动态语言静态化，动态语言并发处理；</li>
<li>数据层：数据缓存，MySQL 优化；</li>
<li>web 服务器负载均衡。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 10 MySQL 数据库层的优化]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-10-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h4 id="MySQL-数据库层优化"><a href="#MySQL-数据库层优化" class="headerlink" title="MySQL 数据库层优化"></a>MySQL 数据库层优化</h4><h5 id="1-数据表数据类型优化"><a href="#1-数据表数据类型优化" class="headerlink" title="1. 数据表数据类型优化"></a>1. 数据表数据类型优化</h5><ul>
<li>字段使用什么样的数据类型更合适</li>
<li>字段使用什么样的数据类型性能更快</li>
</ul>
<a id="more"></a>

<p>按需选择，如年龄选择 tinyint 无符号即可；smallint 古建筑、古树年龄等；bigint 存储大数据。考虑空间的问题，考虑范围的问题。</p>
<p>char，varchar，手机号码固定 11 位，md5 字符串固定 32 位，宜用 char 类型；用户名等不固定长度的应使用</p>
<p>varchar，需要考虑存储字符串长度是否固定。</p>
<p>enum：特定、固定的分类可以使用 enum 存储，效率更快，扩展性较差。但实际情况中一般不用<br>ip 地址的存储，一般用字符串存储，但占用空间较大，用整型存储比较合适。ip2long(), long2ip()</p>
<h5 id="2-索引优化"><a href="#2-索引优化" class="headerlink" title="2. 索引优化"></a>2. 索引优化</h5><ul>
<li>建立合适的索引</li>
<li>索引在什么场景下效率最高</li>
</ul>
<p>索引的创建原则：索引不是越多越好，在合适的字段上创建合适的索引。索引会提升查询操作速度，但是胡影响写入操作的效率，也会占用更多的磁盘空间。</p>
<ul>
<li>注意复合索引的最左前缀原则</li>
<li>注意 like 查询的 % 问题， % 在前，该字段的索引将失效</li>
<li>注意全表扫描优化</li>
<li>注意 or 条件索引使用情况，如果 or 前面的列有索引，or 后面的列没有索引，所以会失效。</li>
<li>注意字符串类型索引失效问题：如果字符串内存的是整型数据，查询时直接以整型的形式去查，索引会失效，查询时要加引号。</li>
</ul>
<h5 id="3-SQL-语句优化"><a href="#3-SQL-语句优化" class="headerlink" title="3. SQL 语句优化"></a>3. SQL 语句优化</h5><ul>
<li><p>优化查询过程中的数据访问</p>
<p>使用 limit， 尽量不用 *</p>
</li>
<li><p>优化长难句的查询语句</p>
<p>变复杂为简单</p>
<p>切分查询</p>
<p>分解关联查询</p>
</li>
<li><p>优化特定类型的查询语句</p>
<p>优化 count()</p>
<p>优化关联查询</p>
<p>优化子查询，尽量使用关联查询替代</p>
<p>优化 group by 和 distinct</p>
<p>优化 limit 和 union</p>
</li>
</ul>
<h5 id="4-存储引擎优化"><a href="#4-存储引擎优化" class="headerlink" title="4. 存储引擎优化"></a>4. 存储引擎优化</h5><p>尽量使用 InnoDB，支持事务，支持外键，使用独立表空间，使用行级锁</p>
<h5 id="5-数据表结构设计优化"><a href="#5-数据表结构设计优化" class="headerlink" title="5. 数据表结构设计优化"></a>5. 数据表结构设计优化</h5><blockquote>
<p>分区操作</p>
</blockquote>
<p>通过特定的策略对数据表进行物理拆分<br>对用户透明，用户无感知<br>partition by</p>
<blockquote>
<p>分库分表</p>
</blockquote>
<p>水平拆分<br>垂直拆分</p>
<h5 id="6-数据库服务器架构优化"><a href="#6-数据库服务器架构优化" class="headerlink" title="6. 数据库服务器架构优化"></a>6. 数据库服务器架构优化</h5><blockquote>
<p>主从复制</p>
</blockquote>
<blockquote>
<p>读写分离</p>
</blockquote>
<blockquote>
<p>双主热备</p>
</blockquote>
<blockquote>
<p>负载均衡</p>
</blockquote>
<p>通过 LVS 的三种基本模式实现负载均衡</p>
<p>mycat 数据库中间件实现负载均衡</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 9 数据层的优化]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-9-%E6%95%B0%E6%8D%AE%E5%B1%82%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="数据库缓存层优化"><a href="#数据库缓存层优化" class="headerlink" title="数据库缓存层优化"></a>数据库缓存层优化</h3><h4 id="1-什么是数据库缓存"><a href="#1-什么是数据库缓存" class="headerlink" title="1. 什么是数据库缓存"></a>1. 什么是数据库缓存</h4><p>MySQL 等一些常见的关系型数据库的数据都存储在磁盘当中，在高并发场景下，业务应用对 MySQL 产生的增删改查操作造成巨大的 I/O 开销和查询压力，这无疑对数据库和服务器都是一种巨大的压力，为了解决此类问题，缓存数据的概念应运而生。</p>
<a id="more"></a>

<p>优势：</p>
<ul>
<li>极大地解决数据库服务器的压力</li>
<li>提高应用数据的响应速度</li>
</ul>
<p>常见的缓存形式：<b style="color:red;">内存缓存（尽量使用）</b>、文件缓存</p>
<h4 id="2-为什么要使用数据库缓存"><a href="#2-为什么要使用数据库缓存" class="headerlink" title="2. 为什么要使用数据库缓存"></a>2. 为什么要使用数据库缓存</h4><p>缓存数据是为了让客户端很少甚至不访问数据库服务器进行数据的查询，高并发下，能最大程度地降低对数据库服务器的访问压力。</p>
<blockquote>
<p>流程</p>
</blockquote>
<p>用户请求 – 数据查询 – 连接数据库服务器并查询数据 – 将数据缓存起来（HTML、<b style='color:red'>内存</b>、json、序列化） – 显示给客户端</p>
<p>用户再次请求或新用户访问 – 数据查询 – 直接从缓存中获取数据 – 显示给客户端</p>
<p>缓存需要考虑的问题</p>
<ul>
<li>缓存方式的选择：尽量使用内存</li>
<li>缓存场景的选择：哪些数据适合使用缓存，如不经常修改的数据</li>
<li>缓存数据的实时性，不建议同步地修改</li>
<li>缓存数据的稳定性 </li>
</ul>
<h4 id="3-使用-MySQL-查询缓存"><a href="#3-使用-MySQL-查询缓存" class="headerlink" title="3. 使用 MySQL 查询缓存"></a>3. 使用 MySQL 查询缓存</h4><h5 id="1-启用-MySQL-查询缓存"><a href="#1-启用-MySQL-查询缓存" class="headerlink" title="1. 启用 MySQL 查询缓存"></a>1. 启用 MySQL 查询缓存</h5><p>可极大降低 CPU 使用率</p>
<blockquote>
<p>开启方法：</p>
</blockquote>
<p><code>query_cache_type</code>: 查询缓存类型，有 0，1，2 三个值。0 表示不使用查询缓存；1 表示始终使用查询缓存；2 表示按需使用查询缓存。</p>
<p><code>query_cache_type=1</code> 时，也可以在查询语句中关闭查询缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_NO_CACHE * FROM my_table WHERE condition;</span><br></pre></td></tr></table></figure>

<p><code>query_cache_type=2</code> 时，可按需使用查询缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_CACHE * FROM my_table WHERE condition;</span><br></pre></td></tr></table></figure>

<p>query_cache_size: 默认情况下，值为0，表示为查询缓存预留的内存为 0，则无法使用查询缓存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL query_cache_size &#x3D; 134217728; (128M)</span><br></pre></td></tr></table></figure>

<p>查询缓存可以看做是 SQL 文本和查询结果的映射，第二次查询的 SQL 和第一次查询的 SQL 完全相同（多一个空格都不行），则会使用缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS LIKE &#39;Qcache_hits&#39;; &#x2F;&#x2F; 查看命中次数</span><br></pre></td></tr></table></figure>

<p>表的结构或数据发送改变时，查询缓存中的数据不再有效（即时失效），如果数据表的写入或修改频率比较高，查询缓存就失去意义了。</p>
<blockquote>
<p>清理缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLUSH QUERY CACHE; &#x2F;&#x2F; 清理查询缓存内存碎片</span><br><span class="line">RESET QUERY CACHE; &#x2F;&#x2F; 从查询缓存中移除所有查询</span><br><span class="line">FLUSH TABLES; &#x2F;&#x2F; 关闭所有打开的表，同时该操作将会清空查询缓存中的内容</span><br></pre></td></tr></table></figure>

<h4 id="4-使用-memcache-缓存"><a href="#4-使用-memcache-缓存" class="headerlink" title="4. 使用 memcache 缓存"></a>4. 使用 memcache 缓存</h4><p>对于大型站点，如果没有中间缓存层，当流量打入数据库层时，即便之前的几层为我们挡住一部分流量，但是在大并发的情况下，还是会有大量请求涌入数据库层，这样对于数据库服务器的压力冲击很大，响应速度也会下降，因此添加中间缓存层很有必要。</p>
<p>memcache 是一套分布式的高速缓存系统，目前被许多网站使用以提升网站的访问速度，尤其对于一些大型的、需要频繁访问数据库的网站访问速度提升效果十分显著。</p>
<p>memcache 是一个高性能的分布式的内存对象缓存系统，通过在内存里维护一个统一的巨大的 hash 表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单说就是将数据调用到内存，然后从内存中读取，从而大大提高读取速度。</p>
<blockquote>
<p>工作流程：</p>
</blockquote>
<p>先检查客户端的请求数据是否在 memcached 中，如有，直接把请求数据返回，不再对数据库进行任何操作；如果请求的数据不在 memcached 中，就去查数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到 memcached 中。</p>
<blockquote>
<p>常用方法：</p>
</blockquote>
<ul>
<li>获取：get(key)</li>
<li>设置：set(key, val, expire)</li>
<li>删除：delete(key)</li>
</ul>
<blockquote>
<p>通用缓存机制：</p>
</blockquote>
<p>用查询的方法名 + 参数作为查询时的 key value 对应的 key 值。</p>
<h4 id="5-使用-Redis-缓存"><a href="#5-使用-Redis-缓存" class="headerlink" title="5. 使用 Redis 缓存"></a>5. 使用 Redis 缓存</h4><p>与 memcache 的区别</p>
<ul>
<li>性能相差不大</li>
<li>Redis 在 2.0 版本后增加了自己的 VM 特性，突破物理内存的限制，memcache 可以修改最大可用内存，采用 LRU（Least recently used，最近最少使用）算法</li>
<li>Redis 依赖客户端来实现分布式读写</li>
<li>memcache 本身没有数据冗余机制，Redis 支持（快照、AOF），依赖快照进行持久化，AOF 增强了可靠性的同时，对性能有所影响。</li>
<li>memcache 不支持持久化，通常做缓存，提升性能；</li>
<li>memcache 在并发场景下，用 cas 保证一致性，Redis 事务支持比较弱，只能保证事务中的每个操作连续执行。</li>
<li>Redis 支持多种类型的数据类型</li>
<li>Redis 常用于数据量较小的高性能操作和运算上</li>
<li>memcache 用于在动态系统中减少数据库负载，提升性能；适合做缓存，提升性能</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 8  数据库缓存层优化]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-8-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E5%B1%82%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="数据库缓存层优化"><a href="#数据库缓存层优化" class="headerlink" title="数据库缓存层优化"></a>数据库缓存层优化</h3><h4 id="1-什么是数据库缓存"><a href="#1-什么是数据库缓存" class="headerlink" title="1. 什么是数据库缓存"></a>1. 什么是数据库缓存</h4><p>MySQL 等一些常见的关系型数据库的数据都存储在磁盘当中，在高并发场景下，业务应用对 MySQL 产生的增删改查操作造成巨大的 I/O 开销和查询压力，这无疑对数据库和服务器都是一种巨大的压力，为了解决此类问题，缓存数据的概念应运而生。</p>
<a id="more"></a>

<p>优势：</p>
<ul>
<li>极大地解决数据库服务器的压力</li>
<li>提高应用数据的响应速度</li>
</ul>
<p>常见的缓存形式：<b style="color:red;">内存缓存（尽量使用）</b>、文件缓存</p>
<h4 id="2-为什么要使用数据库缓存"><a href="#2-为什么要使用数据库缓存" class="headerlink" title="2. 为什么要使用数据库缓存"></a>2. 为什么要使用数据库缓存</h4><p>缓存数据是为了让客户端很少甚至不访问数据库服务器进行数据的查询，高并发下，能最大程度地降低对数据库服务器的访问压力。</p>
<blockquote>
<p>流程</p>
</blockquote>
<p>用户请求 – 数据查询 – 连接数据库服务器并查询数据 – 将数据缓存起来（HTML、<b style='color:red'>内存</b>、json、序列化） – 显示给客户端</p>
<p>用户再次请求或新用户访问 – 数据查询 – 直接从缓存中获取数据 – 显示给客户端</p>
<p>缓存需要考虑的问题</p>
<ul>
<li>缓存方式的选择：尽量使用内存</li>
<li>缓存场景的选择：哪些数据适合使用缓存，如不经常修改的数据</li>
<li>缓存数据的实时性，不建议同步地修改</li>
<li>缓存数据的稳定性 </li>
</ul>
<h4 id="3-使用-MySQL-查询缓存"><a href="#3-使用-MySQL-查询缓存" class="headerlink" title="3. 使用 MySQL 查询缓存"></a>3. 使用 MySQL 查询缓存</h4><h5 id="1-启用-MySQL-查询缓存"><a href="#1-启用-MySQL-查询缓存" class="headerlink" title="1. 启用 MySQL 查询缓存"></a>1. 启用 MySQL 查询缓存</h5><p>可极大降低 CPU 使用率</p>
<blockquote>
<p>开启方法：</p>
</blockquote>
<p><code>query_cache_type</code>: 查询缓存类型，有 0，1，2 三个值。0 表示不使用查询缓存；1 表示始终使用查询缓存；2 表示按需使用查询缓存。</p>
<p><code>query_cache_type=1</code> 时，也可以在查询语句中关闭查询缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_NO_CACHE * FROM my_table WHERE condition;</span><br></pre></td></tr></table></figure>

<p><code>query_cache_type=2</code> 时，可按需使用查询缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_CACHE * FROM my_table WHERE condition;</span><br></pre></td></tr></table></figure>

<p>query_cache_size: 默认情况下，值为0，表示为查询缓存预留的内存为 0，则无法使用查询缓存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL query_cache_size &#x3D; 134217728; (128M)</span><br></pre></td></tr></table></figure>

<p>查询缓存可以看做是 SQL 文本和查询结果的映射，第二次查询的 SQL 和第一次查询的 SQL 完全相同（多一个空格都不行），则会使用缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS LIKE &#39;Qcache_hits&#39;; &#x2F;&#x2F; 查看命中次数</span><br></pre></td></tr></table></figure>

<p>表的结构或数据发送改变时，查询缓存中的数据不再有效（即时失效），如果数据表的写入或修改频率比较高，查询缓存就失去意义了。</p>
<blockquote>
<p>清理缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLUSH QUERY CACHE; &#x2F;&#x2F; 清理查询缓存内存碎片</span><br><span class="line">RESET QUERY CACHE; &#x2F;&#x2F; 从查询缓存中移除所有查询</span><br><span class="line">FLUSH TABLES; &#x2F;&#x2F; 关闭所有打开的表，同时该操作将会清空查询缓存中的内容</span><br></pre></td></tr></table></figure>

<h4 id="4-使用-memcache-缓存"><a href="#4-使用-memcache-缓存" class="headerlink" title="4. 使用 memcache 缓存"></a>4. 使用 memcache 缓存</h4><p>对于大型站点，如果没有中间缓存层，当流量打入数据库层时，即便之前的几层为我们挡住一部分流量，但是在大并发的情况下，还是会有大量请求涌入数据库层，这样对于数据库服务器的压力冲击很大，响应速度也会下降，因此添加中间缓存层很有必要。</p>
<p>memcache 是一套分布式的高速缓存系统，目前被许多网站使用以提升网站的访问速度，尤其对于一些大型的、需要频繁访问数据库的网站访问速度提升效果十分显著。</p>
<p>memcache 是一个高性能的分布式的内存对象缓存系统，通过在内存里维护一个统一的巨大的 hash 表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单说就是将数据调用到内存，然后从内存中读取，从而大大提高读取速度。</p>
<blockquote>
<p>工作流程：</p>
</blockquote>
<p>先检查客户端的请求数据是否在 memcached 中，如有，直接把请求数据返回，不再对数据库进行任何操作；如果请求的数据不在 memcached 中，就去查数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到 memcached 中。</p>
<blockquote>
<p>常用方法：</p>
</blockquote>
<ul>
<li>获取：get(key)</li>
<li>设置：set(key, val, expire)</li>
<li>删除：delete(key)</li>
</ul>
<blockquote>
<p>通用缓存机制：</p>
</blockquote>
<p>用查询的方法名 + 参数作为查询时的 key value 对应的 key 值。</p>
<h4 id="5-使用-Redis-缓存"><a href="#5-使用-Redis-缓存" class="headerlink" title="5. 使用 Redis 缓存"></a>5. 使用 Redis 缓存</h4><p>与 memcache 的区别</p>
<ul>
<li>性能相差不大</li>
<li>Redis 在 2.0 版本后增加了自己的 VM 特性，突破物理内存的限制，memcache 可以修改最大可用内存，采用 LRU（Least recently used，最近最少使用）算法</li>
<li>Redis 依赖客户端来实现分布式读写</li>
<li>memcache 本身没有数据冗余机制，Redis 支持（快照、AOF），依赖快照进行持久化，AOF 增强了可靠性的同时，对性能有所影响。</li>
<li>memcache 不支持持久化，通常做缓存，提升性能；</li>
<li>memcache 在并发场景下，用 cas 保证一致性，Redis 事务支持比较弱，只能保证事务中的每个操作连续执行。</li>
<li>Redis 支持多种类型的数据类型</li>
<li>Redis 常用于数据量较小的高性能操作和运算上</li>
<li>memcache 用于在动态系统中减少数据库负载，提升性能；适合做缓存，提升性能</li>
</ul>
<h4 id="6-其他数据缓存"><a href="#6-其他数据缓存" class="headerlink" title="6. 其他数据缓存"></a>6. 其他数据缓存</h4><p>Session：尽量存到 memcache 或 Redis 里</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 7  动态语言的并发处理]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-7-%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="动态语言的并发处理"><a href="#动态语言的并发处理" class="headerlink" title="动态语言的并发处理"></a>动态语言的并发处理</h3><h4 id="1-进程、线程、协程"><a href="#1-进程、线程、协程" class="headerlink" title="1. 进程、线程、协程"></a>1. 进程、线程、协程</h4><h5 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h5><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>
<p>进程是一个 “<b style="color:red">执行中的程序</b>”</p>
<a id="more"></a>

<blockquote>
<p>进程的三态模型：多道程序系统中，进程在处理器上交替运行，状态不断地发生变化</p>
</blockquote>
<p>三个状态：运行、就绪、阻塞</p>
<ul>
<li><p>运行：当一个进程在处理机上运行时，则称该进程处于运行状态。处于此状态的进程的数目小于等于处理器的数目（处理器一个核心同时只能处理一个进程），对于单处理机系统，处于运行状态的进程只有一个。在没有其他进程可以执行时（如所有进程都在阻塞状态），通常会自动执行系统的空闲进程。</p>
</li>
<li><p>就绪：当一个进程获得了除处理机以外的一切所需资源，一旦得到处理机即可运行，则称此进程处于就绪状态。就绪进程可以按多个优先级来划分队列。例如，当一个进程由于时间片用完而进入就绪状态时，排入低优先级队列；当进程由 I/O 操作完成而进入就绪状态时，排入高优先级队列。</p>
</li>
<li><p>阻塞：也称为等待或睡眠状态，一个进程正在等待某一事件发生（例如请求 I/O 而等待 I/O 完成等）而暂时停止运行，这时即使把处理机分配给进程也无法运行，故城该进程处于阻塞状态。如手机的app后台进入后台。</p>
</li>
</ul>
<blockquote>
<p>进程的五态模型：对于一个实际的系统，进程的状态及其转换更为复杂</p>
</blockquote>
<p>新建态、活跃就绪/静止就绪、运行、活跃阻塞/静止阻塞、终止态</p>
<ul>
<li><p>新建态：对应于进程刚刚被创建时没有被提交的状态，并等待系统完成创建进程的所有必要信息。比赛开始状态。</p>
</li>
<li><p>静止阻塞：进程兑换到辅存时的阻塞状态，一旦等待的事件产生便进入静止就绪状态。等待进入比赛大名单的状态。</p>
</li>
<li><p>静止就绪（挂起就绪）：是指进程被兑换到辅存时的就绪状态，是不能被直接调度的状态，只有当主存中没有活跃就绪态进程，或者挂起就绪态进程具有更高的优先级，系统将把挂起就绪态进程调回主存并转换为活跃就绪。替补球员看饮水机状态。</p>
</li>
<li><p>活跃阻塞：是指进程已在主存，一旦等待的事件产生便进入活跃就绪状态。</p>
</li>
<li><p>活跃就绪：是指进程在主存并且可被调度的状态。替补球员热身状态。</p>
</li>
<li><p>终止态：进程已结束运行，回收除进程控制块之外的其他资源，并让其他进程从进程控制块中收集有关信息。比赛结束或被替补下的状态。</p>
</li>
</ul>
<p>由于用户的并发请求，为每一个请求都创建一个进程显显然是行不通的，从系统资源开销方面或是响应用户请求的效率方面来看。因此操作系统中线程的概念便被引进了。</p>
<h5 id="2-线程"><a href="#2-线程" class="headerlink" title="2. 线程"></a>2. 线程</h5><p>线程，有时被称为轻量级进程（Lightweight Process, LWP），是程序执行流的最小单元。</p>
<p>线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源。但它与同属于一个进程的其它线程共享进程所拥有的全部资源。</p>
<p>一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</p>
<p>线程是程序中一个单一的顺序控制流程，是进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派 CPU 的基本单位，指运行中的程序的调度单位。</p>
<p>在单个程序中同时运行多个线程完成不同的工作，成为多线程。</p>
<p>每个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</p>
<p>线程的状态：就绪、阻塞、运行</p>
<p>就绪：线程具备运行的所有条件，逻辑上可以运行，在等待处理机。</p>
<p>运行：线程占有处理机正在运行。</p>
<p>阻塞：线程在等待一个事件，逻辑上不可执行。</p>
<h5 id="3-协程"><a href="#3-协程" class="headerlink" title="3. 协程"></a>3. 协程</h5><p>协程：是一种<b style="color:red;">用户态的轻量级线程，协程的调度完全由用户控制</b>，而线程的调度由操作系统来控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存在其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p>
<h5 id="4-线程与进程的区别"><a href="#4-线程与进程的区别" class="headerlink" title="4. 线程与进程的区别"></a>4. 线程与进程的区别</h5><ol>
<li>线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间</li>
<li>进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源</li>
<li>线程是处理器调度的基本单位，但进程不是</li>
<li>二者都可并发执行</li>
<li>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</li>
</ol>
<h5 id="5-线程与协程的区别"><a href="#5-线程与协程的区别" class="headerlink" title="5. 线程与协程的区别"></a>5. 线程与协程的区别</h5><ol>
<li>一个线程可以有多个协程，一个进程也可以单独拥有多个协程</li>
<li>线程、进程都是同步机制，而协程则是异步</li>
<li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态，即状态不会丢失</li>
</ol>
<h5 id="6-多进程、多线程"><a href="#6-多进程、多线程" class="headerlink" title="6. 多进程、多线程"></a>6. 多进程、多线程</h5><p>多进程：同一时间里、同一计算机系统中如果允许两个或两个以上的进程处于运行状态，这就是多进程</p>
<p>多开一个进程，多分配一份资源，进程间相互独立，通讯不方便</p>
<p>多线程：线程就是吧一个进程分为很多片，每一片都可以是一个独立的流程</p>
<p>与多进程的区别是只会使用一个进程的资源，线程间可以直接通信</p>
<h5 id="7-举例"><a href="#7-举例" class="headerlink" title="7. 举例"></a>7. 举例</h5><p>单进程单线程：一个人在一个桌子上吃饭</p>
<p>单进程多线程：多个人在同一个桌子上一起吃饭</p>
<p>多进程单线程：多个人每个人在自己的桌子上吃饭</p>
<h4 id="2-同步阻塞模型"><a href="#2-同步阻塞模型" class="headerlink" title="2. 同步阻塞模型"></a>2. 同步阻塞模型</h4><p>多进程：最早的服务器端程序都是通过多进程、多线程来解决并发 I/O 的问题。一个请求创建一个进程，然后子进程进入循环同步阻塞地与客户端连接进行交互，收发处理数据。</p>
<p>多线程：用多线程模式实现非常简单，线程中可以直接向某一个客户端连接发送数据</p>
<h5 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h5><ol>
<li>创建一个 socket</li>
<li>进入 while 循环，阻塞在进程 accept 操作上，等待客户端连接进入</li>
<li>主进程在多进程模型下通过 fork 创建子进程</li>
<li>多线程模型下可以创建子线程</li>
<li>子进程/线程创建成功后进入 while 循环，阻塞在 recv 调用上，等待客户端向服务器发送数据</li>
<li>收到数据后服务器程序进行处理然后使用 send 向客户端发送响应</li>
<li>当客户端连接关闭时，子进程/线程退出并销毁所有资源。主进程/线程会回收掉此子进程/线程。</li>
</ol>
<h5 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h5><ol>
<li>这种模型严重依赖进程的数量解决并发问题</li>
<li>启动大量进程会带来额外的进程调度消耗</li>
</ol>
<h5 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建 socket 监听</span></span><br><span class="line">$socketServer = stream_socket_server(<span class="string">&#x27;tcp://0.0.0.0:8000&#x27;</span>, $errno, $errstr);</span><br><span class="line"><span class="comment">// 创建 5 个进程</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">5</span>: ++$i) &#123;</span><br><span class="line">	<span class="comment">// 如果返回的 pid = 0，表示阻塞</span></span><br><span class="line">	<span class="keyword">if</span> (pcntl_fork() == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// 持续监听</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			$conn = stream_socket_accept($socketServer);</span><br><span class="line">			<span class="comment">// 如果连接失败，重新创建监听</span></span><br><span class="line">			<span class="keyword">if</span> ($conn == <span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 读取流信息，并响应</span></span><br><span class="line">			$request = fread($conn, <span class="number">9000</span>);</span><br><span class="line">			$response = <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">			fwrite($conn, $response);</span><br><span class="line">			fclose($conn);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-异步非阻塞模型"><a href="#3-异步非阻塞模型" class="headerlink" title="3. 异步非阻塞模型"></a>3. 异步非阻塞模型</h4><p>现在各种高并发异步 I/O 的服务器（nginx、golang、nodejs 等）都是基于 <b style="color:red">epoll （维持无限数量的链接且无需轮询，真正解决了并发的问题）</b>实现的</p>
<p>I/O 复用异步非阻塞程序使用经典的 Reactor 模型，Reactor 顾名思义就是反应堆的意思，它本身不处理任何数据收发，只是可以监视一个 socket 句柄的事件变化，即 EventListener</p>
<h5 id="1-Reactor-模型"><a href="#1-Reactor-模型" class="headerlink" title="1. Reactor 模型"></a>1. Reactor 模型</h5><p>四个核心操作</p>
<ul>
<li>Add: 添加一个 socket 到 Reactor</li>
<li>Set: 修改 socket 对应的事件监听，可以设置监听的类型，如可读可写</li>
<li>Del: 从 Reactor 中移除，不再监听事件</li>
<li>Callback: 事件发生后回调指定的函数，类似 js 的事件触发，一般在 add/set 时指定</li>
</ul>
<p>实践：</p>
<ul>
<li>nginx: 多线程 Reactor</li>
<li>swoole: 多线程 Reactor + 多进程 worker</li>
</ul>
<h4 id="4-PHP-并发编程实践"><a href="#4-PHP-并发编程实践" class="headerlink" title="4. PHP 并发编程实践"></a>4. PHP 并发编程实践</h4><p>PHP 并发编程主要有以下三种方式</p>
<h5 id="1-PHP-的-Swoole-扩展"><a href="#1-PHP-的-Swoole-扩展" class="headerlink" title="1. PHP 的 Swoole 扩展"></a>1. PHP 的 Swoole 扩展</h5><p>PHP 的异步、并行、高性能网络通信引擎，使用纯 C 语言编写，提供了 PHP 语言的异步多线程服务器，异步 TCP/UDP 网络客户端，异步 MySQL，异步 Redis，数据库连接池，AsyncTask，消息队列，毫秒定时器，异步文件读写，异步 DNS 查询。</p>
<p>除了异步 I/O 的支持之外，Swoole 为 PHP 多进程的模式设计了多个并发数据结构和 IPC 通信机制，可以大大简化多进程并发编程的工作。不需要做 Reactor，不需要同步阻塞，直接使用 Swoole 就可以实现。</p>
<p>Swoole 2.0 支持了类似 Go 语言的协程，可以使用完全同步的代码实现异步程序。</p>
<p>示例：Swoole 的异步 MySQL 实现</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$db = <span class="keyword">new</span> Swoole\MySQL;</span><br><span class="line">$server = <span class="keyword">array</span>(<span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$db-&gt;connect($server, <span class="function"><span class="keyword">function</span>(<span class="params">$db, $result</span>) </span>&#123;</span><br><span class="line">	$db-&gt;query(<span class="string">&#x27;show tables&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Swoole\MySQL $db, $result</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// do something</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>基于事件监听的异步操作，不需要等待</p>
<h5 id="2-消息队列"><a href="#2-消息队列" class="headerlink" title="2. 消息队列"></a>2. 消息队列</h5><ul>
<li>场景：用户注册后，需要发注册邮件和注册短信<ul>
<li>串行方式：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信</li>
<li>并行方式：将注册信息写入数据库成功后，发送注册邮件，同时发送注册短信</li>
<li>消息队列方式：将注册信息写入数据库成功后，将成功信息写入队列，此时直接返回成功给用户，写入队列的时间非常短，可以忽略不计，然后异步发送邮件和短信（离线发送）</li>
</ul>
</li>
</ul>
<blockquote>
<p>应用解耦</p>
</blockquote>
<ul>
<li>场景：用户下单后，订单系统需要通知库存系统<ul>
<li>假如库存系统无法访问，则订单减库存将失败，从而导致订单失败。因为订单系统与库存系统耦合。</li>
<li>引用队列：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功，暂时不去管库存的问题。</li>
<li>库存系统订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作。</li>
</ul>
</li>
</ul>
<blockquote>
<p>流量削锋</p>
</blockquote>
<p>应用场景：秒杀活动，流量瞬间激增，服务器压力大。</p>
<p>用户发起请求，服务器接收后，先写入消息队列。加入消息队列长度超过最大值，则直接报错或提示用户。</p>
<p>后续程序读取消息队列再做处理</p>
<p>作用：控制请求量、缓解高流量</p>
<blockquote>
<p>日志处理</p>
</blockquote>
<p>应用场景：解决大量日志的传输</p>
<p>日志采集程序将程序写入消息队列，然后通过日志处理程序订阅日志，离线将日志写入文件，速度将大大提升。</p>
<blockquote>
<p>消息通讯</p>
</blockquote>
<p>应用场景：聊天室</p>
<p>多个客户端订阅同一主题，进行消息发布和接收</p>
<p>常见消息队列产品</p>
<p>Kafka、ActiveMQ、ZeroMQ、RabbitMQ、Redis 等</p>
<h5 id="3-接口的并发请求"><a href="#3-接口的并发请求" class="headerlink" title="3. 接口的并发请求"></a>3. 接口的并发请求</h5><p>curl_multi 系列函数</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 6 动态语言静态化]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-6-%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E9%9D%99%E6%80%81%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="动态语言静态化"><a href="#动态语言静态化" class="headerlink" title="动态语言静态化"></a>动态语言静态化</h2><h4 id="1-什么是动态语言静态化"><a href="#1-什么是动态语言静态化" class="headerlink" title="1. 什么是动态语言静态化"></a>1. 什么是动态语言静态化</h4><p>将现有 PHP 等动态语言的逻辑代码生成为静态 HTML 文件，用户访问动态脚本时重定向到静态 HTML 文件的过程，这样会大大减轻 CPU 负载和数据库的压力。</p>
<a id="more"></a>

<p>web 工作原理回顾：用户通过浏览器的域名请求PHP文件，DNS 服务器解析域名得到 ip 地址，将 ip 返回给客户端，客户端通过 ip 找到真实的服务器并进行访问，然后找服务器 80 端口的 web 服务，nginx 判断用户请求的是否为 PHP 文件，如果是 PHP，nginx 反向代理给 fpm，因为只有 PHP 解析器（如 fpm）才能解析 PHP，fpm 将 PHP 代码进行解析，解析成 HTML，最后返回给用户浏览器。</p>
<p>对实时性要求不高的页面适合使用动态语言静态化。</p>
<h4 id="2-为什么需要动态语言静态化"><a href="#2-为什么需要动态语言静态化" class="headerlink" title="2. 为什么需要动态语言静态化"></a>2. 为什么需要动态语言静态化</h4><ul>
<li>动态脚本通过会做逻辑计算和数据查询，访问量越大，服务器压力越大；</li>
<li>访问量大时可能造成 CPU 负载过高、数据库服务器压力过大；</li>
<li>静态化能够降低逻辑处理压力，降低数据库服务器查询压力。</li>
</ul>
<h4 id="3-静态化的实现方式"><a href="#3-静态化的实现方式" class="headerlink" title="3. 静态化的实现方式"></a>3. 静态化的实现方式</h4><h5 id="1-使用模板引擎，可以使用-smarty-的缓存机制生成静态-HTML-缓存文件"><a href="#1-使用模板引擎，可以使用-smarty-的缓存机制生成静态-HTML-缓存文件" class="headerlink" title="1. 使用模板引擎，可以使用 smarty 的缓存机制生成静态 HTML 缓存文件"></a>1. 使用模板引擎，可以使用 smarty 的缓存机制生成静态 HTML 缓存文件</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$smarty-&gt;cache_dir = $ROOT . <span class="string">&#x27;/cache&#x27;</span>; <span class="comment">// 缓存目录</span></span><br><span class="line">$smarty-&gt;caching = <span class="literal">true</span>; <span class="comment">// 是否开启缓存</span></span><br><span class="line">$smarty-&gt;cache_lifetime = <span class="string">&quot;3600&quot;</span>;  <span class="comment">// 缓存时间</span></span><br><span class="line">$smarty-&gt;display(<span class="keyword">string</span> template [, <span class="keyword">string</span> cache_id [, <span class="keyword">string</span> compile_id]]);</span><br><span class="line"></span><br><span class="line">$smarty-&gt;clear_all_cache(); <span class="comment">// 清除所有缓存</span></span><br><span class="line">$smarty-&gt;clear_cache(<span class="string">&#x27;flie.html&#x27;</span>); <span class="comment">// 清除指定的缓存</span></span><br><span class="line">$smarty-&gt;clear_cache(<span class="string">&#x27;article.html&#x27;</span>, $art_id); <span class="comment">// 清除同一模板下的指定缓存号的缓存</span></span><br></pre></td></tr></table></figure>

<h5 id="2-利用-ob-系统函数"><a href="#2-利用-ob-系统函数" class="headerlink" title="2. 利用 ob 系统函数"></a>2. 利用 ob 系统函数</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ob_start(): 打开输出控制缓冲</span><br><span class="line">ob_get_contents(): 返回输出缓冲区内容</span><br><span class="line">ob_clean(): 清空输出缓冲区</span><br><span class="line">ob_end_flush()	: 冲刷出（送出）输出缓冲区内容并关闭缓冲</span><br></pre></td></tr></table></figure>
<p>伪代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ob_start(); <span class="comment">// 在 HTML 代码之前开启缓冲区</span></span><br><span class="line">输出到页面的 HTML 代码 ...</span><br><span class="line">...</span><br><span class="line">ob_get_contents(); <span class="comment">// 获取中间整个的 HTML 代码</span></span><br><span class="line">ob_end_flush()	; <span class="comment">// 把获取到的 HTML 代码输出，并关闭缓冲区</span></span><br><span class="line">fopen(); <span class="comment">// 将 HTML 代码写入到指定的 HTML 文件，下次再来访问时首先判断这个 HTML 文件是否过期，如果存在且未过期，直接返回该文件即可。</span></span><br></pre></td></tr></table></figure>
<p>可以判断文件的 inode 修改时间，判断是否过期。</p>
<p>使用 <code>filectime</code> 函数</p>
<p>示例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cache_name = md5(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">$cache_lifetime = <span class="number">3600</span>;</span><br><span class="line"><span class="keyword">if</span> (filectime(<span class="keyword">__FILE__</span>) &lt;= filectime($cache_name) &amp;&amp; file_exists($cache_name) &amp;&amp; filectime($cache_name) + $cache_lifetime &gt; time()) &#123;</span><br><span class="line">	<span class="keyword">include</span> $cache_name;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;这里是 HTML 文件内容，会包含 PHP 计算以及数据库查询等操作&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = ob_get_contents();</span><br><span class="line">ob_end_flush();</span><br><span class="line"></span><br><span class="line">$handle = fopen($cache_name, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fwrite($handle, $content);</span><br><span class="line">fclose($handle);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 5 建立独立的图片服务器]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-5-%E5%BB%BA%E7%AB%8B%E7%8B%AC%E7%AB%8B%E7%9A%84%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="独立图片服务器的部署"><a href="#独立图片服务器的部署" class="headerlink" title="独立图片服务器的部署"></a>独立图片服务器的部署</h2><h4 id="1-独立的必要性"><a href="#1-独立的必要性" class="headerlink" title="1. 独立的必要性"></a>1. 独立的必要性</h4><ul>
<li>分担web服务器的I/O负载：将耗费资源的图片服务分离出来，提高服务器的性能和稳定性。</li>
<li>能够专门对图片服务器进行优化：为图片服务设置有针对性的缓存方案（如针对I/O较高的问题，增加硬盘转数），减少带宽成本（不需要太多计算，调低CPU性能），提高访问速度（可以做图片服务器集群）。</li>
<li>提高网站的可扩展性：通过增加图片服务器，提高图片吞吐能力。</li>
</ul>
<a id="more"></a>

<h4 id="2-采用独立域名（不是二级域名）"><a href="#2-采用独立域名（不是二级域名）" class="headerlink" title="2. 采用独立域名（不是二级域名）"></a>2. 采用独立域名（不是二级域名）</h4><p>原因：</p>
<ul>
<li>同一域名下浏览器的并发连接数有限制（通常为2-6个），为突破浏览器连接数的限制，可采用独立域名。</li>
<li>由于 cookie 的原因，对缓存不利，大部分 web cache 都只缓存不带 cookie 的请求，导致每次的图片请求都不能命中 cache</li>
</ul>
<h4 id="3-独立后的问题"><a href="#3-独立后的问题" class="headerlink" title="3. 独立后的问题"></a>3. 独立后的问题</h4><h5 id="1-如何进行图片上传和图片同步？"><a href="#1-如何进行图片上传和图片同步？" class="headerlink" title="1. 如何进行图片上传和图片同步？"></a>1. 如何进行图片上传和图片同步？</h5><ul>
<li>NFS 共享方式</li>
<li>FTP 同步</li>
<li>七牛云等第三方服务</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 4 使用 CDN 加速]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-4-%E4%BD%BF%E7%94%A8-CDN-%E5%8A%A0%E9%80%9F/</url>
      <content type="html"><![CDATA[<h2 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h2><h4 id="1-什么是-CDN"><a href="#1-什么是-CDN" class="headerlink" title="1. 什么是 CDN"></a>1. 什么是 CDN</h4><p>CDN 的全称是 content delivery network，即内容分发网络。</p>
<a id="more"></a>

<p>尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输更快、更稳定。</p>
<p>在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络（相当于真实服务器的镜像）。</p>
<p>CDN 系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。</p>
<h4 id="2-使用-CDN-的优势"><a href="#2-使用-CDN-的优势" class="headerlink" title="2. 使用 CDN 的优势"></a>2. 使用 CDN 的优势</h4><ul>
<li>本地 cache 加速，提高了企业站点（尤其是含有大量图片和静态页面站点）的访问速度。</li>
<li>跨运营商的网络加速（北联通、南电信），保证不同网络的用户都得到良好的访问质量。</li>
<li>远程访问用户根据 DNS 负载均衡技术智能自动选择 cache 服务器。</li>
<li>自动生成服务器的远程 mirror（镜像）cache 服务器，远程用户访问时从 cache 服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点 web 服务器负载等功能。</li>
<li>广泛分布的 CDN 节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵。</li>
</ul>
<h4 id="3-CDN-的工作原理"><a href="#3-CDN-的工作原理" class="headerlink" title="3. CDN 的工作原理"></a>3. CDN 的工作原理</h4><h5 id="1-传统访问"><a href="#1-传统访问" class="headerlink" title="1. 传统访问"></a>1. 传统访问</h5><p>用户在浏览器输入域名发起请求 -&gt; 解析域名获取服务器 ip 地址 -&gt; 根据 ip 地址找到对应的服务器 -&gt; 服务器响应并返回数据</p>
<h5 id="2-使用-CDN-访问"><a href="#2-使用-CDN-访问" class="headerlink" title="2. 使用 CDN 访问"></a>2. 使用 CDN 访问</h5><p>用户发起请求（cname）  -&gt; 智能 DNS 解析（根据ip判断地理位置、接入网类型，选择路由最短和负载最轻的服务器） -&gt; 取得缓存服务器ip -&gt; 把内容返回给用户（如果缓存中有） -&gt; 向源站点发起请求 -&gt; 将结果返回给用户 -&gt; 将结果存入缓存服务器</p>
<h4 id="4-CDN-的适用场景"><a href="#4-CDN-的适用场景" class="headerlink" title="4. CDN 的适用场景"></a>4. CDN 的适用场景</h4><ul>
<li>站点或应用中大量静态资源的加速分发，如 css、js、图片、html 等</li>
<li>大文件下载</li>
<li>直播网站</li>
</ul>
<h4 id="5-CDN-的实现"><a href="#5-CDN-的实现" class="headerlink" title="5. CDN 的实现"></a>5. CDN 的实现</h4><ul>
<li>BAT 等都有提供现成的 CDN 服务</li>
<li>可用 LVS 做4层负载均衡</li>
<li>可用 nginx、varnish、squid、Apache trafficserver 做7层负载均衡和cache</li>
<li>使用 squid 反向代理、或者 nginx 反向代理，把源站点的内容缓存</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 3 浏览器缓存和压缩优化技术]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-3-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E5%92%8C%E5%8E%8B%E7%BC%A9%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h3 id="1-http-缓存机制"><a href="#1-http-缓存机制" class="headerlink" title="1. http 缓存机制"></a>1. http 缓存机制</h3><p>http 缓存模型中，如果请求成功会有三种情况</p>
<ul>
<li><code>200 from cache</code>：直接从本地缓存中获取响应，最快速、最省流量，因为根本没有向服务器发送请求；</li>
<li><code>304 not modified</code>：协商缓存，浏览器在本地没有命中的情况下，请求头中发送一定的校验数据到服务器，如果服务端数据没有改变，浏览器从本地缓存响应，返回 304，即先去服务端验证文件是否被修改过。这种方式快速，发送的数据很少，只返回一些基本的响应头信息，数据量很小，不发送实际响应体。</li>
<li><code>200 ok</code>：以上两种缓存全部失败，服务器返回完整响应，没有用到缓存，相对最慢。</li>
</ul>
<a id="more"></a>

<h4 id="1-本地缓存"><a href="#1-本地缓存" class="headerlink" title="1. 本地缓存"></a>1. 本地缓存</h4><p>浏览器认为本地缓存可以使用，不会去请求服务端。</p>
<p>相关 <code>Header</code></p>
<ol>
<li><code>Pragma</code>：HTTP1.0 时代的遗留产物，该字段被设置为 <code>no-cache</code> 时，会告知浏览器禁用本地缓存，即每次都向服务器发送请求。</li>
<li><code>Expires</code>：HTTP1.0 时代用来启用本地缓存的字段，标记缓存的过期时间。<code>Expires</code> 对应一个格林威治时间，告知浏览器缓存过期的时刻，如果还没到期，表名缓存有效，无需请求服务器。问题：服务端的时间和客户端的时间基准不一定一致，如果时间差距大，会影响缓存效果。</li>
<li><code>Cache-Control</code>：HTTP1.1 针对 <code>Expires</code> 时间基准不一致的问题的解决方案。该参数告知浏览器缓存过期的时间间隔（秒数）而不是时刻，即使具体时间不一致，也不影响缓存的效果。设置为 <code>no-store</code>，则禁止浏览器缓存响应；<code>no-cache</code>，不允许直接使用本地缓存，先发起请求和服务器协商；<code>max-age=3600</code>，告知浏览器本地缓存有效的最长期限，单位为秒。</li>
</ol>
<blockquote>
<p><span style="color:red">优先级： <code>Pragma</code> &gt; <code>Cache-Control</code> &gt; <code>Expires</code></sapn></p>
</blockquote>
<h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h4><p>  当浏览器没有命中本地缓存，如本地缓存过期或者响应中声明不允许直接使用本地缓存，那么浏览器肯定会发起服务端请求。</p>
<p>  服务端会验证数据是否被修改，如果没有，通知浏览器使用本地缓存。</p>
<p>  相关 <code>Header</code></p>
<ol>
<li><code>Last-Modified</code>：资源的最后修改时间，浏览器请求一个资源的时候，服务端进行响应，并带一个 <code>Last-Modified</code>，下次再请求服务器的时候，带着这个时间（header 中添加 <code>If-Modified-Since</code>），服务器会判断这个时间点之后，该资源是否发生了修改，如果没有修改，会返回304，告知浏览器使用本地缓存；<ol>
<li><code>ETag</code>：HTTP1.1 推出，文件的指纹标识符，第二次浏览器请求服务的时候，带着这个指纹（header 中添加 <code>If-None-Match</code>），如果文件内容修改，指纹会改变。</li>
</ol>
</li>
</ol>
<h4 id="3-缓存策略的选择"><a href="#3-缓存策略的选择" class="headerlink" title="3. 缓存策略的选择"></a>3. 缓存策略的选择</h4><h5 id="1-适合缓存的内容"><a href="#1-适合缓存的内容" class="headerlink" title="1. 适合缓存的内容"></a>1. 适合缓存的内容</h5><ul>
<li>不变的图片、logo 等；</li>
<li>js、css 静态文件；</li>
<li>可下载的内容、媒体文件等；</li>
</ul>
<h5 id="2-建议使用协商缓存的内容"><a href="#2-建议使用协商缓存的内容" class="headerlink" title="2. 建议使用协商缓存的内容"></a>2. 建议使用协商缓存的内容</h5><p>经常改变的文件适合使用协商缓存，如 </p>
<ul>
<li>html 文件；</li>
<li>经常替换的图片；</li>
<li>经常修改的 js、css 文件。</li>
</ul>
<p>js、css 文件的加载可以加入文件的签名来拒绝缓存，如时间戳、版本号等。index.css?签名</p>
<h5 id="3-不建议缓存的内容"><a href="#3-不建议缓存的内容" class="headerlink" title="3. 不建议缓存的内容"></a>3. 不建议缓存的内容</h5><ul>
<li>用户隐私等敏感数据；</li>
<li>经常改变的API数据接口。</li>
</ul>
<h3 id="2-nginx-配置缓存策略"><a href="#2-nginx-配置缓存策略" class="headerlink" title="2. nginx 配置缓存策略"></a>2. nginx 配置缓存策略</h3><p>简单示例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$since = <span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_IF_MODIFIED_SINCE&#x27;</span>]) ? $_SERVER[<span class="string">&#x27;HTTP_IF_MODIFIED_SINCE&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 模拟文件修改</span></span><br><span class="line">$lifetime = <span class="number">3600</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($since)) &#123;</span><br><span class="line">	<span class="keyword">if</span> (strtotime($since) + $lifetime &gt; time()) &#123;</span><br><span class="line">		header(<span class="string">&#x27;HTTP/1.1 304 Not Modified&#x27;</span>);</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(sprintf(<span class="string">&#x27;Last-Modified: %s GMT&#x27;</span>), gmdate(<span class="string">&#x27;D, d M Y H:i:s&#x27;</span>, time()));</span><br><span class="line"><span class="keyword">echo</span> time();</span><br></pre></td></tr></table></figure>

<h4 id="1-本地缓存配置"><a href="#1-本地缓存配置" class="headerlink" title="1. 本地缓存配置"></a>1. 本地缓存配置</h4><p><code>add_header</code> 指令：添加状态码为2XX和3XX的响应头信息。</p>
<p>语法： <code>add_header name value [always];</code> name 可以为<code>pragma</code>/<code>cache-control</code>/<code>expires</code>，可以继承。<span style="color:red">expires 最常用</span>，通知浏览器过期时长，后面跟数字和单位，如 <code>expires 30d;</code>，数值为负相当于 <code>cache-control no-cache;</code>，数值为0或正值相当于 <code>cache-control max-age=指定时间;</code>。</p>
<p>nginx 配置实例</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|png|flv|swf|rar|zip)$</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line">	<span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line">	<span class="attribute">expires</span> <span class="number">12h</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-协商缓存配置"><a href="#2-协商缓存配置" class="headerlink" title="2. 协商缓存配置"></a>2. 协商缓存配置</h4><p>etag指令，指定签名。</p>
<p>etag on | off， 默认为 on</p>
<h3 id="3-前端代码和资源的压缩"><a href="#3-前端代码和资源的压缩" class="headerlink" title="3. 前端代码和资源的压缩"></a>3. 前端代码和资源的压缩</h3><p>优势：让资源文件更小，加快文件在网络中的传输，让网页更快地展示，降低带宽和流量开销。</p>
<p>压缩方式：js、css、图片、HTML文件压缩；gzip 压缩</p>
<h4 id="1-js-代码的压缩"><a href="#1-js-代码的压缩" class="headerlink" title="1. js 代码的压缩"></a>1. js 代码的压缩</h4><p>一般是去掉多余的空格和回车、替换长变量名、简化一些代码写法等。</p>
<p>常用压缩工具：UglifyJS、YUI Compressor、Closure Compiler</p>
<p>在线工具： <a href="https://tool.css-js.com/">https://tool.css-js.com/</a>  或 <a href="https://www.css-js.com/">https://www.css-js.com/</a></p>
<h4 id="2-css-代码压缩"><a href="#2-css-代码压缩" class="headerlink" title="2. css 代码压缩"></a>2. css 代码压缩</h4><p>原理与 js 压缩类似</p>
<p>常用压缩工具：YUI Compressor、css Compressor</p>
<h4 id="3-HTML-代码压缩"><a href="#3-HTML-代码压缩" class="headerlink" title="3. HTML 代码压缩"></a>3. HTML 代码压缩</h4><p>不建议使用代码压缩，有时会破坏代码结构，可以使用 gzip 压缩，也可以使用 htmlcompressor 工具，但转换后一定要检查代码结构。</p>
<p>在线工具： <a href="http://htmlcompressor.com/compressor/">http://htmlcompressor.com/compressor/</a></p>
<h4 id="4-图片压缩"><a href="#4-图片压缩" class="headerlink" title="4. 图片压缩"></a>4. 图片压缩</h4><p>压缩工具： <a href="https://tinypng.com/">tinypng</a>、<a href="http://www.jpegmini.com/">JpegMini</a>、<a href="https://www.imageoptim.com/">ImageOptim</a></p>
<h4 id="5-gzip-压缩"><a href="#5-gzip-压缩" class="headerlink" title="5. gzip 压缩"></a>5. <span style="color:red;">gzip 压缩</span></h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4K</span> | <span class="number">16</span> <span class="number">8K</span>; <span class="comment"># 缓冲，在内存中缓冲几块，每块多大</span></span><br><span class="line">gzip_comp_level [1-9]; 推荐6，压缩级别，级别越高，压得越小，越浪费CPU资源</span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="comment"># 正则匹配UA，什么样的uri不进行gzip</span></span><br><span class="line">gzip_min_length <span class="number">200</span> <span class="comment"># 开始压缩的最小长度</span></span><br><span class="line">gzip_http_version <span class="number">1</span>.<span class="number">0</span> | <span class="number">1</span>.<span class="number">1</span> <span class="comment"># 开始压缩的http版本</span></span><br><span class="line">gzip_proxied <span class="comment"># 设置请求的代理服务器</span></span><br><span class="line">gzip_types text/plain application/xml <span class="comment"># 对哪些类型的文件启用压缩</span></span><br><span class="line">gzip_vary <span class="literal">on</span> | <span class="literal">off</span> <span class="comment"># 是否传输gzip压缩标记</span></span><br></pre></td></tr></table></figure>

<h4 id="6-其他工具"><a href="#6-其他工具" class="headerlink" title="6. 其他工具"></a>6. 其他工具</h4><p>自动化构建工具 Grunt 等。</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 2 减少 http 请求次数]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-2-%E5%87%8F%E5%B0%91-http-%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="2-减少-http-请求次数"><a href="#2-减少-http-请求次数" class="headerlink" title="2. 减少 http 请求次数"></a>2. 减少 http 请求次数</h3><h4 id="1-为什么要减少-http-请求"><a href="#1-为什么要减少-http-请求" class="headerlink" title="1. 为什么要减少 http 请求"></a>1. 为什么要减少 http 请求</h4><ul>
<li><p>性能黄金法则</p>
<p>只有10%-20%的最终用户响应时间花在接收请求的html文档上，剩下的80%-90%时间花在html文档所引用的所有组件（图片、script、css、flash等）进行的http请求上。</p>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p>如何改善</p>
<p>改善响应时间最简单的途径就是减少组件的数量，并由此减少http请求的数量。    </p>
<ul>
<li>http 连接产生的开销</li>
</ul>
<p>域名解析 - tcp连接 - 发送请求 - 等待 - 下载资源 - 浏览器解析</p>
</li>
</ul>
<h4 id="2-减少-http-请求的方式"><a href="#2-减少-http-请求的方式" class="headerlink" title="2. 减少 http 请求的方式"></a>2. 减少 http 请求的方式</h4><h5 id="1-图片地图"><a href="#1-图片地图" class="headerlink" title="1. 图片地图"></a>1. 图片地图</h5><pre><code>图片地图允许在一张图片上关联多个url，目标url的选择取决于点击了图片上的哪个位置。</code></pre>
<p>   如：导航的多张图片，可以使用多张分开的图片，然后每张图片对应一个超链接。这样就会产生多个图片的http请求，我们的目标是要减少http请求，将多张图片合成为一张图片，然后以位置信息定义超链接，达到减少http请求的目的。把http请求减少为一个，可以保证设计的完整性和功能的齐全性。</p>
<p> 示例：</p>
<p><a href="http://stevesouders.com/hpws/imagemap-no.php">http://stevesouders.com/hpws/imagemap-no.php</a></p>
<p><a href="http://stevesouders.com/hpws/imagemap.php">http://stevesouders.com/hpws/imagemap.php</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">usemap</span>=<span class="string">&quot;#map1&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/imagemap.gif?t=1518433942&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;map1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,31,31&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Home&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Home&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;36,0,66,31&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Gifts&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Gifts&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;71,0,101,31&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Cart&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Cart&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;106,0,136,31&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Settings&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Settings&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;141,0,171,31&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Help&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Help&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-css-Sprites"><a href="#2-css-Sprites" class="headerlink" title="2. css Sprites"></a>2. css Sprites</h5><p>css 精灵，通过使用合并图片，通过指定css 的 <code>background-image</code> 和 <code>background-position</code> 来显示元素。</p>
<p>示例：</p>
<p><a href="http://stevesouders.com/hpws/sprites.php">http://stevesouders.com/hpws/sprites.php</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #F4F5EB; border: 2px ridge #333; width: 180px; height: 32px; padding: 4px 0 4px 0;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Home&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Home&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Gifts&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Gifts&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;gifts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Cart&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Cart&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Settings&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Settings&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;settings&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Help&#x27;)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Help&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;help&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">31px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">31px</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(/images/spritebg.gif?t=<span class="number">1518434522</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.home</span>     &#123; <span class="attribute">background-position</span>:<span class="number">0</span> <span class="number">0</span>; <span class="attribute">margin-right</span>:<span class="number">4px</span>; <span class="attribute">margin-left</span>: <span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.gifts</span>    &#123; <span class="attribute">background-position</span>:-<span class="number">32px</span> <span class="number">0</span>; <span class="attribute">margin-right</span>:<span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.cart</span>     &#123; <span class="attribute">background-position</span>:-<span class="number">64px</span> <span class="number">0</span>; <span class="attribute">margin-right</span>:<span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.settings</span> &#123; <span class="attribute">background-position</span>:-<span class="number">96px</span> <span class="number">0</span>; <span class="attribute">margin-right</span>:<span class="number">4px</span>;&#125;</span><br><span class="line"><span class="selector-class">.help</span>     &#123; <span class="attribute">background-position</span>:-<span class="number">128px</span> <span class="number">0</span>; <span class="attribute">margin-right</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>性能分析：图片地图和css精灵的响应时间基本相同，但比使用多个图片的方式要快50%以上。css精灵比图片地图方便一些，通常选用css精灵的方式。</p>
<h5 id="3-合并脚本和样式表"><a href="#3-合并脚本和样式表" class="headerlink" title="3. 合并脚本和样式表"></a>3. 合并脚本和样式表</h5><p>使用外部css和js文件引用的方式，这比直接写在页面中性能要好一点。但这样会增加http请求数量。独立一个js文件比用多个文件载入速度快38%。</p>
<h5 id="4-图片使用-base64-编码减少页面请求数"><a href="#4-图片使用-base64-编码减少页面请求数" class="headerlink" title="4. 图片使用 base64 编码减少页面请求数"></a>4. 图片使用 base64 编码减少页面请求数</h5><p>采用 base64 编码将图片直接嵌入到网页中，而不是从外部载入。但是HTML文件会变大些。</p>
<p><code>php file_get_conetents</code> 读出图片文件，然后使用 <code>base64_encode</code> 函数生成。</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发大流量解决方案 1 web 资源防盗链]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1-web-%E8%B5%84%E6%BA%90%E9%98%B2%E7%9B%97%E9%93%BE/</url>
      <content type="html"><![CDATA[<h3 id="1-web-资源防盗链"><a href="#1-web-资源防盗链" class="headerlink" title="1. web 资源防盗链"></a>1. web 资源防盗链</h3><h4 id="1-什么是防盗链？"><a href="#1-什么是防盗链？" class="headerlink" title="1.  什么是防盗链？"></a>1.  什么是防盗链？</h4><ul>
<li><p>盗链：是指在自己的服务器上展示一些并不在自己服务器上的内容。</p>
<p> 获得他人服务器上的资源地址，绕过别人的资源展示页面，直接在自己的页面上向最终用户提供此内容。</p>
<p>常见的是小站盗用大站的音乐、图片、视频、文件等资源。</p>
<p>通过盗链可以减轻自己服务器的负担，因为真实的空间和流量均是来自别人的服务器。</p>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p>防盗链：防止别人通过一些技术手段绕过本站的资源展示页面，盗用本站的资源，让绕开本站资源展示页面的资源链接失效。</p>
<p>可以大大减轻服务器及带宽的压力</p>
</li>
</ul>
<h4 id="2-防盗链的工作原理"><a href="#2-防盗链的工作原理" class="headerlink" title="2. 防盗链的工作原理"></a>2. 防盗链的工作原理</h4><p>通过 referer 或者签名，网站可以检测目标网页访问的来源网页，如果是资源文件，则可以跟踪到显示它的网页地址。</p>
<p>  一旦检测到来源不是本站即进行阻止或返回指定的页面。 </p>
<p>  通过计算签名的方式，判断请求是否合法，如果合法则显示，否则返回错误信息。</p>
<h4 id="3-防盗链的实现方法"><a href="#3-防盗链的实现方法" class="headerlink" title="3. 防盗链的实现方法"></a>3. 防盗链的实现方法</h4><h5 id="1-referer-方法"><a href="#1-referer-方法" class="headerlink" title="1. referer 方法"></a>1. referer 方法</h5><p>   nginx模块 <code>ngx_http_referer_module</code> 用来阻挡来源非法的域名请求</p>
<p>   nginx 指令 <code>valid_referers</code>，全局变量 <code>$invalid_referer</code></p>
<p>   语法： <code>valid_referers none | blocked | server_names | string ...;</code></p>
<ul>
<li><code>none</code>: 可以写也可以不写，代表 referer 是否为空，写了代表如果 referer 为空也是合法的，不写 none 表示如果 referer 为空就不合法，必须有 referer，一般可以为空；</li>
<li><code>blocked</code>: 表示通过代理、防火墙等途径对referer进行删除，这些值都不以 http:// 或 https:// 开头；<ul>
<li><code>server_names</code>: referer 来源头部包含当前的 server_names，即被允许的源的列表；</li>
</ul>
</li>
<li><code> string ...</code>: 信任的地址，字符串或正则表达式；</li>
</ul>
<p>示例：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|png|flv|swf|rar|zip)$</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line">	<span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> imooc.com <span class="regexp">*.imooc.com</span>;</span><br><span class="line">	<span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#return 403;</span></span><br><span class="line">		<span class="attribute">rewrite</span><span class="regexp"> ^/</span> http://www.imooc.com/403.jpg;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当访问这些扩展名结尾的文件时，会进行防盗链处理。添加 none、blocked 以及白名单（慕课网），如果来源合法，变量 <code>$invalid_referer</code> 就是0，直接跳过判断。</p>
<p>也可以针对目录进行防盗链，只需要修改 location 那一行</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images/</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> imooc.com <span class="regexp">*.imooc.com</span>;</span><br><span class="line">	<span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">#return 403;</span></span><br><span class="line">		<span class="attribute">rewrite</span><span class="regexp"> ^/</span> http://www.imooc.com/403.jpg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先确认是否已安装了该模块，没有的话先安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.12.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx ...</span><br></pre></td></tr></table></figure>

<p>传统防盗链存在的问题：伪造 referer。可以使用加密签名解决。</p>
<h5 id="2-加密签名方法"><a href="#2-加密签名方法" class="headerlink" title="2. 加密签名方法"></a>2. 加密签名方法</h5><p>使用第三方模块 HttpAccessKeyModule 实现 nginx 防盗链。</p>
<ul>
<li><code>accesskey on|off</code> 模块开关</li>
<li><code>accesskey_hashmethod md5|sha-1</code> 签名加密方式</li>
<li><code>accesskey_arg</code> GET 参数名称</li>
<li><code>accesskey_signature</code> 加密规则</li>
</ul>
<p>同样，首先要确认已安装该模块。</p>
<p>示例：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|png|flv|swf|rar|zip)$</span></span><br><span class="line"><span class="regexp"></span>&#123;</span><br><span class="line">	<span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> imooc.com <span class="regexp">*.imooc.com</span>;</span><br><span class="line">	<span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attribute">accesskey</span> <span class="literal">on</span>;</span><br><span class="line">		<span class="attribute">accesskey_hashmethod</span> md5;</span><br><span class="line">		<span class="attribute">accesskey_arg</span> <span class="string">&quot;your_arg&quot;</span>;</span><br><span class="line">		<span class="attribute">accesskey_signature</span> <span class="string">&quot;your_pass<span class="variable">$remote_addr</span>&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx 端进行了这样的配置，php 端要相应地做相同的配置，签名才能通过。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$your_arg = md5(<span class="string">&#x27;your_pass&#x27;</span> . $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;address?your_arg=&#x27;</span> . $your_arg . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这种方法基本可以实现完全的防盗链，但是所有的资源文件的路径都要加上一个参数，对于编码来说比较麻烦。两种方式各有利弊，使用哪种方式要视具体业务及情况进行考虑。</p>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发和大流量解决方案]]></title>
      <url>/2018/02/15/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%92%8C%E5%A4%A7%E6%B5%81%E9%87%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>这是慕课网相关课程的学习笔记，在此记录一下，方便查阅。</p>
<blockquote>
<p>真题：PHP如何解决网站大流量和高并发的问题？</p>
</blockquote>
<ol>
<li>考点</li>
</ol>
<ul>
<li>高并发架构相关概念</li>
<li>高并发解决方案案例</li>
</ul>
<a id="more"></a>

<h3 id="1-高并发架构相关概念"><a href="#1-高并发架构相关概念" class="headerlink" title="1. 高并发架构相关概念"></a>1. 高并发架构相关概念</h3><h4 id="1-并发"><a href="#1-并发" class="headerlink" title="1. 并发"></a>1. 并发</h4><blockquote>
<p>在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任意时刻点上只有一个程序在处理机上运行。</p>
</blockquote>
<p>我们所说的高并发：在互联网时代，所讲的并发、高并发，通常是指并发访问。也就是在摸个时间点，有多少个访问同时到来。</p>
<p>通过一个系统的日PV在千万以上，有可能是一个高并发的系统。</p>
<p>高并发具体应该关心什么？</p>
<ul>
<li>QPS：每秒请求或者查询的数量，在互联网领域，指每秒响应请求数（指http请求）；</li>
<li>吞吐量：单位时间内处理的请求数量（通常由QPS和并发数决定）；</li>
<li>响应时间：从请求发出到收到响应花费的时间。例如一个系统处理一个http请求需要100ms，这个100ms就是系统的响应时间；</li>
<li>PV：综合浏览量 page view， 即页面的浏览量或者点击量，访客在24小时内访问的页面数量。刷新页面不计入，同一访客浏览同一网页页面，只记作一次PV；</li>
<li>UV：独立访客 unique visitor；</li>
<li>带宽：计算带宽大小需关注两个指标，峰值流量和页面的平均大小，峰值一般是平均值的倍数，根据实际情况来定；</li>
<li>日网站带宽： PV/统计时间（s）* 平均页面大小（KB）* 8</li>
</ul>
<blockquote>
<p>注意： QPS 不等于 并发连接数。QPS是每秒http请求数量，并发连接数是系统同时处理的请求数量。</p>
</blockquote>
<p>峰值每秒请求数(QPS) = (总PV数 * 80%)/(6小时秒数 * 20%)  即80% 的访问量集中在20% 的时间内。二八定律</p>
<p>压力测试：</p>
<ul>
<li>测试能承受的最大并发数；</li>
<li>测试最大承受的QPS值。</li>
<li></li>
</ul>
<p>常用性能测试工具： ab (apache benchmark) , wrk, http_load, Web Bench</p>
<p>ab的使用：模拟并发请求100次 -c concurrency，总共请求5000次 -n requests。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 100 -n 5000 http:&#x2F;&#x2F;website</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>测试机器与被测试机器分开</li>
<li>不要对线上服务做压力测试</li>
<li>观察测试工具ab所在机器，以及被测试的前端机的CPU、内存、网络等都不超过最高限度的75% （top）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">bogon% ab -c 10 -n 100 https:&#x2F;&#x2F;www.zouzhipeng.com&#x2F;</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;</span><br><span class="line">Licensed to The Apache Software Foundation, http:&#x2F;&#x2F;www.apache.org&#x2F;</span><br><span class="line"></span><br><span class="line">Benchmarking www.zouzhipeng.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx&#x2F;1.10.2</span><br><span class="line">Server Hostname:        www.zouzhipeng.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL&#x2F;TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line">TLS Server Name:        www.zouzhipeng.com</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        41106 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10 （并发数）</span><br><span class="line">Time taken for tests:   33.520 seconds</span><br><span class="line">Complete requests:      100</span><br><span class="line">Failed requests:        0 （失败请求数，成功率95%以上才有意义）</span><br><span class="line">Total transferred:      4134200 bytes</span><br><span class="line">HTML transferred:       4110600 bytes</span><br><span class="line">Requests per second:    2.98 [#&#x2F;sec] (mean) （这个就是QPS）</span><br><span class="line">Time per request:       3352.033 [ms] (mean)</span><br><span class="line">Time per request:       335.203 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          120.44 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:       26  199 300.1     44    1472</span><br><span class="line">Processing:    19 2983 1884.0   2765   11618</span><br><span class="line">Waiting:       16 1327 1079.2   1066    5585</span><br><span class="line">Total:        175 3182 1932.9   2848   11662</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%   2848</span><br><span class="line">  66%   3786</span><br><span class="line">  75%   4321</span><br><span class="line">  80%   4742</span><br><span class="line">  90%   5732</span><br><span class="line">  95%   6377</span><br><span class="line">  98%   8345</span><br><span class="line">  99%  11662</span><br><span class="line"> 100%  11662 (longest request)</span><br></pre></td></tr></table></figure>

<p>QPS如果达到极限，该如何处理？</p>
<p>随着QPS的增长，每个阶段需要根据时间情况来进行优化，优化的方案也与硬件条件、网络带宽息息相关。</p>
<ol>
<li>QPS达到50：可以称之为小型网站，一般的服务器就可以应付，无需优化；</li>
<li>QPS达到100：假设关系型数据库的每次请求在0.01秒完成（理想状态），假设单个页面只有一个sql查询，那么100QPS意味着1秒钟完成100次请求，但是此时并不能保证数据库查询能完成100次。即瓶颈在数据库，方案：数据库缓存层、数据库的负载均衡；</li>
<li>QPS达到800：假设使用百兆带宽，意味着网站的出口实际带宽有8M左右。假设每个页面只有10K，在这个并发条件下，百兆带宽已经吃完。即带宽此时是瓶颈，方案：CDN加速、负载均衡；</li>
<li>QPS达到1000：假设使用redis或memcache缓存数据库查询数据，每个页面对memcache的请求远大于直接对DB的请求，memcache的悲观并发数在20k左右，但有可能在之前内网带宽已经吃完，表现出不稳定。方案：静态HTML缓存；</li>
<li>QPS达到2000：这个级别下，文件系统访问锁都成为了灾难，方案：做业务分离，分布式存储。</li>
</ol>
<p>解决：首先回答怎么测试单击QPS极限值，针对不同的QPS做不同的优化。</p>
<h3 id="高并发解决方案案例"><a href="#高并发解决方案案例" class="headerlink" title="高并发解决方案案例"></a>高并发解决方案案例</h3><h4 id="1-流量优化"><a href="#1-流量优化" class="headerlink" title="1. 流量优化"></a>1. 流量优化</h4><ol>
<li>防盗链处理，将恶意请求拒之门外</li>
</ol>
<h4 id="2-前端优化"><a href="#2-前端优化" class="headerlink" title="2. 前端优化"></a>2. 前端优化</h4><ol>
<li>减少http请求，合并css，合并js，合并图片或将图片转至oss</li>
<li>添加异步请求，不太重要的内容异步处理，事件驱动。</li>
<li>启用浏览器缓存，如 localStorage 和文件压缩，如压缩图片，nginx gzip等</li>
<li>CDN 加速，同时能缓解带宽压力</li>
<li>建立独立的图片服务器、文件服务器，或者使用对象存储</li>
</ol>
<h4 id="3-服务端优化"><a href="#3-服务端优化" class="headerlink" title="3. 服务端优化"></a>3. 服务端优化</h4><ol>
<li>页面静态化，能有效增加QPS和减小服务器压力</li>
<li>并发处理，如多线程异步、队列</li>
</ol>
<h4 id="4-数据库优化"><a href="#4-数据库优化" class="headerlink" title="4. 数据库优化"></a>4. 数据库优化</h4><ol>
<li>数据库缓存，memcache、redis、mongodb等</li>
<li>分库分表、分区操作</li>
<li>读写分离</li>
<li>负载均衡</li>
</ol>
<h4 id="5-web服务器优化"><a href="#5-web服务器优化" class="headerlink" title="5. web服务器优化"></a>5. web服务器优化</h4><ol>
<li>负载均衡，如使用nginx的反向代理</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序用户登录授权逻辑及踩坑]]></title>
      <url>/2018/01/18/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83%E9%80%BB%E8%BE%91%E5%8F%8A%E8%B8%A9%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>小程序的微信登录授权前前后后折腾了有两周，这里记录一下整个流程和踩坑记录。</p>
<h1 id="1-登录时序图"><a href="#1-登录时序图" class="headerlink" title="1. 登录时序图"></a>1. 登录时序图</h1><p>首先祭出官方提供的登录时序图，登录流程主要按照时序图来完成。</p>
<a id="more"></a>

<p><img src="http://omp48p40q.bkt.clouddn.com/18-1-18/77955544.jpg"></p>
<h1 id="2-静默获取用户数据"><a href="#2-静默获取用户数据" class="headerlink" title="2. 静默获取用户数据"></a>2. 静默获取用户数据</h1><h2 id="1-wx-login-登录接口"><a href="#1-wx-login-登录接口" class="headerlink" title="1. wx.login() 登录接口"></a>1. wx.login() 登录接口</h2><p>调用接口获取登录凭证（code）进而换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。</p>
<p>注：调用 login 会引起登录态的刷新，之前的 sessionKey 可能会失效。</p>
<h2 id="2-wx-checkSession-OBJECT"><a href="#2-wx-checkSession-OBJECT" class="headerlink" title="2. wx.checkSession(OBJECT)"></a>2. wx.checkSession(OBJECT)</h2><p>通过上述接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用wx.checkSession接口检测当前用户登录态是否有效。登录态过期后开发者可以再调用wx.login获取新的用户登录态。</p>
<blockquote>
<p>以上两个方法静默调用，直接在 app.js 的 onLaunch 方法使用即可。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;app.js</span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line">    wx.checkSession(&#123;</span><br><span class="line">      success: function () &#123;</span><br><span class="line">        &#x2F;&#x2F;session 未过期，并且在本生命周期一直有效</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: function () &#123;</span><br><span class="line">        &#x2F;&#x2F;登录态过期</span><br><span class="line">        wx.login(&#123; &#x2F;&#x2F;重新登录</span><br><span class="line">          success: function (res) &#123;</span><br><span class="line">            if (res.code) &#123;</span><br><span class="line">              &#x2F;&#x2F;发起网络请求</span><br><span class="line">              this.getSessionKeyFromServer(res.code);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              console.log(&#39;获取用户登录态失败！&#39; + res.errMsg)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3-login-方法成功后返回-code，-为用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用-api，使用-code-换取-openid-和-session-key-等信息"><a href="#3-login-方法成功后返回-code，-为用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用-api，使用-code-换取-openid-和-session-key-等信息" class="headerlink" title="3. login 方法成功后返回 code， 为用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 api，使用 code 换取 openid 和 session_key 等信息"></a>3. login 方法成功后返回 code， 为用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 api，使用 code 换取 openid 和 session_key 等信息</h2><blockquote>
<p>小程序端代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">getSessionKeyFromServer: function (code) &#123;</span><br><span class="line">    var that &#x3D; this;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: &#39;api address&#39;, &#x2F;&#x2F; 我们自己服务器定义的接口地址</span><br><span class="line">      method: &#39;POST&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        code: code,</span><br><span class="line">      &#125;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        console.log(&#39;get session key: &#39;, res.data);</span><br><span class="line">        if (res.data.code &#x3D;&#x3D; 200) &#123;</span><br><span class="line">          &#x2F;&#x2F; 满足一定条件的用户，可以直接获取到 union_id，无需再次去解密</span><br><span class="line">          if (res.data.data.union_id) &#123;</span><br><span class="line">            that.globalData.unionId &#x3D; res.data.data.union_id;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            if (res.data.data.cj_session_key) &#123;</span><br><span class="line">              var cjSessionKey &#x3D; res.data.data.cj_session_key;</span><br><span class="line">              &#x2F;&#x2F; 存入全局变量中，后续获取用户信息会使用到</span><br><span class="line">              that.globalData.cjSessionKey &#x3D; res.data.data.cj_session_key;</span><br><span class="line">              that.globalData.sessionKeyExpiresAt &#x3D; res.data.data.expiresAt;</span><br><span class="line">              &#x2F;&#x2F; that.getUserInfoFromServer(cjSessionKey);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            title: &#39;session 获取失败&#39;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: function (res) &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: &#39;session 获取失败&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>server 端代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public function postSessionKey(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $timestamp &#x3D; (new Carbon())-&gt;timestamp;</span><br><span class="line">    $code &#x3D; trim($request-&gt;input(&#39;code&#39;, &#39;&#39;));</span><br><span class="line">    $flag &#x3D; true;</span><br><span class="line">    $returnData &#x3D; [];</span><br><span class="line"></span><br><span class="line">    if (empty($code)) &#123;</span><br><span class="line">        $this-&gt;markFailed(301, &#39;code 不能为空&#39;);</span><br><span class="line">        $flag &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($flag) &#123;</span><br><span class="line">        $url &#x3D; &#39;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;jscode2session&#39;;</span><br><span class="line">        $curl &#x3D; new Curl();</span><br><span class="line"></span><br><span class="line">        $getData &#x3D; [</span><br><span class="line">            &#39;appid&#39; &#x3D;&gt; &#39;app id&#39;,</span><br><span class="line">            &#39;secret&#39; &#x3D;&gt; &#39;app secret&#39;,</span><br><span class="line">            &#39;js_code&#39; &#x3D;&gt; $code,</span><br><span class="line">            &#39;grant_type&#39; &#x3D;&gt; &#39;authorization_code&#39;,</span><br><span class="line">        ];</span><br><span class="line">        $curl-&gt;get($url, $getData);</span><br><span class="line"></span><br><span class="line">        if ($curl-&gt;httpStatusCode !&#x3D; 200) &#123;</span><br><span class="line">            $this-&gt;markFailed(302, &#39;获取session_key失败&#39;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $response &#x3D; json_decode($curl-&gt;rawResponse, true);</span><br><span class="line">            if (isset($response[&#39;openid&#39;]) &amp;&amp; !empty($response[&#39;openid&#39;])) &#123;</span><br><span class="line">                $openId &#x3D; $response[&#39;openid&#39;];</span><br><span class="line">                $unionId &#x3D; isset($response[&#39;unionid&#39;]) ? $response[&#39;unionid&#39;] : &#39;&#39;;</span><br><span class="line">                $wechatAppUserData &#x3D; [</span><br><span class="line">                    &#39;open_id&#39; &#x3D;&gt; trim($openId),</span><br><span class="line">                    &#39;expires_at&#39; &#x3D;&gt; $response[&#39;expires_in&#39;] + $timestamp,</span><br><span class="line">                    &#39;session_key&#39; &#x3D;&gt; trim($response[&#39;session_key&#39;]),</span><br><span class="line">                    &#39;union_id&#39; &#x3D;&gt; $unionId</span><br><span class="line">                ];</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 生成 3rd_session</span><br><span class="line">                $cjSessionKey &#x3D; $this-&gt;wechatAppUserRepository-&gt;opensslEncrypt($openId . $timestamp);</span><br><span class="line">                $expiresAt &#x3D; Carbon::now()-&gt;addSeconds($response[&#39;expires_in&#39;])-&gt;addWeek();</span><br><span class="line">                &#x2F;&#x2F; 所需的数据存入 redis 缓存</span><br><span class="line">                Cache::put(md5($cjSessionKey), $wechatAppUserData, $expiresAt);</span><br><span class="line">                $returnData &#x3D; [</span><br><span class="line">                    &#39;cj_session_key&#39; &#x3D;&gt; $cjSessionKey, </span><br><span class="line">                    &#39;expiresAt&#39; &#x3D;&gt; $expiresAt, </span><br><span class="line">                    &#39;union_id&#39; &#x3D;&gt; $unionId</span><br><span class="line">                ];</span><br><span class="line">                $this-&gt;markSuccess();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $this-&gt;markFailed(302, &#39;获取session_key失败&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;returnData[&#39;data&#39;] &#x3D; $returnData;</span><br><span class="line">    return $this-&gt;returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-如果需要获取-openid，unionid-等更多用户数据需要用户授权后才能拿到"><a href="#3-如果需要获取-openid，unionid-等更多用户数据需要用户授权后才能拿到" class="headerlink" title="3. 如果需要获取 openid，unionid 等更多用户数据需要用户授权后才能拿到"></a>3. 如果需要获取 openid，unionid 等更多用户数据需要用户授权后才能拿到</h1><h2 id="1-wx-authorize-OBJECT"><a href="#1-wx-authorize-OBJECT" class="headerlink" title="1. wx.authorize(OBJECT)"></a>1. wx.authorize(OBJECT)</h2><p>提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可以通过 wx.getSetting 先查询一下用户是否授权了 &quot;scope.userInfo&quot; 这个 scope</span><br><span class="line">wx.getSetting(&#123;</span><br><span class="line">  success(res) &#123;</span><br><span class="line">    if (!res.authSetting[&#39;scope.userInfo&#39;]) &#123;</span><br><span class="line">      wx.authorize(&#123;</span><br><span class="line">        scope: &#39;scope.userInfo&#39;,</span><br><span class="line">        success() &#123;</span><br><span class="line">          &#x2F;&#x2F; 用户已经同意小程序使用用户信息功能，后续调用 wx.getUserInfo 接口不会弹窗询问</span><br><span class="line">          wx.getUserInfo()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-wx-getUserInfo-OBJECT"><a href="#2-wx-getUserInfo-OBJECT" class="headerlink" title="2. wx.getUserInfo(OBJECT)"></a>2. wx.getUserInfo(OBJECT)</h2><p>获取用户信息，withCredentials 为 true 时需要先调用 wx.login 接口。</p>
<p>在合适的时机，调用该方法，弹窗用户授权窗口，用户点击同意后进行后续操作。同时必须要完成用户拒绝的逻辑。</p>
<p>需要传入小程序本地的 sessionKey （全局变量中， 先根据全局变量的 sessionKeyExpiresAt 判断是否过期，如已过期，需要重新调用 login 方法获取新的），服务端拿到sessionKey后从缓存中取得用户的 session_key，才可以进行后续的操作。</p>
<blockquote>
<p>小程序端代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">getUserInfoFromServer: function (cjSessionKey) &#123;</span><br><span class="line">    var that &#x3D; this;</span><br><span class="line">    wx.getUserInfo(&#123;</span><br><span class="line">      withCredentials: true,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        that.globalData.userInfo &#x3D; res.userInfo;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url: &#39;api userinfo address&#39;,</span><br><span class="line">          method: &#39;POST&#39;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            iv: res.iv,</span><br><span class="line">            cjSessionKey: cjSessionKey,</span><br><span class="line">            encryptedData: res.encryptedData</span><br><span class="line">          &#125;,</span><br><span class="line">          success: function (res) &#123;</span><br><span class="line">            if (res.data.code !&#x3D; 200) &#123;</span><br><span class="line">              wx.showToast(&#123;</span><br><span class="line">                title: res.data.msg,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              that.globalData.unionId &#x3D; res.data.data.union_id;</span><br><span class="line">              that.globalData.userId &#x3D; res.data.data.user_id;</span><br><span class="line">              that.globalData.password &#x3D; res.data.data.password;</span><br><span class="line">              that.globalData.username &#x3D; res.data.data.username;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: function () &#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title: &#39;服务器连接失败&#39;,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: function (res) &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务端代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public function postUserInfo(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $iv &#x3D; trim($request-&gt;input(&#39;iv&#39;, &#39;&#39;));</span><br><span class="line">    $cjSessionKey &#x3D; trim($request-&gt;input(&#39;cjSessionKey&#39;, &#39;&#39;));</span><br><span class="line">    $encryptedData &#x3D; trim($request-&gt;input(&#39;encryptedData&#39;, &#39;&#39;));</span><br><span class="line">    $ip &#x3D; getClientIp();</span><br><span class="line">    $flag &#x3D; true;</span><br><span class="line">    $source &#x3D; &#39;mina&#39;;</span><br><span class="line">    $returnData &#x3D; [];</span><br><span class="line"></span><br><span class="line">    if (empty($iv)) &#123;</span><br><span class="line">        $this-&gt;markFailed(303, &#39;iv 不能为空&#39;);</span><br><span class="line">        $flag &#x3D; false;</span><br><span class="line">    &#125; elseif (empty($cjSessionKey)) &#123;</span><br><span class="line">        $this-&gt;markFailed(304, &#39;cjSessionKey 不能为空&#39;);</span><br><span class="line">        $flag &#x3D; false;</span><br><span class="line">    &#125; elseif (empty($encryptedData)) &#123;</span><br><span class="line">        $this-&gt;markFailed(305, &#39;encryptedData 不能为空&#39;);</span><br><span class="line">        $flag &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($flag) &#123;</span><br><span class="line">        $sessionData &#x3D; Cache::get(md5($cjSessionKey));</span><br><span class="line">        if (empty($sessionData)) &#123;</span><br><span class="line">            $this-&gt;markFailed(306, &#39;session 信息已过期&#39;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $sessionKey &#x3D; $sessionData[&#39;session_key&#39;];</span><br><span class="line">            $configData &#x3D; config(&#39;mina&#39;);</span><br><span class="line">            $data &#x3D; null;</span><br><span class="line"></span><br><span class="line">            $pc &#x3D; new WXBizDataCrypt($configData[&#39;app_id&#39;], trim($sessionKey));</span><br><span class="line">            $errorCode &#x3D; $pc-&gt;decryptData($encryptedData, $iv, $data);</span><br><span class="line"></span><br><span class="line">            $cLogModel-&gt;addInfo(&#39;解密后的 code: &#39; . $errorCode);</span><br><span class="line">            $cLogModel-&gt;addInfo(&#39;解密后的 data: &#39; . $data);</span><br><span class="line"></span><br><span class="line">            if ($errorCode &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                $userInfo &#x3D; json_decode($data, true);</span><br><span class="line">                &#x2F;&#x2F; 处理自己的业务逻辑，这里没有 unionId 不处理</span><br><span class="line">                if (isset($userInfo[&#39;unionId&#39;]) &amp;&amp;</span><br><span class="line">                    !empty($userInfo[&#39;unionId&#39;]) &amp;&amp;</span><br><span class="line">                    !empty($userInfo[&#39;watermark&#39;]) &amp;&amp;</span><br><span class="line">                    !empty($userInfo[&#39;watermark&#39;][&#39;appid&#39;]) &amp;&amp;</span><br><span class="line">                    $userInfo[&#39;watermark&#39;][&#39;appid&#39;] &#x3D;&#x3D; $configData[&#39;app_id&#39;]</span><br><span class="line">                ) &#123;</span><br><span class="line">                    $unionId &#x3D; $userInfo[&#39;unionId&#39;];</span><br><span class="line">                    </span><br><span class="line">                    if (condition) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 已经在平台注册，取出用户基本数据并返回</span><br><span class="line">                        $returnData &#x3D; [</span><br><span class="line">                            &#39;user_id&#39; &#x3D;&gt; &#39;data user id&#39;,</span><br><span class="line">                            &#39;username&#39; &#x3D;&gt; &#39;data username&#39;,</span><br><span class="line">                            &#39;password&#39; &#x3D;&gt; &#39;data password&#39;,</span><br><span class="line">                            &#39;union_id&#39; &#x3D;&gt; $unionId</span><br><span class="line">                        ];</span><br><span class="line">                        $this-&gt;markSuccess();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        &#x2F;&#x2F; 没有在平台注册，模拟注册，基本数据返回</span><br><span class="line">                        $returnData &#x3D; [</span><br><span class="line">                            &#39;user_id&#39; &#x3D;&gt; &#39;data user id&#39;,</span><br><span class="line">                            &#39;username&#39; &#x3D;&gt; &#39;data username&#39;,</span><br><span class="line">                            &#39;password&#39; &#x3D;&gt; &#39;data password&#39;,</span><br><span class="line">                            &#39;union_id&#39; &#x3D;&gt; $unionId</span><br><span class="line">                        ];</span><br><span class="line">                        $this-&gt;markSuccess();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $this-&gt;markFailed(310, &#39;appid 不匹配&#39;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $this-&gt;markFailed(307, &#39;encryptedData 解密失败&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;returnData[&#39;data&#39;] &#x3D; $returnData;</span><br><span class="line">    return $this-&gt;returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="4-大坑"><a href="#4-大坑" class="headerlink" title="4. 大坑"></a>4. 大坑</h1><h2 id="1-UnionID机制说明"><a href="#1-UnionID机制说明" class="headerlink" title="1. UnionID机制说明"></a>1. UnionID机制说明</h2><p>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过unionid来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的unionid是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。</p>
<p>同一个微信开放平台下的相同主体的App、公众号、小程序，如果用户已经关注公众号，或者曾经登录过App或公众号，则用户打开小程序时，开发者可以直接通过wx.login获取到该用户UnionID，无须用户再次授权。</p>
<blockquote>
<p>需要到微信开发平台绑定小程序之后才能拿到 unionid</p>
</blockquote>
<h2 id="2-加密数据解密算法"><a href="#2-加密数据解密算法" class="headerlink" title="2. 加密数据解密算法"></a>2. 加密数据解密算法</h2><p>微信官方提供了多种编程语言的示例代码（<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/demo/aes-sample.zip">点击下载</a>）。每种语言类型的接口名字均一致。调用方式可以参照示例。</p>
<p>这里提供的PHP代码，首先编码格式就有问题，完全无法使用。需要复制出来以项目所用的编码方式重新进行保存。</p>
<p>类 WXBizDataCrypt 的构造方法需要改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __construct($appid, $sessionKey)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;sessionKey &#x3D; $sessionKey;</span><br><span class="line">    $this-&gt;appid &#x3D; $appid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法见上面的服务端代码。</p>
]]></content>
      
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shadowsocks 配置用法教程]]></title>
      <url>/2017/12/08/Shadowsocks-%E9%85%8D%E7%BD%AE%E7%94%A8%E6%B3%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>下载所需平台（Android, iOS, Mac, Windows）的应用</p>
<p>打包下载地址1： <a href="http://zouzhipeng.com/ss/ssVPN.7z">http://zouzhipeng.com/ss/ssVPN.7z</a></p>
<p>打包下载地址2： 链接:<a href="https://pan.baidu.com/s/1geWkOWb">https://pan.baidu.com/s/1geWkOWb</a>  密码:qhmz</p>
<p>单个下载：</p>
<ol>
<li>win7: <a href="http://zouzhipeng.com/ss/win7.zip">http://zouzhipeng.com/ss/win7.zip</a></li>
<li>win8: <a href="http://zouzhipeng.com/ss/win8.zip">http://zouzhipeng.com/ss/win8.zip</a></li>
<li>win10: <a href="http://zouzhipeng.com/ss/win10.zip">http://zouzhipeng.com/ss/win10.zip</a></li>
<li>Mac: <a href="http://zouzhipeng.com/ss/mac.zip">http://zouzhipeng.com/ss/mac.zip</a></li>
<li>Android: <a href="http://zouzhipeng.com/ss/shadowsocks-nightly-4.2.5.apk">http://zouzhipeng.com/ss/shadowsocks-nightly-4.2.5.apk</a></li>
<li>iOS: AppStore</li>
<li>android 用户推荐使用<a href="http://zouzhipeng.com/ss/APKPure_v2.3.1_apkpure.com.apk">这个</a>下载应用，无论是国内应用还是国外应用</li>
</ol>
<a id="more"></a>

<h2 id="1-android"><a href="#1-android" class="headerlink" title="1. android"></a>1. android</h2><p><img src="http://omp48p40q.bkt.clouddn.com/17-12-8/12164971.jpg"></p>
<h2 id="2-iOS"><a href="#2-iOS" class="headerlink" title="2. iOS"></a>2. iOS</h2><p>2017-12-16 补充： srrconnectpro 的扫码功能不太好用，推荐使用下面两个。配置方法相同。 直接扫码更方便快捷，密码太容易输错了。。。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-12-16/5580234.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-12-8/74659104.jpg"></p>
<h2 id="3-Mac"><a href="#3-Mac" class="headerlink" title="3. Mac"></a>3. Mac</h2><p><img src="http://omp48p40q.bkt.clouddn.com/17-12-8/46512741.jpg"></p>
<h2 id="4-Windows"><a href="#4-Windows" class="headerlink" title="4. Windows"></a>4. Windows</h2><p><img src="http://omp48p40q.bkt.clouddn.com/17-12-8/11108434.jpg"></p>
]]></content>
      
        <categories>
            
            <category> trivia </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几个PHP数组处理方法 & 几个常用的其他方法]]></title>
      <url>/2017/12/05/%E5%87%A0%E4%B8%AAPHP%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>记录几个常用的处理PHP数组的方法，方便查用。</p>
<ol>
<li>二维数组按某一字段去重</li>
<li>二维数组按多个字段去重</li>
<li>二维数组按某一字段排序</li>
<li>二维数组按多个字段排序</li>
</ol>
<a id="more"></a>

<h2 id="1-二维数组按某一字段去重"><a href="#1-二维数组按某一字段去重" class="headerlink" title="1. 二维数组按某一字段去重"></a>1. 二维数组按某一字段去重</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @comment 二维数组按某一字段去重</span><br><span class="line"> * @param array $arr</span><br><span class="line"> * @param string $field</span><br><span class="line"> * @return array</span><br><span class="line"> * @author zzp</span><br><span class="line"> * @date 2017-12-05</span><br><span class="line"> *&#x2F;</span><br><span class="line">function getUniqueFromTwoDimensionalArray($arr, $field)</span><br><span class="line">&#123;</span><br><span class="line">    $result &#x3D; [];</span><br><span class="line">    foreach ($arr as $item) &#123;</span><br><span class="line">        if (is_array($item)) &#123;</span><br><span class="line">            $rKey &#x3D; $item[$field];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $rKey &#x3D; $item-&gt;$field;</span><br><span class="line">        &#125;</span><br><span class="line">        $result[$rKey] &#x3D; $item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return array_values($result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="2-二维数组按多个字段去重"><a href="#2-二维数组按多个字段去重" class="headerlink" title="2. 二维数组按多个字段去重"></a>2. 二维数组按多个字段去重</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @comment 二维数组&#x2F;对象按一个&#x2F;多个字段去重</span><br><span class="line"> * @param array|object $arr</span><br><span class="line"> * @param string|array $filed</span><br><span class="line"> * @return array</span><br><span class="line"> * @author zzp</span><br><span class="line"> * @date 2017-12-14</span><br><span class="line"> *&#x2F;</span><br><span class="line">function getUniqueArr($arr, $filed)</span><br><span class="line">&#123;</span><br><span class="line">    $result &#x3D; [];</span><br><span class="line">    if (is_string($filed)) &#123;</span><br><span class="line">        $filed &#x3D; [$filed];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach ($arr as $item) &#123;</span><br><span class="line">        if (is_array($item)) &#123;</span><br><span class="line">            $rKey &#x3D; &#39;&#39;;</span><br><span class="line">            foreach ($filed as $key) &#123;</span><br><span class="line">                $rKey .&#x3D; md5($item[$key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 对象</span><br><span class="line">            $rKey &#x3D; &#39;&#39;;</span><br><span class="line">            foreach ($filed as $key) &#123;</span><br><span class="line">                $rKey .&#x3D; md5($item-&gt;$key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $result[$rKey] &#x3D; $item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return array_values($result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-二维数组按某一字段排序"><a href="#3-二维数组按某一字段排序" class="headerlink" title="3. 二维数组按某一字段排序"></a>3. 二维数组按某一字段排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @comment 二维数组排序</span><br><span class="line"> * 用法：sortTwoDimensionalArray($arr, $filed, $direction &#x3D; &#39;SORT_DESC&#39;)</span><br><span class="line"> * @param array $arr</span><br><span class="line"> * @param string $filed 排序字段</span><br><span class="line"> * @param string $direction 排序顺序标志 SORT_DESC 降序；SORT_ASC 升序</span><br><span class="line"> * @author zzp</span><br><span class="line"> * @date 2017-12-05</span><br><span class="line"> *&#x2F;</span><br><span class="line">function sortTwoDimensionalArray($arr, $filed, $direction &#x3D; &#39;SORT_DESC&#39;)</span><br><span class="line">&#123;</span><br><span class="line">    $args &#x3D; func_get_args();</span><br><span class="line">    $arrSort &#x3D; [];</span><br><span class="line">    foreach ($arr AS $uniqid &#x3D;&gt; $row) &#123;</span><br><span class="line">        foreach ($row AS $key &#x3D;&gt; $value) &#123;</span><br><span class="line">            $arrSort[$key][$uniqid] &#x3D; $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($direction) &#123;</span><br><span class="line">        array_multisort($arrSort[$filed], constant($direction), $arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-二维数组按多个字段排序"><a href="#4-二维数组按多个字段排序" class="headerlink" title="4. 二维数组按多个字段排序"></a>4. 二维数组按多个字段排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @comment 二维数组根据多个字段排序，类似mysql中的多个 order by</span><br><span class="line"> * 用法： sortArrByManyField($arr, &#39;age&#39;, SORT_DESC, &#39;id&#39;, SORT_ASC, &#39;id&#39;, SORT_DESC)</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> * @throws Exception</span><br><span class="line"> * @author zzp</span><br><span class="line"> * @date 2017-12-05</span><br><span class="line"> *&#x2F;</span><br><span class="line">function sortArrByManyField()</span><br><span class="line">&#123;</span><br><span class="line">    $args &#x3D; func_get_args();</span><br><span class="line">    if (empty($args)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    $arr &#x3D; array_shift($args);</span><br><span class="line">    if (!is_array($arr)) &#123;</span><br><span class="line">        throw new Exception(&quot;第一个参数不为数组&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach ($args as $key &#x3D;&gt; $field) &#123;</span><br><span class="line">        if (is_string($field)) &#123;</span><br><span class="line">            $temp &#x3D; [];</span><br><span class="line">            foreach ($arr as $index &#x3D;&gt; $val) &#123;</span><br><span class="line">                $temp[$index] &#x3D; $val[$field];</span><br><span class="line">            &#125;</span><br><span class="line">            $args[$key] &#x3D; $temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $args[] &#x3D; &amp;$arr; &#x2F;&#x2F; 引用值</span><br><span class="line">    call_user_func_array(&#39;array_multisort&#39;, $args);</span><br><span class="line">    return array_pop($args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="5-如果路径不存在，自动创建"><a href="#5-如果路径不存在，自动创建" class="headerlink" title="5. 如果路径不存在，自动创建"></a>5. 如果路径不存在，自动创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 如果路径不存在，自动创建</span><br><span class="line"> * @param $filePath</span><br><span class="line"> * User: zzp</span><br><span class="line"> * Date: 2017-03-13</span><br><span class="line"> * @return bool</span><br><span class="line"> *&#x2F;</span><br><span class="line">function autoMakeDir($filePath)</span><br><span class="line">&#123;</span><br><span class="line">    if (!file_exists($filePath)) &#123;</span><br><span class="line">        mkdir($filePath, 0777, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-自动删除文件"><a href="#6-自动删除文件" class="headerlink" title="6. 自动删除文件"></a>6. 自动删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function autoUnlink($file)</span><br><span class="line">&#123;</span><br><span class="line">    if (file_exists($file)) &#123;</span><br><span class="line">        unlink($file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="7-获取IP地址"><a href="#7-获取IP地址" class="headerlink" title="7. 获取IP地址"></a>7. 获取IP地址</h2><p>由于服务器nginx代理的缘故 先通过 header 拿到真实ip</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function getClientIp()</span><br><span class="line">&#123;</span><br><span class="line">    if (isset($_SERVER[&#39;HTTP_X_REAL_IP&#39;])) &#123;</span><br><span class="line">        return $_SERVER[&#39;HTTP_X_REAL_IP&#39;];</span><br><span class="line">    &#125; elseif (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) &#123;</span><br><span class="line">        return $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return request()-&gt;getClientIp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-递归显示当前指定目录下所有文件"><a href="#8-递归显示当前指定目录下所有文件" class="headerlink" title="8. 递归显示当前指定目录下所有文件"></a>8. 递归显示当前指定目录下所有文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 使用dir函数</span><br><span class="line"> * @param string $dir 目录地址</span><br><span class="line"> * @param boolean $recursion 是否递归</span><br><span class="line"> * @return array $files 文件列表</span><br><span class="line"> *&#x2F;</span><br><span class="line">function getFiles($dir, $recursion &#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">    $files &#x3D; array();</span><br><span class="line"></span><br><span class="line">    if (!is_dir($dir)) &#123;</span><br><span class="line">        return $files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $d &#x3D; dir($dir);</span><br><span class="line">    while (false !&#x3D;&#x3D; ($file &#x3D; $d-&gt;read())) &#123;</span><br><span class="line">        if ($file !&#x3D; &#39;.&#39; &amp;&amp; $file !&#x3D; &#39;..&#39;) &#123;</span><br><span class="line">            $filename &#x3D; $dir . &quot;&#x2F;&quot; . $file;</span><br><span class="line"></span><br><span class="line">            if (is_file($filename)) &#123;</span><br><span class="line">                $files[] &#x3D; $filename;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if ($recursion) &#123;</span><br><span class="line">                    $files &#x3D; array_merge($files, getFiles($filename, $recursion));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $d-&gt;close();</span><br><span class="line">    return $files;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="9-文章的分享内容"><a href="#9-文章的分享内容" class="headerlink" title="9. 文章的分享内容"></a>9. 文章的分享内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function getShareContent($str, $length &#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 把 video 标签中的 &quot;你的浏览器不支持Video标签&quot; 文字去掉</span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;&lt;video[\s\S]*&lt;\&#x2F;video&gt;&#x2F;&#39;;</span><br><span class="line">    $str &#x3D; preg_replace($pattern, &#39;&#39;, $str);</span><br><span class="line">    $str &#x3D; html_entity_decode(strip_tags($str));</span><br><span class="line">    $str &#x3D; str_replace(PHP_EOL, &#39;&#39;, $str);</span><br><span class="line">    $strArray &#x3D; array(&quot; &quot;, &quot;　&quot;, &quot;\t&quot;, &quot;\n&quot;, &quot;\r&quot;, &quot;&amp;hellip;&quot;, &quot;&amp;mdash;&quot;);</span><br><span class="line">    $str &#x3D; str_replace($strArray, &#39;&#39;, $str);</span><br><span class="line">    $str &#x3D; str_replace(&quot;&#39;&quot;, &#39;&quot;&#39;, $str);</span><br><span class="line">    $str &#x3D; trim(str_replace(chr(194) . chr(160), &#39;&#39;, $str)); &#x2F;&#x2F;shungao20171124 修复UFT8转码特殊字符问题</span><br><span class="line">    if (empty($length) &amp;&amp; mb_strlen($str) &gt; 120) &#123;</span><br><span class="line">        $str &#x3D; mb_substr($str, 0, 120, &#39;utf-8&#39;) . &#39;...&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (empty($str)) &#123;</span><br><span class="line">        $str &#x3D; &#39;来自...&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-是否为微信内"><a href="#10-是否为微信内" class="headerlink" title="10. 是否为微信内"></a>10. 是否为微信内</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function isWechat()</span><br><span class="line">&#123;</span><br><span class="line">    $ua &#x3D; isset($_SERVER[&#39;HTTP_USER_AGENT&#39;]) ? $_SERVER[&#39;HTTP_USER_AGENT&#39;] : &quot;&quot;;</span><br><span class="line">    return true &#x3D;&#x3D; strpos($ua, &#39;MicroMessenger&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="11-mm"><a href="#11-mm" class="headerlink" title="11. mm"></a>11. mm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (!function_exists(&#39;mm&#39;)) &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Dump the passed variables and end the script.</span><br><span class="line">     *</span><br><span class="line">     * @param  mixed</span><br><span class="line">     * @return void</span><br><span class="line">     *&#x2F;</span><br><span class="line">    function mm()</span><br><span class="line">    &#123;</span><br><span class="line">        array_map(function ($x) &#123;</span><br><span class="line">            (new \Illuminate\Support\Debug\Dumper)-&gt;dump($x);</span><br><span class="line">        &#125;, func_get_args());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="12-is-empty"><a href="#12-is-empty" class="headerlink" title="12. is_empty"></a>12. is_empty</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (!function_exists(&#39;is_empty&#39;)) &#123;</span><br><span class="line">    function is_empty($obj)</span><br><span class="line">    &#123;</span><br><span class="line">        if (empty($obj)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($obj instanceof Illuminate\Support\Collection) &#123;</span><br><span class="line">            $items &#x3D; $obj-&gt;all();</span><br><span class="line">            return empty($items);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="13-字符串转16进制"><a href="#13-字符串转16进制" class="headerlink" title="13. 字符串转16进制"></a>13. 字符串转16进制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @comment 字符串转16进制</span><br><span class="line"> * @param $string</span><br><span class="line"> * @return string</span><br><span class="line"> * @author zzp</span><br><span class="line"> * @date 2017-12-12</span><br><span class="line"> *&#x2F;</span><br><span class="line">function strToHex($string)</span><br><span class="line">&#123;</span><br><span class="line">    $hex &#x3D; &#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($string); $i++) &#123;</span><br><span class="line">        $ord &#x3D; ord($string[$i]);</span><br><span class="line">        $hexCode &#x3D; dechex($ord);</span><br><span class="line">        $hex .&#x3D; substr(&#39;0&#39; . $hexCode, -2);</span><br><span class="line">    &#125;</span><br><span class="line">    return strToUpper($hex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-判断两个时间段是否有重叠"><a href="#14-判断两个时间段是否有重叠" class="headerlink" title="14. 判断两个时间段是否有重叠"></a>14. 判断两个时间段是否有重叠</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;jjyy.de&#x2F;post&#x2F;judge-two-date-range-is-overlap.html</span><br><span class="line">function timeIsOverlap($timeAStart, $timeAEnd, $timeBStart, $timeBEnd)</span><br><span class="line">&#123;</span><br><span class="line">    return !($timeAEnd &lt; $timeBStart || $timeBEnd &lt; $timeAStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近遇到的一些小问题 201711]]></title>
      <url>/2017/11/28/%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98-201711/</url>
      <content type="html"><![CDATA[<h2 id="1-Laravel"><a href="#1-Laravel" class="headerlink" title="1. Laravel"></a>1. Laravel</h2><h3 id="1-TokenMismatchException-in-VerifyCsrfToken-php"><a href="#1-TokenMismatchException-in-VerifyCsrfToken-php" class="headerlink" title="1. TokenMismatchException in VerifyCsrfToken.php"></a>1. TokenMismatchException in VerifyCsrfToken.php</h3><p>这个问题很常见，在html中添加 csrf_token 也无效的话，考虑以下解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf storage&#x2F;framework&#x2F;sessions&#x2F;*</span><br><span class="line">sudo php artisan cache:clear</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-Tinker"><a href="#2-Tinker" class="headerlink" title="2. Tinker"></a>2. Tinker</h3><p>database/factories/ModelFactory 里的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$factory-&gt;define(App\User::class, function (Faker\Generator $faker) &#123;</span><br><span class="line">    static $password;</span><br><span class="line"></span><br><span class="line">    return [</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; $faker-&gt;name,</span><br><span class="line">        &#39;email&#39; &#x3D;&gt; $faker-&gt;unique()-&gt;safeEmail,</span><br><span class="line">        &#39;mobile&#39; &#x3D;&gt; $faker-&gt;phoneNumber,</span><br><span class="line">        &#39;password&#39; &#x3D;&gt; $password ?: $password &#x3D; bcrypt(&#39;secret&#39;),</span><br><span class="line">        &#39;remember_token&#39; &#x3D;&gt; str_random(10),</span><br><span class="line">        &#39;forum_id&#39; &#x3D;&gt; function () &#123;</span><br><span class="line">            return factory(\App\Forum::class)-&gt;create()-&gt;id;</span><br><span class="line">        &#125;,</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan tinker </span><br><span class="line">factory(App\User::class, 10)-&gt;create();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：修改代码后需退出再重新进</p>
</blockquote>
<h2 id="2-Mysql"><a href="#2-Mysql" class="headerlink" title="2. Mysql"></a>2. Mysql</h2><h3 id="1-重置表格索引"><a href="#1-重置表格索引" class="headerlink" title="1. 重置表格索引"></a>1. 重置表格索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;files&#96; auto_increment&#x3D;1 </span><br></pre></td></tr></table></figure>

<h3 id="2-mysql-选择出多个字段，按其中某个字段distinct"><a href="#2-mysql-选择出多个字段，按其中某个字段distinct" class="headerlink" title="2. mysql 选择出多个字段，按其中某个字段distinct"></a>2. mysql 选择出多个字段，按其中某个字段distinct</h3><p>要通过count 和 group的组合来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT field_name, other_field_name_1, other_field_name_2, ... ,other_field_name_n, count(field_name) from table_name where where_conditions group by field_name</span><br></pre></td></tr></table></figure>

<h3 id="3-月份实现"><a href="#3-月份实现" class="headerlink" title="3. 月份实现"></a>3. 月份实现</h3><p>datediff 函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select round(datediff(date1, date2)&#x2F;30) from table_name;</span><br></pre></td></tr></table></figure>

<h3 id="4-正则"><a href="#4-正则" class="headerlink" title="4.正则"></a>4.正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from acct_member where email regexp &#39;^[0-9]&#123;11&#125;@virtualAccount.com$&#39; limit 10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：\d 等在mysql不好用，替换成别的，如[0-9]+</p>
</blockquote>
<h3 id="5-mysql-连表更新数据"><a href="#5-mysql-连表更新数据" class="headerlink" title="5. mysql 连表更新数据"></a>5. mysql 连表更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE  p_order_article p</span><br><span class="line">LEFT JOIN</span><br><span class="line">        acct_member a</span><br><span class="line">ON      p.username &#x3D; a.email</span><br><span class="line">SET     p.user_id &#x3D; a.uid</span><br><span class="line">WHERE  a.email&lt;&gt;&#39;&#39; and p.user_id&#x3D;0</span><br></pre></td></tr></table></figure>

<h2 id="3-前端"><a href="#3-前端" class="headerlink" title="3. 前端"></a>3. 前端</h2><h3 id="1-jquery-validation-验证-select-下拉框"><a href="#1-jquery-validation-验证-select-下拉框" class="headerlink" title="1. jquery-validation 验证 select 下拉框"></a>1. jquery-validation 验证 select 下拉框</h3><p>需要使用自定义方法，<a href="http://stackoverflow.com/questions/241145/jquery-validate-plugin-how-to-create-a-simple-custom-rule">网址</a></p>
<h3 id="2-textarea"><a href="#2-textarea" class="headerlink" title="2. textarea"></a>2. textarea</h3><p>在使用表单中的textarea标签时，有以下需要注意的地方：</p>
<ul>
<li><p>去掉右侧滚动条：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea  style&#x3D; &quot;overflow:hidden;&quot;&gt; &lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>去掉右下角的拖拽标记：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea  style&#x3D; &quot;resize:none;&quot;&gt; &lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>textarea文本域宽度和高度（width、height）自动适应变化处理</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 控制宽度的自动适应 --&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.comments &#123;</span><br><span class="line"> width:100%;&#x2F;*自动适应父布局宽度*&#x2F;</span><br><span class="line"> overflow:auto;</span><br><span class="line"> word-break:break-all;&#x2F;*在ie中解决断行问题(防止自动变为在一行显示，主要解决ie兼容问题，ie8中当设宽度为100%时，文本域类容超过一行时，当我们双击文本内容就会自动变为一行显示，所以只能用ie的专有断行属性“word-break或word-wrap”控制其断行)*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 主要控制高度的自动适应 --&gt;</span><br><span class="line">&lt;!-- 第一个是普通textarea --&gt;</span><br><span class="line">&lt;textarea class&#x3D;&quot;comments&quot; rows&#x3D;&quot;10&quot; cols&#x3D;&quot;10&quot;&gt; &lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;!-- 以下两种方式都可以解决textarea行高自动适应类容的高度 --&gt;</span><br><span class="line">&lt;textarea class&#x3D;&quot;comments&quot; rows&#x3D;1   name&#x3D;s1   cols&#x3D;27   onpropertychange&#x3D; &quot;this.style.posHeight&#x3D;this.scrollHeight &quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line">&lt;textarea class&#x3D;&quot;comments&quot; style&#x3D;&quot;height:expression((this.scrollHeight&gt;150)?&#39;150px&#39;:(this.scrollHeight+5)+&#39;px&#39;);overflow:auto;&quot;&gt;&lt;&#x2F;textarea&gt; </span><br></pre></td></tr></table></figure>

<h2 id="4-Linux-amp-PHP"><a href="#4-Linux-amp-PHP" class="headerlink" title="4. Linux &amp; PHP"></a>4. Linux &amp; PHP</h2><h3 id="1-查找大文件"><a href="#1-查找大文件" class="headerlink" title="1. 查找大文件"></a>1. 查找大文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -size +100M -exec ls -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果想直接删除大于50M的文件，使用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -size +50M -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
</li>
<li><p>本目录下文件大小排序并取前十个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lSh | head -10</span><br></pre></td></tr></table></figure>
<p><a href="https://teakki.com/p/57dbcd8f57cd1ab2139a72d3">这里</a>有详细的教程和案例。</p>
</li>
</ul>
<h3 id="2-PHP的-file-exists-is-dir-is-file"><a href="#2-PHP的-file-exists-is-dir-is-file" class="headerlink" title="2. PHP的 file_exists = is_dir + is_file"></a>2. PHP的 <code>file_exists = is_dir + is_file</code></h3><p>它既可以判断文件是否存在，又可以判断目录是否存在。但这样一个全面的函数执行效率非常低，就像asp中request不指定是form，还是get,cookies，所以结论是：</p>
<ul>
<li>如果要判断目录是否存在，请用独立函数 is_dir(directory)</li>
<li>如果要判断文件是否存在，请用独立函数 is_file(filepath)</li>
</ul>
<p>is_file 只判断文件是否存在；<br>file_exists 判断文件是否存在或者是目录是否存在；<br>is_dir 判断目录是否存在；</p>
<p>查看手册，虽然这两个函数的结果都会被缓存，但是is_file却快了N倍。<br>还有一个值得注意的：<br>文件存在的情况下，is_file比file_exists要快N倍；<br>文件不存在的情况下，is_file比file_exists要慢；<br>结论是，file_exits函数并不会因为该文件是否真的存在而影响速度，但是is_file影响就大了。</p>
<h3 id="3-Laravel-使用-model-方式取数据，标记为-deleted-at-的记录也取出来了，如何避免"><a href="#3-Laravel-使用-model-方式取数据，标记为-deleted-at-的记录也取出来了，如何避免" class="headerlink" title="3. Laravel 使用 model 方式取数据，标记为 deleted_at 的记录也取出来了，如何避免"></a>3. Laravel 使用 model 方式取数据，标记为 deleted_at 的记录也取出来了，如何避免</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App;</span><br><span class="line">use Illuminate\Database\Eloquent\Model as EloquentModel;</span><br><span class="line">use Illuminate\Database\Eloquent\SoftDeletes;</span><br><span class="line">class Model extends EloquentModel</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        parent::__construct();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>加入 <code>parent::__contstruct()</code>， 就可以了<br>这就带来一个问题， 每个Model 的 fillable 字段都要填一遍了<br>老老实实写 fillable吧 ，为了安全<br>其实删掉 construct 就好了，怪了（有待确认）</p>
<h3 id="4-修改php文件上传2M的限制"><a href="#4-修改php文件上传2M的限制" class="headerlink" title="4. 修改php文件上传2M的限制"></a>4. 修改php文件上传2M的限制</h3><p>首先找到当前使用的PHP配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which php.ini is being used</span><br><span class="line">php -i|grep &#39;php.ini&#39;</span><br></pre></td></tr></table></figure>

<p>实践证明，这种方法不靠谱，最好的方法还是在页面中打印出 <code>phpinfo()</code>， 找到 <code>Loaded Configuration File</code> 即可</p>
<p>修改这几个参数，重启 php-fpm （<code>service php-fpm restart</code>）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upload_max_filesize &#x3D; 100M     (php程序最大可以上传的附件值)</span><br><span class="line">post_max_size &#x3D; 100M           (form表单POST类型上传的最大可以上传值)</span><br><span class="line">memory_limit &#x3D; 128M　          (限制php程序运行时占用的内存大小最大为 128M)</span><br><span class="line">max_execution_time &#x3D; 0　    (PHP程序执行时间，单位：秒 0代表不限制)</span><br></pre></td></tr></table></figure>

<h3 id="5-could-not-find-driver"><a href="#5-could-not-find-driver" class="headerlink" title="5. could not find driver"></a>5. could not find driver</h3><p>网页请求没有问题，而命令行中执行composer 或 artisan 都报这个错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Illuminate\Database\QueryException]</span><br><span class="line"> could not find driver</span><br></pre></td></tr></table></figure>
<p>这个问题困扰了好几天<br>服务器装了多个PHP， 命令行 <code>php -v</code>  和网页 <code>phpinfo()</code> 输出的PHP版本竟然不一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># which php</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;php</span><br><span class="line"></span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;bin&#x2F;php -r &quot;phpinfo();&quot; | grep &quot;PHP Version&quot;</span><br><span class="line">PHP Version &#x3D;&gt; 7.1.9</span><br><span class="line">PHP Version &#x3D;&gt; 7.1.9</span><br><span class="line"></span><br><span class="line"># php -v</span><br><span class="line">PHP 7.1.9 (cli) (built: Sep  8 2017 10:52:57) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line"></span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;bin&#x2F;php -r &quot;echo(PHP_BINDIR);&quot;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>而在网页中，以上的输出结果为 <code>PHP Version 7.1.11</code> 和 <code>/usr/bin</code></p>
<p>解决方法： 修改环境变量，将命令行的PHP指向7.1.11 (未成功)</p>
<p>临时解决方法： 将目前所使用的PHP<strong>软链</strong>到所需的PHP版本（先将原来的php备份）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># which php</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;php</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"># ll | grep php</span><br><span class="line">lrwxrwxrwx  1 root root       12 Nov 13 18:03 php -&gt; &#x2F;usr&#x2F;bin&#x2F;php*</span><br></pre></td></tr></table></figure>

<p>修改<code>/etc/profile</code>文件使其永久性生效，并对所有系统用户生效，在文件末尾加上如下两行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PHP_HOME&#x3D;&#x2F;usr&#x2F;bin</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$&#123;PHP_HOME&#125;</span><br></pre></td></tr></table></figure>

<p>最后：执行 命令<code>source /etc/profile</code>或 执行点命令 <code>./profile</code>使其修改生效，执行完可通过<code>echo $PATH</code>命令查看是否添加成功。</p>
<p>目前的解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;php &#x2F;root&#x2F;composer.phar update</span><br></pre></td></tr></table></figure>

<p>终极解决方案：删掉所有PHP版本，重装一个，就一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove php-common</span><br></pre></td></tr></table></figure>

<h3 id="6-nginx-配置"><a href="#6-nginx-配置" class="headerlink" title="6. nginx 配置"></a>6. nginx 配置</h3><p>使用socket 连接代替http连接。</p>
<p>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>这一行必须要加入到 nginx 的配置文件中，详细见<a href="http://www.zouzhipeng.com/2017/05/06/centOS%20%E5%AE%89%E8%A3%85%20PHP7/#4-%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%B7%B2%E6%AD%A3%E7%A1%AE%E5%AE%89%E8%A3%85">这里</a></p>
<h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h2><h3 id="1-sublime-正则替换"><a href="#1-sublime-正则替换" class="headerlink" title="1. sublime 正则替换"></a>1. sublime 正则替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From：(\d&#123;11&#125;)</span><br><span class="line">To： &quot;$1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>From 的每一块都需要加括号</p>
</blockquote>
<h3 id="2-hexo-NODE-MODULE-VERSION-冲突"><a href="#2-hexo-NODE-MODULE-VERSION-冲突" class="headerlink" title="2. hexo NODE_MODULE_VERSION 冲突"></a>2. hexo NODE_MODULE_VERSION 冲突</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_MODULE_VERSION 46. This version of Node.js requires NODE_MODULE_VERSION 51. Please try re-compiling or re-installing</span><br></pre></td></tr></table></figure>

<p>I ran into same issue, after updating node 7.x.x.Rebuilding npm rebuild didn’t work either, so After, some digging I was able to resolved it by following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#96;which hexo&#39;&#x2F;..&#x2F;..</span><br><span class="line">rm -rvf node_modules</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>cd into your hexo-project</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rvf node_modules</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> trivia </category>
            
        </categories>
        
        
        <tags>
            
            <tag> trivia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件上传插件 dropzone 接入方法]]></title>
      <url>/2017/11/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6-dropzone-%E6%8E%A5%E5%85%A5%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="http://www.dropzonejs.com/">dropzone</a> 是一个简洁的文件上传插件，接入方便。</p>
<h2 id="1-首先下载-dropzone-插件的-css-和-js-文件，-放到-public-目录下。"><a href="#1-首先下载-dropzone-插件的-css-和-js-文件，-放到-public-目录下。" class="headerlink" title="1. 首先下载 dropzone 插件的 css 和 js 文件， 放到 public 目录下。"></a>1. 首先下载 dropzone 插件的 css 和 js 文件， 放到 public 目录下。</h2><h2 id="2-模板文件中引入-css-和-js"><a href="#2-模板文件中引入-css-和-js" class="headerlink" title="2. 模板文件中引入 css 和 js"></a>2. 模板文件中引入 css 和 js</h2><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@section(&#39;add_css&#39;)</span><br><span class="line">    &#123;!! Html::style(&#39;&#x2F;dropzone&#x2F;dist&#x2F;min&#x2F;dropzone.min.css&#39;) !!&#125;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@section(&#39;add_script&#39;)</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;dropzone&#x2F;dist&#x2F;min&#x2F;dropzone.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<h2 id="3-采用渐进式的引入方式-html-中"><a href="#3-采用渐进式的引入方式-html-中" class="headerlink" title="3. 采用渐进式的引入方式 html 中"></a>3. 采用渐进式的引入方式 html 中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;dropzone dz-clickable&quot; id&#x3D;&quot;myDrop&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;dz-default dz-message&quot; data-dz-message&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;span style&#x3D;&quot;font-size: large&quot;&gt;点击此处或拖拽文件到此处&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-js-文件中"><a href="#4-js-文件中" class="headerlink" title="4. js 文件中"></a>4. js 文件中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@section(&#39;script&#39;)</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        Dropzone.autoDiscover &#x3D; false; &#x2F;&#x2F; 这一行一定要放在ready之前</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            var fileMaxSize &#x3D; 20; &#x2F;&#x2F; MB</span><br><span class="line"></span><br><span class="line">            var myDropzone &#x3D; new Dropzone(&quot;div#myDrop&quot;, &#123;</span><br><span class="line">                url: &quot;&#x2F;admin&#x2F;files&#x2F;upload&quot;,</span><br><span class="line">                paramName: &quot;file&quot;, &#x2F;&#x2F; The name that will be used to transfer the file</span><br><span class="line">                maxFilesize: fileMaxSize, &#x2F;&#x2F; MB</span><br><span class="line">                maxFiles: 1, &#x2F;&#x2F; 一个一个来</span><br><span class="line">		&#x2F;&#x2F; 需要在headers中添加csrf</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &#39;X-CSRF-TOKEN&#39;: $(&#39;meta[name&#x3D;&quot;csrf-token&quot;]&#39;).attr(&#39;content&#39;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            myDropzone.on(&#39;addedfile&#39;, function (file) &#123;</span><br><span class="line">                if (file.size &gt; 1024 * 1024 * fileMaxSize) &#123;</span><br><span class="line">                    alert(&#39;文件大小不能超过 &#39; + fileMaxSize + &#39;M&#39;);</span><br><span class="line">                    myDropzone.removeFile(file);</span><br><span class="line">                &#125;</span><br><span class="line">                file.previewElement.addEventListener(&quot;click&quot;, function () &#123;</span><br><span class="line">&#x2F;&#x2F;                    var filename &#x3D; $(this).find(&#39;.dz-filename&#39;)[0].innerText;</span><br><span class="line">&#x2F;&#x2F;                    console.log(file);</span><br><span class="line">                    var path &#x3D; $(&#39;#path&#39;).val();</span><br><span class="line">                    var filename &#x3D; $(&#39;#filename&#39;).val();</span><br><span class="line">                    if (window.confirm(&#39;你确定要删除 &#39; + file.name + &#39; 吗？&#39;)) &#123;</span><br><span class="line">                        $.ajax(&#123;</span><br><span class="line">                            type: &quot;GET&quot;,</span><br><span class="line">                            url: &quot;&#x2F;admin&#x2F;files&#x2F;delete&quot;,</span><br><span class="line">                            data: &#123;path: path&#125;,</span><br><span class="line">                            dataType: &quot;JSON&quot;,</span><br><span class="line">                            success: function (data) &#123;</span><br><span class="line">&#x2F;&#x2F;                                console.log(data);</span><br><span class="line">                                if (0 &#x3D;&#x3D; data.error) &#123;</span><br><span class="line">                                    myDropzone.removeFile(file);</span><br><span class="line">                                &#125; else &#123;</span><br><span class="line">                                    alert(&#39;删除失败，稍后重试&#39;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            myDropzone.on(&#39;success&#39;, function (file, response) &#123;</span><br><span class="line">&#x2F;&#x2F;                console.log(file);</span><br><span class="line">&#x2F;&#x2F;                console.log(response);</span><br><span class="line">                if (response.errno &#x3D;&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F;                    alert(&#39;文件上传成功&#39;);</span><br><span class="line">                    $(&#39;#filename&#39;).attr(&#39;value&#39;, response.data[&#39;original_filename&#39;]);</span><br><span class="line">                    $(&#39;#path&#39;).attr(&#39;value&#39;, response.data[&#39;path&#39;]);</span><br><span class="line">                    $(&#39;#uri&#39;).attr(&#39;value&#39;, response.data[&#39;uri&#39;]);</span><br><span class="line">                    $(&#39;#hash&#39;).attr(&#39;value&#39;, response.data[&#39;file_hash&#39;]);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    alert(response.msg);</span><br><span class="line">                    myDropzone.removeFile(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            myDropzone.on(&#39;error&#39;, function (file, errorMessage) &#123;</span><br><span class="line">&#x2F;&#x2F;                console.log(errorMessage);</span><br><span class="line">            &#125;);</span><br><span class="line">            myDropzone.on(&#39;removefile&#39;, function (file) &#123;</span><br><span class="line">                alert(&#39;remove file&#39;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<h2 id="5-layout-文件中-，在head-标签内需加入-csrf-token"><a href="#5-layout-文件中-，在head-标签内需加入-csrf-token" class="headerlink" title="5. layout 文件中 ，在head 标签内需加入 csrf_token"></a>5. layout 文件中 ，在head 标签内需加入 csrf_token</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;csrf-token&quot; content&#x3D;&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>


<h2 id="6-php-文件，异步处理上传的文件"><a href="#6-php-文件，异步处理上传的文件" class="headerlink" title="6. php 文件，异步处理上传的文件"></a>6. php 文件，异步处理上传的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function upload(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $returnData &#x3D; fileUpload($request-&gt;file(&#39;file&#39;), &#39;file&#39;);</span><br><span class="line">    return response()-&gt;json($returnData)-&gt;setCallback($request-&gt;input(&#39;callback&#39;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件上传方法</span><br><span class="line">function fileUpload($file, $dirName)</span><br><span class="line">&#123;</span><br><span class="line">    $returnData &#x3D; [</span><br><span class="line">        &#39;errno&#39; &#x3D;&gt; -1,</span><br><span class="line">        &#39;msg&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;data&#39; &#x3D;&gt; &#39;&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $path &#x3D; sprintf(&#39;%s&#x2F;uploads&#x2F;%s&#x2F;%s&#x2F;&#39;, DATA_ROOT, $dirName, \Carbon\Carbon::now()-&gt;month);</span><br><span class="line">    autoMakeDir($path);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getError()); &#x2F;&#x2F; 0</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getFilename()); &#x2F;&#x2F; php3R7aUM</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getExtension());</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getClientMimeType()); &#x2F;&#x2F; image&#x2F;png</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getClientOriginalExtension()); &#x2F;&#x2F; png</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getClientOriginalName()); &#x2F;&#x2F; bef3df8aly1fbx05q2ra1j20b40b4mxi.png</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getErrorMessage()); &#x2F;&#x2F; The file &quot;bef3df8aly1fbx05q2ra1j20b40b4mxi.png&quot; was not uploaded due to an unknown error.</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getBasename()); &#x2F;&#x2F; php3R7aUM</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getPath()); &#x2F;&#x2F; &#x2F;tmp</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getPathname()); &#x2F;&#x2F; &#x2F;tmp&#x2F;php3R7aUM</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getType()); &#x2F;&#x2F; file</span><br><span class="line">&#x2F;&#x2F;        var_dump($file-&gt;getRealPath()); &#x2F;&#x2F; &#x2F;tmp&#x2F;php3R7aUM</span><br><span class="line"></span><br><span class="line">    $error &#x3D; $file-&gt;getError();</span><br><span class="line">    if ($error !&#x3D; 0) &#123;</span><br><span class="line">        $returnData[&#39;msg&#39;] &#x3D; $file-&gt;getErrorMessage();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $fileExt &#x3D; $file-&gt;getClientOriginalExtension();</span><br><span class="line">        &#x2F;&#x2F; 新文件名</span><br><span class="line">        $originalFilename &#x3D; $file-&gt;getClientOriginalName();</span><br><span class="line">        $realFilename &#x3D; rtrim($originalFilename, &#39;.&#39; . $fileExt);</span><br><span class="line">        $newFilename &#x3D; sprintf(&#39;%s_%s_%s.%s&#39;, $realFilename, time(), rand(10000, 99999), $fileExt);</span><br><span class="line">        $fileHash &#x3D; hash_file(&#39;md5&#39;, $file-&gt;getPathname());</span><br><span class="line">        &#x2F;&#x2F; 不允许重复上传相同的文件</span><br><span class="line">        $fileExist &#x3D; \App\File::where(&#39;hash&#39;, $fileHash)-&gt;count();</span><br><span class="line">        if ($fileExist) &#123;</span><br><span class="line">            $returnData[&#39;msg&#39;] &#x3D; &#39;该文件已存在 请选择其他文件上传&#39;;</span><br><span class="line">            $returnData[&#39;errno&#39;] &#x3D; 123;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 移动文件</span><br><span class="line">            $file-&gt;move($path, $newFilename);</span><br><span class="line">            $returnData[&#39;errno&#39;] &#x3D; 0;</span><br><span class="line">            $fileUri &#x3D; sprintf(&#39;&#x2F;uploads&#x2F;%s&#x2F;%s&#x2F;&#39;, $dirName, \Carbon\Carbon::now()-&gt;month) . $newFilename;</span><br><span class="line">            $returnData[&#39;data&#39;] &#x3D; [</span><br><span class="line">                &#39;path&#39; &#x3D;&gt; $path . $newFilename,</span><br><span class="line">                &#39;uri&#39; &#x3D;&gt; $fileUri,</span><br><span class="line">                &#39;filename&#39; &#x3D;&gt; $newFilename,</span><br><span class="line">                &#39;original_filename&#39; &#x3D;&gt; $originalFilename,</span><br><span class="line">                &#39;file_hash&#39; &#x3D;&gt; $fileHash,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $returnData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动创建目录方法</span><br><span class="line">function autoMakeDir($filePath)</span><br><span class="line">&#123;</span><br><span class="line">    if (!file_exists($filePath)) &#123;</span><br><span class="line">        mkdir($filePath, 0777, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dropzone </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[富文本编辑器 wangEditor 接入方法]]></title>
      <url>/2017/11/18/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-wangEditor-%E6%8E%A5%E5%85%A5%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="https://www.kancloud.cn/wangfupeng/wangeditor3/332599">wangEditor</a> 是基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费</p>
<h2 id="1-下载所需的-css-和-js-文件，放到-public-目录下"><a href="#1-下载所需的-css-和-js-文件，放到-public-目录下" class="headerlink" title="1. 下载所需的 css 和 js 文件，放到 public 目录下"></a>1. 下载所需的 css 和 js 文件，放到 public 目录下</h2><h2 id="2-模板文件中引入-css-和-js"><a href="#2-模板文件中引入-css-和-js" class="headerlink" title="2. 模板文件中引入 css 和 js"></a>2. 模板文件中引入 css 和 js</h2><p>其中， js 文件必须放到 jquery 后</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;bower_components&#x2F;wangEditor&#x2F;release&#x2F;wangEditor.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;bower_components&#x2F;wangEditor&#x2F;release&#x2F;wangEditor.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-在-html-中，添加一个需要展示编辑器的-div"><a href="#3-在-html-中，添加一个需要展示编辑器的-div" class="headerlink" title="3. 在 html 中，添加一个需要展示编辑器的 div"></a>3. 在 html 中，添加一个需要展示编辑器的 div</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;editor&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        @if(!empty($post))&#123;!! $post-&gt;content !!&#125;@endif</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-js-文件中"><a href="#4-js-文件中" class="headerlink" title="4. js 文件中"></a>4. js 文件中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@section(&#39;script&#39;)</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line"></span><br><span class="line">            var E &#x3D; window.wangEditor;</span><br><span class="line">            var editor &#x3D; new E(&#39;#editor&#39;);</span><br><span class="line">            editor.customConfig.uploadImgServer &#x3D; &#39;&#x2F;admin&#x2F;posts&#x2F;image&#x2F;upload&#39;;  &#x2F;&#x2F; 上传图片到服务器</span><br><span class="line">            editor.customConfig.uploadImgHeaders &#x3D; &#123;</span><br><span class="line">                &#39;X-CSRF-TOKEN&#39;: $(&#39;meta[name&#x3D;&quot;csrf-token&quot;]&#39;).attr(&#39;content&#39;)</span><br><span class="line">            &#125;;</span><br><span class="line">            editor.customConfig.uploadFileName &#x3D; &#39;wangEditorImg&#39;;</span><br><span class="line">            &#x2F;&#x2F; 将图片大小限制为 1M</span><br><span class="line">            editor.customConfig.uploadImgMaxSize &#x3D; 1024 * 1024;</span><br><span class="line">            &#x2F;&#x2F; 限制一次最多上传 5 张图片</span><br><span class="line">            editor.customConfig.uploadImgMaxLength &#x3D; 5;</span><br><span class="line">            &#x2F;&#x2F; 隐藏“网络图片”tab</span><br><span class="line">            editor.customConfig.showLinkImg &#x3D; false;</span><br><span class="line">            editor.customConfig.zIndex &#x3D; 1;</span><br><span class="line">            editor.customConfig.menus &#x3D; [</span><br><span class="line">                &#39;head&#39;,  &#x2F;&#x2F; 标题</span><br><span class="line">                &#39;bold&#39;,  &#x2F;&#x2F; 粗体</span><br><span class="line">                &#39;italic&#39;,  &#x2F;&#x2F; 斜体</span><br><span class="line">                &#39;underline&#39;,  &#x2F;&#x2F; 下划线</span><br><span class="line">                &#39;strikeThrough&#39;,  &#x2F;&#x2F; 删除线</span><br><span class="line">                &#39;foreColor&#39;,  &#x2F;&#x2F; 文字颜色</span><br><span class="line">                &#39;backColor&#39;,  &#x2F;&#x2F; 背景颜色</span><br><span class="line">                &#39;link&#39;,  &#x2F;&#x2F; 插入链接</span><br><span class="line">                &#39;list&#39;,  &#x2F;&#x2F; 列表</span><br><span class="line">                &#39;justify&#39;,  &#x2F;&#x2F; 对齐方式</span><br><span class="line">                &#39;quote&#39;,  &#x2F;&#x2F; 引用</span><br><span class="line">                &#39;emoticon&#39;,  &#x2F;&#x2F; 表情</span><br><span class="line">                &#39;image&#39;,  &#x2F;&#x2F; 插入图片</span><br><span class="line">                &#39;table&#39;,  &#x2F;&#x2F; 表格</span><br><span class="line">&#x2F;&#x2F;                &#39;video&#39;,  &#x2F;&#x2F; 插入视频</span><br><span class="line">                &#39;code&#39;,  &#x2F;&#x2F; 插入代码</span><br><span class="line">                &#39;undo&#39;,  &#x2F;&#x2F; 撤销</span><br><span class="line">                &#39;redo&#39;  &#x2F;&#x2F; 重复</span><br><span class="line">            ];</span><br><span class="line">            editor.create();</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line">@endsection</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-PHP-文件异步处理上传的图片"><a href="#5-PHP-文件异步处理上传的图片" class="headerlink" title="5. PHP 文件异步处理上传的图片"></a>5. PHP 文件异步处理上传的图片</h2><p>需要提前配置文件路径，服务器中单独设置一个目录，最好在项目目录之外，可以使多个项目都同时能访问到，同时配置一个二级域名或端口直接指向该目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function imageUpload(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $returnData &#x3D; imageUpload($request-&gt;file(&#39;wangEditorImg&#39;), &#39;posts&#39;, true);</span><br><span class="line">    return response()-&gt;json($returnData)-&gt;setCallback($request-&gt;input(&#39;callback&#39;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 处理文件上传，需要返回图片路径数组</span><br><span class="line">function imageUpload($file, $dirName, $isWangEditor &#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">    $returnData &#x3D; [</span><br><span class="line">        &#39;errno&#39; &#x3D;&gt; -1,</span><br><span class="line">        &#39;msg&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;data&#39; &#x3D;&gt; &#39;&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $path &#x3D; sprintf(&#39;%s&#x2F;uploads&#x2F;%s&#x2F;%s&#x2F;&#39;, DATA_ROOT, $dirName, \Carbon\Carbon::now()-&gt;month);</span><br><span class="line">    autoMakeDir($path);</span><br><span class="line"></span><br><span class="line">    $error &#x3D; $file-&gt;getError();</span><br><span class="line">    if ($error !&#x3D; 0) &#123;</span><br><span class="line">        $returnData[&#39;msg&#39;] &#x3D; $file-&gt;getErrorMessage();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $fileExt &#x3D; $file-&gt;getClientOriginalExtension();</span><br><span class="line">        &#x2F;&#x2F; 新文件名</span><br><span class="line">        $newFilename &#x3D; sprintf(&#39;%s_%s.%s&#39;, time(), rand(10000, 99999), $fileExt);</span><br><span class="line">        &#x2F;&#x2F; 移动文件</span><br><span class="line">        $file-&gt;move($path, $newFilename);</span><br><span class="line">        $returnData[&#39;errno&#39;] &#x3D; 0;</span><br><span class="line">        $fileUrl &#x3D; sprintf(&#39;%s&#x2F;uploads&#x2F;%s&#x2F;%s&#x2F;&#39;, DATA_URL, $dirName, \Carbon\Carbon::now()-&gt;month) . $newFilename;</span><br><span class="line">        if ($isWangEditor) &#123;</span><br><span class="line">            $returnData[&#39;data&#39;] &#x3D; [$fileUrl];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $returnData[&#39;data&#39;] &#x3D; $newFilename;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wangEditor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速上手Linux 玩转典型应用 part-1]]></title>
      <url>/2017/11/13/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BLinux-%E7%8E%A9%E8%BD%AC%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8-part-1/</url>
      <content type="html"><![CDATA[<p>慕课网 <a href="http://coding.imooc.com/learn/list/154.html">快速上手Linux 玩转典型应用</a> 学习笔记  part-1</p>
<p><a href="http://www.runoob.com/linux/linux-tutorial.html">在线学习点这里</a></p>
<a id="more"></a>

<h2 id="1-研发必须知道的-Linux-知识"><a href="#1-研发必须知道的-Linux-知识" class="headerlink" title="1. 研发必须知道的 Linux 知识"></a>1. 研发必须知道的 Linux 知识</h2><ul>
<li>Linux 区分大小写</li>
<li>一切皆文件</li>
<li>文件名后缀只是为了便于识别，对系统没有任何意义</li>
<li>云服务器与本地虚拟机的最主要区别就是云服务器有<strong>公网IP</strong></li>
</ul>
<h2 id="2-准备知识"><a href="#2-准备知识" class="headerlink" title="2. 准备知识"></a>2. 准备知识</h2><h3 id="1-查看-ip"><a href="#1-查看-ip" class="headerlink" title="1. 查看 ip"></a>1. 查看 ip</h3><h4 id="ifconfig-（最常用）"><a href="#ifconfig-（最常用）" class="headerlink" title="ifconfig （最常用）"></a>ifconfig （最常用）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[zzp@iZ2ze4kikm9076bxac1noqZ ~]$ ifconfig</span><br><span class="line">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.147.89  netmask 255.255.240.0  broadcast 172.17.159.255</span><br><span class="line">        ether 00:16:3e:2e:0c:1e  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 14729288  bytes 2106329863 (1.9 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 9911393  bytes 8389800747 (7.8 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 10772426  bytes 667897558 (636.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10772426  bytes 667897558 (636.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<h4 id="ip-addr"><a href="#ip-addr" class="headerlink" title="ip addr"></a>ip addr</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[zzp@iZ2ze4kikm9076bxac1noqZ ~]$ ip addr</span><br><span class="line"># 本地回环ip</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1&#x2F;8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"># 物理ip</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link&#x2F;ether 00:16:3e:2e:0c:1e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.147.89&#x2F;20 brd 172.17.159.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h4 id="vi-ifcfg-xx"><a href="#vi-ifcfg-xx" class="headerlink" title="vi ifcfg-xx"></a>vi ifcfg-xx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zzp@iZ2ze4kikm9076bxac1noqZ ~]$ vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-xx</span><br><span class="line"># 这里 xx 就是 ip addr 获取到里的两个ip的名字， lo和eth0</span><br></pre></td></tr></table></figure>

<p>修改 <code>ONBOOT=yes</code>， 并<code>service network restart</code>，对应的网络信息就可以在 <code>ip addr</code> 下显示。</p>
<h4 id="yum-install-net-tools"><a href="#yum-install-net-tools" class="headerlink" title="yum install net-tools"></a>yum install net-tools</h4><p>安装完成后就可以使用ifconfig命令（minial 版的centOS阉割了此命令）</p>
<h3 id="2-替换默认源（软件下载地址）"><a href="#2-替换默认源（软件下载地址）" class="headerlink" title="2. 替换默认源（软件下载地址）"></a>2. 替换默认源（软件下载地址）</h3><p>操作方法见此<a href="http://mirrors.163.com/.help/centos.html">地址</a></p>
<h3 id="3-安装-vim"><a href="#3-安装-vim" class="headerlink" title="3. 安装 vim"></a>3. 安装 vim</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure>

<h2 id="3-远程服务管理工具ssh-（重点）"><a href="#3-远程服务管理工具ssh-（重点）" class="headerlink" title="3. 远程服务管理工具ssh （重点）"></a>3. 远程服务管理工具ssh （重点）</h2><p>Secure Shell 安全外壳协议，建立在应用层基础上的安全协议。</p>
<p>可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p>
<h3 id="1-安装-ssh-服务"><a href="#1-安装-ssh-服务" class="headerlink" title="1. 安装 ssh 服务"></a>1. 安装 ssh 服务</h3><p>服务器端一般默认已安装了ssh服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-server</span><br></pre></td></tr></table></figure>
<h3 id="2-启动-ssh"><a href="#2-启动-ssh" class="headerlink" title="2. 启动 ssh"></a>2. 启动 ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br><span class="line">ps -ef | grep ssh</span><br></pre></td></tr></table></figure>
<h3 id="3-设置开机启动"><a href="#3-设置开机启动" class="headerlink" title="3. 设置开机启动"></a>3. 设置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig sshd on</span><br></pre></td></tr></table></figure>

<p>客户端安装 ssh 工具</p>
<p>Win:Xshell, Putty, secureCRT 等，<br>Linux: <code>yum install openssh-clients</code></p>
<p>连接：<br><code>ssh zzp@47.93.234.60 -p 8222</code></p>
<h3 id="4-ssh-config-命令"><a href="#4-ssh-config-命令" class="headerlink" title="4. ssh config 命令"></a>4. ssh config 命令</h3><ul>
<li>为了方便批量管理多个ssh</li>
<li>存放在 ~/.ssh/config</li>
</ul>
<p>config 语法：</p>
<ol>
<li>Host: 别名</li>
<li>HostName: 主机名或ip</li>
<li>Port: 端口 默认 22</li>
<li>User: 用户名</li>
<li>IdentityFile: 密钥文件路径</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze4kikm9076bxac1noqz ~]# cd .ssh&#x2F;</span><br><span class="line">[root@iz2ze4kikm9076bxac1noqz .ssh]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw------- 1 root root 403 May 24 15:20 authorized_keys</span><br><span class="line">[root@iz2ze4kikm9076bxac1noqz .ssh]# touch config</span><br></pre></td></tr></table></figure>
<h3 id="5-免密登录-ssh-key"><a href="#5-免密登录-ssh-key" class="headerlink" title="5. 免密登录 ssh key"></a>5. 免密登录 ssh key</h3><p>使用非对称加密方式生成公钥和私钥，私钥存放在本地 ~/.ssh，保护好私钥，公钥可以对外公开，放在服务器的 ~/.ssh/authorized_keys</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure>

<p>需要加载私钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~&#x2F;.ssh&#x2F;private_key</span><br></pre></td></tr></table></figure>

<h3 id="5-iTerm-中配置免密登录-sshpass"><a href="#5-iTerm-中配置免密登录-sshpass" class="headerlink" title="5. iTerm 中配置免密登录 sshpass"></a>5. <a href="http://www.cnblogs.com/onlyfu/p/4460160.html">iTerm 中配置免密登录 sshpass</a></h3><p>我的配置大概下面这个样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sshpass  -f &#x2F;zzp&#x2F;sshpass&#x2F;my_aliyun_pass ssh zzp@47.93.234.60 -p 8222</span><br></pre></td></tr></table></figure>

<p>其中，<code>/zzp/sshpass/my_aliyun_pass</code> 文件中存储的是登录密码，设置好快捷键后就可以实现一键免密登录。</p>
<h3 id="6-端口安全"><a href="#6-端口安全" class="headerlink" title="6. 端口安全"></a>6. 端口安全</h3><p>改变默认服务器端口，修改 <code>/etc/ssh/sshd_config</code> 文件，大概十几行， Port 12345，并且可以同时监听多个端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Port 12345</span><br><span class="line">Port 10086</span><br><span class="line">Port 10010</span><br></pre></td></tr></table></figure>

<h2 id="4-Liunx-常用命令"><a href="#4-Liunx-常用命令" class="headerlink" title="4. Liunx 常用命令"></a>4. Liunx 常用命令</h2><h3 id="1-软件操作命令"><a href="#1-软件操作命令" class="headerlink" title="1. 软件操作命令"></a>1. 软件操作命令</h3><p>软件包管理器 yum</p>
<ul>
<li>安装软件 <code>yum install xxx</code></li>
<li>卸载软件 <code>yum remove xxx</code></li>
<li>搜索软件 <code>yum search xxx</code></li>
<li>清理缓存 <code>yum clean packages</code></li>
<li>列出已安装 <code>yum list</code> 会列出很多，最好grep一下</li>
<li>软件包信息 <code>yum info xxx</code></li>
</ul>
<h3 id="2-服务器硬件资源信息"><a href="#2-服务器硬件资源信息" class="headerlink" title="2. 服务器硬件资源信息"></a>2. 服务器硬件资源信息</h3><ul>
<li>内存 <code>free -m</code></li>
<li>硬盘 <code>df -h</code></li>
<li>负载 <code>w/top</code></li>
<li>cpu 个数和核数 <code>cat /proc/cpuinfo</code></li>
</ul>
<p>1分钟，5分钟，15分钟的平均负载，一般大于0.6或0.7为危险</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ w</span><br><span class="line">21:13:30 up 1 day, 20:22,  1 user,  load average: 0.00, 0.03, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">zzp      pts&#x2F;0    123.122.85.229   21:05    2.00s  0.00s  0.00s w</span><br></pre></td></tr></table></figure>

<p>fdisk 可视化磁盘</p>
<h3 id="3-文件操作命令"><a href="#3-文件操作命令" class="headerlink" title="3. 文件操作命令"></a>3. 文件操作命令</h3><p>文件目录结构</p>
<ul>
<li>根目录 /</li>
<li>家目录 /home</li>
<li>临时目录 /tmp</li>
<li>配置目录 /etc</li>
<li>用户程序目录 /usr</li>
</ul>
<p>文件操作</p>
<ul>
<li>查看目录下的文件 ls/ll/ll -ah</li>
<li>新建文件 touch</li>
<li>新建文件夹 mkdir (mkdir -p dir1/dir2/dir3/dir4)</li>
<li>进入目录 cd</li>
<li>删除文件和目录 rm</li>
<li>复制 cp</li>
<li>移动 mv</li>
<li>显示当前路径 pwd (print working directory)</li>
</ul>
<h3 id="4-Vim"><a href="#4-Vim" class="headerlink" title="4. Vim"></a>4. Vim</h3><ul>
<li>首行 gg</li>
<li>末行 G</li>
<li>行尾 $</li>
<li>删除 dd</li>
<li>恢复 u</li>
<li>复制 yy</li>
<li>粘贴 p </li>
</ul>
<h3 id="5-文件搜索、查找、读取"><a href="#5-文件搜索、查找、读取" class="headerlink" title="5. 文件搜索、查找、读取"></a>5. 文件搜索、查找、读取</h3><ul>
<li>从文件尾部开始读 tail 通常加 -f</li>
<li>从文件头部开始读 head</li>
<li>读取整个文件 cat 注意大文件，不要随意读</li>
<li>分页读取 more 从头部开始读</li>
<li>可控分页 less </li>
<li>搜索关键字 grep  (grep -n “error” filename)</li>
<li>查找文件 find</li>
<li>统计个数 wc (cat filename | wc -l)  wordcount</li>
</ul>
<p><code>grep &quot;2017-11-11&quot; filename | more</code></p>
<p><code>find . -name &quot;*.conf&quot;</code> 在当前目录及其子目录下查找名称以.conf结尾的文件</p>
<p><code>find . -type f</code> 在当前目录及其子目录下查找类型为文件的文件</p>
<p><code>find . -type d</code> 在当前目录及其子目录下查找类型为目录的文件</p>
<p><code>find . -ctime -20</code> 在当前目录及其子目录下查找所有最近20天内更新过的文件</p>
<p><code>find /var/log -type f -mtime +7 -exec rm &#123;&#125;; \</code> 在/var/log下查找所有7天以前更新过的文件，删除</p>
<p><code>find . -type f -perm 644 -exec ls -al &#123;&#125; \;</code></p>
<h3 id="6-文件解压缩"><a href="#6-文件解压缩" class="headerlink" title="6. 文件解压缩"></a>6. 文件解压缩</h3><p><code>tar -cf des.tar source</code> create compressed file from source to des</p>
<p><code>tar -tvf file.tar</code> list files in the compressed file</p>
<p><code>tar -xf file.tar</code> extract file from the compressed file</p>
<p><code>tar -czvf des.tar.gz source</code>  in .gz format, visualized, -f usually is the last param</p>
<p><code>tar -xzvf file.tar.gz</code></p>
<p>记住每个参数的意思</p>
<h3 id="7-系统用户操作命令"><a href="#7-系统用户操作命令" class="headerlink" title="7. 系统用户操作命令"></a>7. 系统用户操作命令</h3><ul>
<li>useradd</li>
<li>adduser</li>
<li>userdel</li>
<li>passwd</li>
</ul>
<blockquote>
<p>useradd is native binary compiled with the system. But, adduser is a perl script which uses useradd binary in back-end.<br>adduser is more user friendly and interactive than its back-end useradd. There’s no difference in features provided.</p>
</blockquote>
<h3 id="8-防火墙的设置"><a href="#8-防火墙的设置" class="headerlink" title="8. 防火墙的设置"></a>8. 防火墙的设置</h3><p>保护服务器安全</p>
<p>确认服务是否已安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># yum list | grep firewall</span><br><span class="line">firewalld.noarch                        0.4.4.4-6.el7                  @base</span><br><span class="line">firewalld-filesystem.noarch             0.4.4.4-6.el7                  @base</span><br><span class="line">python-firewall.noarch                  0.4.4.4-6.el7                  @base</span><br><span class="line">fail2ban-firewalld.noarch               0.9.7-1.el7                    epel</span><br><span class="line">firewall-applet.noarch                  0.4.4.4-6.el7                  base</span><br><span class="line">firewall-config.noarch                  0.4.4.4-6.el7                  base</span><br><span class="line">puppet-firewalld.noarch                 0.1.3-1.el7                    epel</span><br><span class="line">system-config-firewall.noarch           1.2.29-10.el7                  base</span><br><span class="line">system-config-firewall-base.noarch      1.2.29-10.el7                  base</span><br><span class="line">system-config-firewall-tui.noarch       1.2.29-10.el7                  base</span><br></pre></td></tr></table></figure>

<p>确认服务是否已启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef | grep firewall</span><br><span class="line">root     19678 19531  0 22:45 pts&#x2F;1    00:00:00 grep --color&#x3D;auto firewall</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install firewalld</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ service firewalld start</span><br><span class="line">Redirecting to &#x2F;bin&#x2F;systemctl start  firewalld.service</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D; AUTHENTICATING FOR org.freedesktop.systemd1.manage-units &#x3D;&#x3D;&#x3D;</span><br><span class="line">Authentication is required to manage system services or units.</span><br><span class="line">Authenticating as: root</span><br><span class="line">Password:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D; AUTHENTICATION COMPLETE &#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<p>检查状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># service firewalld status</span><br><span class="line">Redirecting to &#x2F;bin&#x2F;systemctl status  firewalld.service</span><br><span class="line">● firewalld.service</span><br><span class="line">   Loaded: masked (&#x2F;dev&#x2F;null; bad)</span><br><span class="line">   Active: inactive (dead)</span><br></pre></td></tr></table></figure>

<p>关闭或禁用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service firewalld stop&#x2F;disable</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --version</span><br><span class="line">firewall-cmd --state</span><br><span class="line">firewall-cmd --get-zones</span><br><span class="line">firewall-cmd --get-default-zone</span><br><span class="line">firewall-cmd --list-all-zone</span><br><span class="line">firewall-cmd --zone&#x3D;public</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line">firewall-cmd --query-service&#x3D;ssh</span><br><span class="line">firewall-cmd --remove-service&#x3D;ssh</span><br><span class="line">firewall-cmd --add-service&#x3D;ssh</span><br><span class="line">firewall-cmd --list-services</span><br><span class="line">firewall-cmd --query-port&#x3D;22&#x2F;tcp</span><br><span class="line">firewall-cmd --add-port&#x3D;22&#x2F;tcp</span><br><span class="line">firewall-cmd --remove-port&#x3D;22&#x2F;tcp</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line">firewall-cmd --get-all-zones</span><br></pre></td></tr></table></figure>

<h3 id="9-提权和文件上传下载"><a href="#9-提权和文件上传下载" class="headerlink" title="9. 提权和文件上传下载"></a>9. 提权和文件上传下载</h3><ul>
<li>提权 sudo</li>
<li>下载 wget, curl</li>
<li>上传 scp</li>
</ul>
<p>secureCRT + lrzsz</p>
<h4 id="1-提权"><a href="#1-提权" class="headerlink" title="1. 提权"></a>1. 提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure>
<p>找到 Allows people in group wheel to run all commands</p>
<p>添加一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%user ALL&#x3D;(ALL)  ALL</span><br></pre></td></tr></table></figure>
<p>将用户添加到提权账号中</p>
<p>尽量不要使用root 账号进行操作。</p>
<h4 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h4><p>一般使用 wget 就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># wget http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br><span class="line">--2017-11-13 23:33:40--  http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br><span class="line">Resolving www.baidu.com (www.baidu.com)... 115.239.210.27, 115.239.211.112</span><br><span class="line">Connecting to www.baidu.com (www.baidu.com)|115.239.210.27|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2381 (2.3K) [text&#x2F;html]</span><br><span class="line">Saving to: ‘index.html’</span><br><span class="line"></span><br><span class="line">100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 2,381       --.-K&#x2F;s   in 0s</span><br><span class="line"></span><br><span class="line">2017-11-13 23:33:40 (260 MB&#x2F;s) - ‘index.html’ saved [2381&#x2F;2381]</span><br><span class="line"></span><br><span class="line">[root@iz2ze4kikm9076bxac1noqz ~]# ll</span><br><span class="line">-rw-r--r--  1 root root     2381 Jan 23  2017 index.html</span><br><span class="line"></span><br><span class="line"># curl -o baidu.html http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2381  100  2381    0     0   3918      0 --:--:-- --:--:-- --:--:--  3922</span><br><span class="line">[root@iz2ze4kikm9076bxac1noqz ~]# ll</span><br><span class="line">-rw-r--r--  1 root root     2381 Nov 13 23:34 baidu.html</span><br><span class="line">-rw-r--r--  1 root root     2381 Jan 23  2017 index.html</span><br></pre></td></tr></table></figure>

<h4 id="3-上传"><a href="#3-上传" class="headerlink" title="3. 上传"></a>3. 上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp file root@192.168.1.1:&#x2F;dir&#x2F;</span><br></pre></td></tr></table></figure>

<p>下载到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@192.168.1.1:&#x2F;dir&#x2F;file locate_dir</span><br></pre></td></tr></table></figure>













]]></content>
      
        <categories>
            
            <category> Liunx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【记录】最近的一些琐碎 trivia 201710]]></title>
      <url>/2017/10/08/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%90%E7%A2%8E/</url>
      <content type="html"><![CDATA[<h2 id="1-Docker-相关"><a href="#1-Docker-相关" class="headerlink" title="1. Docker 相关"></a>1. Docker 相关</h2><p>进入docker容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it CONTAINER_ID&#x2F;name bash</span><br><span class="line">docker exec -it nginx bash</span><br><span class="line">docker-compose exec nginx bash</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>用到的几个别名，添加到 .zshrc 或 .bashrc 等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias ll&#x3D;&#39;ls -lG&#39;</span><br><span class="line">alias dco&#x3D;&#39;docker-compose&#39;</span><br><span class="line">alias dce&#x3D;&#39;docker-compose exec&#39;</span><br></pre></td></tr></table></figure>

<p>docker 启动 需先进入 laravel_docker 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j lar</span><br><span class="line">dco up -d mysql redis nginx</span><br></pre></td></tr></table></figure>

<p>看队列执行情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;supervisor&#x2F;worker_message.log</span><br><span class="line">tail -f &#x2F;data&#x2F;www&#x2F;caijing&#x2F;cms&#x2F;storage&#x2F;logs&#x2F;admai&#x2F;20170809.log</span><br><span class="line">tail -f &#x2F;data&#x2F;www&#x2F;caijing&#x2F;cms&#x2F;storage&#x2F;logs&#x2F;ad_sogou&#x2F;20170809.log</span><br></pre></td></tr></table></figure>

<h2 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2. Linux"></a>2. Linux</h2><p>1.CPU占用最多的前10个进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k3|head -10</span><br></pre></td></tr></table></figure>

<p>2.内存消耗最多的前10个进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k4|head -10</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Linux 搜索某个文件夹内的所有文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &quot;*&quot; | xargs grep &quot;495043143&quot;</span><br></pre></td></tr></table></figure>

<p>vim 查找统计次数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;失败&#x2F;&amp;&#x2F;gn</span><br></pre></td></tr></table></figure>

<h2 id="3-正则表达式"><a href="#3-正则表达式" class="headerlink" title="3. 正则表达式"></a>3. 正则表达式</h2><p>匹配中文字符的正则表达式: <code>[\u4e00-\u9fa5]</code><br>匹配双字节字符(包含汉字):  <code>[^\x00-\xff]</code><br>匹配任何空白字符，包括空格、制表符、换页符等等:  <code>\s</code>。</p>
<h2 id="4-nginx"><a href="#4-nginx" class="headerlink" title="4. nginx"></a>4. nginx</h2><p>最简单的 nginx 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      server.crt;</span><br><span class="line">    ssl_certificate_key  server.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-Laravel"><a href="#5-Laravel" class="headerlink" title="5. Laravel"></a>5. Laravel</h2><ol>
<li>tinker 生成测试数据</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan tinker</span><br><span class="line">factory(App\User::class, 500)-&gt;create();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑完composer.json文件，执行</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer dump-autoload -o</span><br></pre></td></tr></table></figure>


<h2 id="6-lrzsz"><a href="#6-lrzsz" class="headerlink" title="6. lrzsz"></a>6. lrzsz</h2><ol>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum install lrzsz	</span><br><span class="line">或者 apt-get install lrzsz</span><br></pre></td></tr></table></figure>

<p>使用SecureCRT来上传和下载文件了。<br>打开SecureCRT软件 -&gt; Options -&gt; session options -&gt; X/Y/Zmodem 下可以设置上传和下载的目录;<br>然后在用SecureCRT登陆linux终端的时候:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sz filename (发送文件到客户端,zmodem接收可以自行启动)</span><br><span class="line"># rz (从客户端上传文件到linux服务端)</span><br></pre></td></tr></table></figure>

<p>rz命令也可以在SecureCRT中使用UI来上传。</p>
<h2 id="7-localhost与127-0-0-1的区别是什么"><a href="#7-localhost与127-0-0-1的区别是什么" class="headerlink" title="7. localhost与127.0.0.1的区别是什么?"></a>7. localhost与127.0.0.1的区别是什么?</h2><p>相信有人会说是本地ip，曾有人说，用127.0.0.1比localhost好，可以减少一次解析。<br>看来这个问题还有人不清楚，其实这两者是有区别的。<br>localhost也叫local ，正确的解释是：本地服务器<br>127.0.0.1在windows等系统的正确解释是：本机地址（本机服务器）<br>他们的解析通过本机的host文件，windows自动将localhost解析为127.0.0.1<br> <br>localhot（local）是不经网卡传输！这点很重要，它不受网络防火墙和网卡相关的的限制。<br>127.0.0.1是通过网卡传输，依赖网卡，并受到网络防火墙和网卡相关的限制。<br>一般设置程序时本地服务用localhost是最好的，localhost不会解析成ip，也不会占用网卡、网络资源。<br>有时候用localhost可以，但用127.0.0.1就不可以的情况就是在于此。猜想localhost访问时，系统带的本机当前用户的权限去访问，而用ip的时候，等于本机是通过网络再去访问本机，可能涉及到网络用户的权限。<br>￼<br>这里一张图</p>
<h2 id="8-Mac"><a href="#8-Mac" class="headerlink" title="8. Mac"></a>8. Mac</h2><p>装机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew cask install alfred</span><br><span class="line">brew cask install the-unarchiver</span><br><span class="line">brew cask install qq</span><br><span class="line">brew cask install line</span><br><span class="line">brew cask install skype</span><br><span class="line">brew cask install thunder</span><br><span class="line">brew cask install mplayerx</span><br><span class="line">brew cask install evernote</span><br><span class="line">brew cask install skitch</span><br><span class="line">brew cask install dropbox</span><br><span class="line">brew cask install google-chrome</span><br><span class="line">brew cask install mou</span><br><span class="line">brew cask install iterm2</span><br><span class="line">brew cask install sublime-text</span><br><span class="line">brew cask install virtualbox</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mac下显示隐藏文件夹</li>
</ol>
<p>显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br></pre></td></tr></table></figure>
<p>隐藏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>
<p>重启生效</p>
<ol start="3">
<li>瘦身 mac 的 office</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &quot;curl -s https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;goodbest&#x2F;OfficeThinner&#x2F;master&#x2F;OfficeThinner.sh | bash&quot;</span><br></pre></td></tr></table></figure>

<p>根据要求输入密码，回车，等待处理，一般需要1分钟左右。</p>
<p>然后检查是否瘦身成功，在应用程序里可以看到Office组件大小</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> trivia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 去重、分组取最大、按时间二次分组、评论盖楼等]]></title>
      <url>/2017/07/15/Laravel-%E5%8E%BB%E9%87%8D%E3%80%81%E5%88%86%E7%BB%84%E5%8F%96%E6%9C%80%E5%A4%A7%E3%80%81%E6%8C%89%E6%97%B6%E9%97%B4%E4%BA%8C%E6%AC%A1%E5%88%86%E7%BB%84%E3%80%81%E8%AF%84%E8%AE%BA%E7%9B%96%E6%A5%BC%E7%AD%89/</url>
      <content type="html"><![CDATA[<p>最近公司项目中遇到的几个问题，记录一下</p>
<h2 id="1-去重"><a href="#1-去重" class="headerlink" title="1. 去重"></a>1. 去重</h2><p>业务：从数据库中取出用户的阅读足迹，由于用户在一天之内可能多次阅读同一篇文章，数据表中对于同一天同一用户同一文章可能有多条记录，只是打开时间和关闭时间不同。取出用户阅读足迹的时间，需要对当天的阅读足迹去重。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">阅读足迹表</span><br><span class="line">CREATE TABLE &#96;reading_footprints&#96; (</span><br><span class="line">  &#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;ID&#39;,</span><br><span class="line">  &#96;user_id&#96; int(11) NOT NULL COMMENT &#39;acct.member.id&#39;,</span><br><span class="line">  &#96;udid&#96; varchar(255) COLLATE utf8_unicode_ci NOT NULL COMMENT &#39;设备ID iOS IDFA， Android IMEI&#39;,</span><br><span class="line">  &#96;source_id&#96; int(11) DEFAULT NULL COMMENT &#39;数据源ID&#39;,</span><br><span class="line">  &#96;column_id&#96; int(11) DEFAULT NULL COMMENT &#39;栏目ID&#39;,</span><br><span class="line">  &#96;object_id&#96; int(11) NOT NULL COMMENT &#39;目前只记录文章的阅读记录， article_id&#39;,</span><br><span class="line">  &#96;type&#96; tinyint(4) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;类型 0 文章&#39;,</span><br><span class="line">  &#96;open_time&#96; int(11) NOT NULL COMMENT &#39;文章打开时间&#39;,</span><br><span class="line">  &#96;close_time&#96; int(11) NOT NULL COMMENT &#39;文章关闭时间&#39;,</span><br><span class="line">  &#96;non_breaking_days&#96; int(11) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;连续阅读天数&#39;,</span><br><span class="line">  &#96;accumulated_reading_time&#96; int(11) NOT NULL COMMENT &#39;累计阅读时间，秒&#39;,</span><br><span class="line">  &#96;created_at&#96; timestamp NULL DEFAULT NULL,</span><br><span class="line">  &#96;updated_at&#96; timestamp NULL DEFAULT NULL,</span><br><span class="line">  &#96;deleted_at&#96; timestamp NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;36 DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_unicode_ci COMMENT&#x3D;&#39;阅读足迹表&#39;;</span><br></pre></td></tr></table></figure>

<p>例如：需要显示的一个数据是用户今天阅读了几篇文章，原生sql 语句是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select distinct object_id from reading_footprints where user_id&#x3D;237475 and open_time between 1499356800 and 1499443200</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">select object_id from reading_footprints where user_id&#x3D;237475 and open_time between 1489356800 and 1499443200 group by object_id</span><br></pre></td></tr></table></figure>

<p>其中，时间戳在<a href="https://unixtime.51240.com/">这里</a>查询。项目中，使用 Carbon 类获取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$todayStart &#x3D; Carbon::today()-&gt;timestamp;</span><br><span class="line">$todayEnd &#x3D; Carbon::tomorrow()-&gt;timestamp;</span><br></pre></td></tr></table></figure>

<p>但这样的sql 语句只能获取到其中一个字段，或者时聚合函数的结果。</p>
<p>Laravel 中 ORM 方式写法见下一个问题。</p>
<h2 id="2-分组取最大"><a href="#2-分组取最大" class="headerlink" title="2. 分组取最大"></a>2. 分组取最大</h2><p>还是上面的阅读足迹问题，其中每一条记录中都有累计阅读天数和累计阅读时间的字段，所以对于文章去重的时候需要取出每篇文章的最后一条，即按文章id分组后还要取出每个分组中累计阅读时间最大的一条。</p>
<p>实现方法有好几种，基本思路都是先按文章id分组并取出最大的记录id或累计阅读时间等有限个字段（分组或去重时不能取出无关字段），然后再进行自连接关联查询或子查询。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原生sql</span><br><span class="line">select a.* from reading_footprints a inner join</span><br><span class="line">(select object_id, max(accumulated_reading_time) accumulated_reading_time from reading_footprints group by object_id) b </span><br><span class="line">on a.object_id &#x3D; b.object_id and a.accumulated_reading_time &#x3D; b.accumulated_reading_time order by close_time desc</span><br></pre></td></tr></table></figure>

<p>Laravel ORM 中，先分组，后内连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$sub &#x3D; DB::table(&#39;reading_footprints&#39;)</span><br><span class="line">    -&gt;select(DB::raw(&#39;max(accumulated_reading_time) accumulated_reading_time&#39;), &#39;object_id&#39;)</span><br><span class="line">    -&gt;groupBy(&#39;object_id&#39;);</span><br><span class="line"></span><br><span class="line">$readingFootprints &#x3D; DB::table(&#39;reading_footprints as a&#39;)</span><br><span class="line">    -&gt;select(&#39;a.*&#39;)</span><br><span class="line">    -&gt;join(DB::raw(&quot;(&#123;$sub-&gt;toSql()&#125;) as b&quot;), function ($join) &#123;</span><br><span class="line">        $join-&gt;on(&#39;a.accumulated_reading_time&#39;, &#39;&#x3D;&#39;, &#39;b.accumulated_reading_time&#39;);</span><br><span class="line">        $join-&gt;on(&#39;a.object_id&#39;, &#39;&#x3D;&#39;, &#39;b.object_id&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">    -&gt;orderBy(&#39;close_time&#39;, &#39;desc&#39;)-&gt;get();</span><br></pre></td></tr></table></figure>

<p>抽象到 BaseRepositoryEloquent.php 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 单表分组取最大或最小 的数据</span><br><span class="line"> * @param string $group_field</span><br><span class="line"> * @param array $where</span><br><span class="line"> * @param string $operate</span><br><span class="line"> * @param string $operate_field</span><br><span class="line"> * @param null $columns</span><br><span class="line"> * User: Howard</span><br><span class="line"> * Date: 2017-07-07</span><br><span class="line"> * @return Collection|null</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function getDataByGroup($group_field, $where &#x3D; [], $operate &#x3D; &#39;max&#39;, $operate_field &#x3D; &#39;id&#39;, $columns &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    $data &#x3D; null;</span><br><span class="line">    $ids &#x3D; $this-&gt;getIdByGroup($group_field, $where, $operate, $operate_field);</span><br><span class="line">    if (!empty($ids)) &#123;</span><br><span class="line">        $data &#x3D; $this-&gt;findWhereIn($operate_field, $ids, $columns)-&gt;keyBy($group_field);</span><br><span class="line">    &#125;</span><br><span class="line">    return $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 单表分组取最大或最小 的ID</span><br><span class="line"> * @param $group_field</span><br><span class="line"> * @param array $where</span><br><span class="line"> * @param string $operate</span><br><span class="line"> * @param string $operate_field</span><br><span class="line"> * User: Howard</span><br><span class="line"> * Date: 2017-07-07</span><br><span class="line"> * @return array</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function getIdByGroup($group_field, $where &#x3D; [], $operate &#x3D; &#39;max&#39;, $operate_field &#x3D; &#39;id&#39;)</span><br><span class="line">&#123;</span><br><span class="line">    $ids &#x3D; [];</span><br><span class="line">    if (empty($where)) &#123;</span><br><span class="line">        $self &#x3D; $this;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $self &#x3D; $this-&gt;whereWithParams($where);</span><br><span class="line">    &#125;</span><br><span class="line">    $selfModel &#x3D; $self-&gt;model-&gt;groupBy($group_field);</span><br><span class="line">    $select &#x3D; sprintf(&#39;%s(&#96;%s&#96;) as &#96;%s&#96;&#39;, strtolower($operate), $operate_field, $operate_field);</span><br><span class="line">    $selfModel &#x3D; $selfModel-&gt;select(DB::raw($select));</span><br><span class="line">    $result &#x3D; $selfModel-&gt;get();</span><br><span class="line"></span><br><span class="line">    $this-&gt;resetModel();</span><br><span class="line">    $this-&gt;resetCriteria();</span><br><span class="line">    $this-&gt;resetScope();</span><br><span class="line"></span><br><span class="line">    if (!is_empty($result)) &#123;</span><br><span class="line">        $ids &#x3D; array_pluck($result, $operate_field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-按时间二次分组"><a href="#3-按时间二次分组" class="headerlink" title="3. 按时间二次分组"></a>3. 按时间二次分组</h2><p>阅读足迹显示规则：日期1：[文章1；文章2]；日期2：[文章3；]… 即数据取出后为一维数组，再按关闭日期包成二维数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">foreach ($footprints as $item) &#123;</span><br><span class="line">    if (isset($returnFootprints[$item-&gt;close_date])) &#123;</span><br><span class="line">        array_push($returnFootprints[$item-&gt;close_date], $footprint);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $returnFootprints[$item-&gt;close_date] &#x3D; [$footprint];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-评论盖楼"><a href="#4-评论盖楼" class="headerlink" title="4. 评论盖楼"></a>4. 评论盖楼</h2><p>首先取出所有符合条件的评论，形成一个一维数组，然后进行处理（慢慢理解）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 转换评论数据</span><br><span class="line"> * @param $comment_info</span><br><span class="line"> * @param $recursion</span><br><span class="line"> * User: Howard</span><br><span class="line"> * Date: 2017-06-08</span><br><span class="line"> * @return array|map</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function convertData4List($comment_info, $recursion &#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">    if ($comment_info instanceof Comment) &#123;</span><br><span class="line">        if (!is_empty($comment_info)) &#123;</span><br><span class="line">            $sc &#x3D; new \stdClass();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $sc &#x3D; $this-&gt;dealSingle($comment_info, $recursion);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (!is_empty($comment_info)) &#123;</span><br><span class="line">            $sc &#x3D; [];</span><br><span class="line">        &#125;</span><br><span class="line">        foreach ($comment_info as $index &#x3D;&gt; $item) &#123;</span><br><span class="line">            $sc[] &#x3D; $this-&gt;dealSingle($item, $recursion);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $sc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 处理单个评论 递归</span><br><span class="line"> * @param $comment</span><br><span class="line"> * @param $recursion</span><br><span class="line"> * User: Howard</span><br><span class="line"> * Date: 2017-06-08</span><br><span class="line"> * @return array</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function dealSingle($comment, $recursion &#x3D; false)</span><br><span class="line">&#123;</span><br><span class="line">    $commentData &#x3D; [</span><br><span class="line">        &#39;id&#39; &#x3D;&gt; $comment-&gt;id,</span><br><span class="line">        &#39;user_id&#39; &#x3D;&gt; $comment-&gt;uid,</span><br><span class="line"></span><br><span class="line">        &#39;username&#39; &#x3D;&gt; empty($comment-&gt;uname) ? &#39;财经网友&#39; : $comment-&gt;uname,</span><br><span class="line">        &#39;avatar&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        &#39;article_id&#39; &#x3D;&gt; $comment-&gt;articleid,</span><br><span class="line">        &#39;content&#39; &#x3D;&gt; $comment-&gt;content,</span><br><span class="line">        &#39;create_time&#39; &#x3D;&gt; $comment-&gt;ctime,</span><br><span class="line">        &#39;star_number&#39; &#x3D;&gt; rand(100,1000),</span><br><span class="line">        &#39;parent&#39; &#x3D;&gt; new \stdClass(),</span><br><span class="line">    ];</span><br><span class="line">&#x2F;&#x2F;        dd($commentData);</span><br><span class="line">    if ($recursion &amp;&amp; !empty($comment-&gt;parent)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 递归调用</span><br><span class="line">        $commentData[&#39;parent&#39;] &#x3D; $this-&gt;dealSingle($comment-&gt;parent, $recursion);</span><br><span class="line">    &#125;</span><br><span class="line">    return $commentData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php artisan 的几个命令]]></title>
      <url>/2017/07/15/php-artisan-%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>数据表添加字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:migration alter_table_cms_articles_add_column_is_rewardable [--path&#x3D;database&#x2F;migrations&#x2F;xxx] [--database&#x3D;news]</span><br><span class="line">php artisan migrate [--path&#x3D;database&#x2F;migrations&#x2F;xxx] [--database&#x3D;news]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>生成权限项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan generate:perms --controller&#x3D;Permission&#x2F;TesterAuth</span><br></pre></td></tr></table></figure>

<p>新建模型、控制器等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:repository AdShowApp  --model&#x3D;AdShowApp</span><br><span class="line"></span><br><span class="line">php artisan make:repository Dudao&#x2F;BalanceLog --model&#x3D;Dudao&#x2F;BalanceLog</span><br><span class="line"></span><br><span class="line">php artisan make:controller Backend&#x2F;Setting&#x2F;CurrencyController</span><br></pre></td></tr></table></figure>


]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CGI、FastCGI和PHP-FPM关系图解]]></title>
      <url>/2017/07/15/CGI%E3%80%81FastCGI%E5%92%8CPHP-FPM%E5%85%B3%E7%B3%BB%E5%9B%BE%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文链接  <a href="http://www.awaimai.com/371.html">http://www.awaimai.com/371.html</a></p>
</blockquote>
<p>在搭建 LAMP/LNMP 服务器时，会经常遇到 PHP-FPM、FastCGI和CGI 这几个概念。如果对它们一知半解，很难搭建出高性能的服务器。接下来我们就以图形方式，解释这些概念之间的关系。</p>
<a id="more"></a>

<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><p>在整个网站架构中，Web Server（如Apache）只是内容的分发者。举个栗子，如果客户端请求的是 index.html，那么Web Server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-7-15/20096772.jpg"></p>
<p>如果请求的是 index.php，根据配置文件，Web Server知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理，然后交给PHP解析器。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-7-15/72072671.jpg"></p>
<p>当Web Server收到 index.php 这个请求后，会启动对应的 CGI 程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程，接下来再引出这些概念，就好理解多了。</p>
<ul>
<li>CGI：是 Web Server 与 Web Application 之间数据交换的一种协议。</li>
<li>FastCGI：同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化（升级版的CGI）。同样，SCGI 协议与 FastCGI 类似。</li>
<li>以上两者都是协议，不是具体实现。</li>
<li>PHP-CGI：是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</li>
<li>PHP-FPM：是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</li>
<li>这两者是对前两个协议的具体实现。</li>
</ul>
<p>WEB 中，</p>
<ul>
<li>Web Server 一般指Apache、nginx、IIS、Lighttpd、Tomcat等服务器，</li>
<li>Web Application 一般指PHP、Java、Asp.net等应用程序。</li>
</ul>
<h2 id="Module方式"><a href="#Module方式" class="headerlink" title="Module方式"></a>Module方式</h2><p>在了解 CGI 之前，我们先了解一下Web server 传递数据的另外一种方法：PHP Module加载方式。以 Apache 为例，在PHP Module方式中，是不是在 Apache 的配置文件 httpd.conf 中加上这样几句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 加入以下2句</span><br><span class="line">LoadModule php5_module D:&#x2F;php&#x2F;php5apache2_2.dll</span><br><span class="line">AddType application&#x2F;x-httpd-php .php</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改如下内容</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>上面是 Windows 下安装php和apache环境后手动配置，在linux下源码安装大致是这样配置的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;configure --with-mysql&#x3D;&#x2F;usr&#x2F;local --with-apache&#x3D;&#x2F;usr&#x2F;local&#x2F;apache --enable-track-vars</span><br></pre></td></tr></table></figure>

<p>所以，这种方式，他们的共同本质都是用 LoadModule 来加载 php5_module，就是把php作为apache的一个子模块来运行。当通过web访问php文件时，apache就会调用php5_module来解析php代码。</p>
<p>那么php5_module是怎么来将数据传给php解析器来解析php代码的呢？答案是通过sapi。</p>
<p>我们再来看一张图，详细的说说apache 与 php 与 sapi的关系：</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-7-15/81569642.jpg"></p>
<p>从上面图中，我们看出了sapi就是这样的一个中间过程，SAPI提供了一个和外部通信的接口，有点类似于socket，使得PHP可以和其他应用进行交互数据（apache，nginx等）。php默认提供了很多种SAPI，常见的提供给apache和nginx的php5_module、CGI、FastCGI，给IIS的ISAPI，以及Shell的CLI。</p>
<p>所以，以上的apache调用php执行的过程如下：</p>
<p>apache -&gt; httpd -&gt; php5_module -&gt; sapi -&gt; php</p>
<p>好了。apache与php通过php5_module的方式就搞清楚了吧！<br>这种模式将php模块安装到apache中，所以每一次apache结束请求，都会产生一条进程，这个进程就完整的包括php的各种运算计算等操作。</p>
<p>在上图中，我们很清晰的可以看到，apache每接收一个请求，都会产生一个进程来连接php通过sapi来完成请求，可想而知，如果一旦用户过多，并发数过多，服务器就会承受不住了。</p>
<p>而且，把mod_php编进apache时，出问题时很难定位是php的问题还是apache的问题。</p>
<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>CGI（Common Gateway Interface）全称是“通用网关接口”，WEB 服务器与PHP应用进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p>
<p>WEB服务器会传哪些数据给PHP解析器呢？URL、查询字符串、POST数据、HTTP header都会有。所以，CGI就是规定要传哪些数据，以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。</p>
<p>也就是说，CGI就是专门用来和 web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（如php-cgi），cgi程序根据请求提交的参数作处理（解析php），然后输出标准的html语句，返回给web服务器，WEB服务器再返回给客户端，这就是普通cgi的工作原理。</p>
<p>CGI的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给apache和php。他们通过cgi搭线来完成数据传递。这样做的好处了尽量减少2个的关联，使他们2变得更独立。</p>
<p>但是CGI有个蛋疼的地方，就是每一次web请求都会有启动和退出过程，也就是最为人诟病的fork-and-execute模式，这样一在大规模并发下，就死翘翘了。</p>
<h2 id="FastCGI介绍"><a href="#FastCGI介绍" class="headerlink" title="FastCGI介绍"></a>FastCGI介绍</h2><h3 id="FastCGI简单介绍"><a href="#FastCGI简单介绍" class="headerlink" title="FastCGI简单介绍"></a>FastCGI简单介绍</h3><p>从根本上来说，FastCGI是用来提高CGI程序性能的。类似于CGI，FastCGI也可以说是一种协议。</p>
<p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。它还支持分布式的运算, 即 FastCGI<br>程序可以在网站服务器以外的主机上执行，并且接受来自其它网站服务器来的请求。</p>
<p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中，并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中，并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p>
<h3 id="FastCGI的工作原理"><a href="#FastCGI的工作原理" class="headerlink" title="FastCGI的工作原理"></a>FastCGI的工作原理</h3><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求，或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-7-15/86877288.jpg"></p>
<ol>
<li>Web Server启动时载入FastCGI进程管理器（Apache Module或IIS ISAPI等)</li>
<li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可建多个php-cgi)，并等待来自Web Server的连接。</li>
<li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li>
<li>FastCGI子进程完成处理后，将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待，并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</li>
</ol>
<p>FastCGI与CGI特点：</p>
<ol>
<li>对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</li>
<li>由于FastCGI是多进程，所以比CGI多线程消耗更多的服务器内存，php-cgi解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。</li>
</ol>
<h2 id="PHP-FPM介绍"><a href="#PHP-FPM介绍" class="headerlink" title="PHP-FPM介绍"></a>PHP-FPM介绍</h2><p>要了解PHP-FPM，就得先说说PHP-CGI。</p>
<p>PHP-CGI就是PHP实现的自带的CGI管理器。 </p>
<p>虽然是php官方出品，但是这丫的却一点也不给力，性能太差，而且也很麻烦不人性化，主要体现在：</p>
<ol>
<li>php-cgi变更php.ini配置后，需重启php-cgi才能让新的php-ini生效，不可以平滑重启。</li>
<li>直接杀死php-cgi进程，php就不能运行了。</li>
</ol>
<p>上面2个问题，一直让很多人诟病了很久，所以很多人一直还是在用 Module 方式。 直到 2004年一个叫 Andrei Nigmatulin的屌丝发明了PHP-FPM ，这神器的出现就彻底打破了这种局面，这是一个PHP专用的 fastcgi 管理器，它很爽的克服了上面2个问题，而且，还表现在其他方面更表现强劲。</p>
<p>也就是说，PHP-FPM 是对于 FastCGI 协议的具体实现，他负责管理一个进程池，来处理来自Web服务器的请求。目前，PHP5.3版本之后，PHP-FPM是内置于PHP的。<br>因为PHP-CGI只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 php-cgi 进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。同样，PHP-FPM也是用于调度管理PHP解析器php-cgi的管理程序。<br>PHP-FPM通过生成新的子进程可以实现php.ini修改后的平滑重启。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，我们来总结一下，这些技术经过不断的升级，可以解决什么问题（不然也不会升级嘛）。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-7-15/42688749.jpg"></p>
<p>所以，如果要搭建一个高性能的PHP WEB服务器，目前最佳的方式是Apache/Nginx + FastCGI + PHP-FPM(+PHP-CGI)方式了，不要再使用 Module加载或者 CGI 方式啦：）</p>
<p>本文章图片用Visio制作，源文件：php-fpm</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>概念了解：CGI，FastCGI，PHP-CGI与PHP-FPM：<a href="http://www.nowamagic.net/librarys/veda/detail/1319">http://www.nowamagic.net/librarys/veda/detail/1319</a></li>
<li>php中fastcgi和php-fpm是什么东西：<a href="https://www.zybuluo.com/phper/note/50231">https://www.zybuluo.com/phper/note/50231</a></li>
<li>请问CGI、PHP-CGI、PHP-FPM之间是什么关系？<a href="https://groups.google.com/forum/?fromgroups=#!topic/shlug/d5hJKyFzI-g">https://groups.google.com/forum/?fromgroups=#!topic/shlug/d5hJKyFzI-g</a></li>
<li>FastCGI 进程管理器（FPM）：<a href="http://php.net/manual/zh/install.fpm.php">http://php.net/manual/zh/install.fpm.php</a></li>
</ol>
<h2 id="知乎里的解答"><a href="#知乎里的解答" class="headerlink" title="知乎里的解答"></a>知乎里的解答</h2><blockquote>
<p>你(PHP)去和爱斯基摩人(web服务器，如 Apache、nginx)谈生意<br>你说中文(PHP代码)，他说爱斯基摩语(C代码)，互相听不懂，怎么办？那就都把各自说的话转换成英语(FastCGI 协议)吧。<br>怎么转换呢？你就要使用一个翻译机(PHP-FPM) (当然对方也有一个翻译机，那个是他自带的)<br>我们这个翻译机是最新型的，老式的那个（PHP-CGI）被淘汰了。不过它(PHP-FPM)只有年轻人（Linux系统）会用，老头子们（Windows系统）不会摆弄它，只好继续用老式的那个。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CGI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 如何让 Finder 显示隐藏文件和文件夹]]></title>
      <url>/2017/07/15/Mac-%E5%A6%82%E4%BD%95%E8%AE%A9-Finder-%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文地址：<a href="https://sspai.com/post/26273">https://sspai.com/post/26273</a></p>
</blockquote>
<h2 id="如何让-Finder-显示隐藏文件和文件夹"><a href="#如何让-Finder-显示隐藏文件和文件夹" class="headerlink" title="如何让 Finder 显示隐藏文件和文件夹"></a>如何让 Finder 显示隐藏文件和文件夹</h2><p>第一步：打开「终端」应用程序。</p>
<p>第二步：输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</span><br></pre></td></tr></table></figure>

<p>第三步：按下「Return」键确认。</p>
<a id="more"></a>

<p>现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。</p>
<p>如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<p>注：该命令适用于 OS X Mavericks 和 OS X Yosemite 系统。对于还在使用 OS X Mountain Lion 或是更早版本的系统的 Mac 用户来说，命令需要稍微变化一下。</p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《循序渐进学 Docker》学习 - part 1]]></title>
      <url>/2017/06/26/%E3%80%8A%E5%BE%AA%E5%BA%8F%E6%B8%90%E8%BF%9B%E5%AD%A6-Docker%E3%80%8B%E5%AD%A6%E4%B9%A0-part-1/</url>
      <content type="html"><![CDATA[<h2 id="1-Docker-基础"><a href="#1-Docker-基础" class="headerlink" title="1. Docker 基础"></a>1. Docker 基础</h2><p>Docker 工作流程：首先，要在 Linux 服务器上安装 Docker 软件包，并启动 Docker Daemon 守护进程。然后，就可以通过 Docker Client 端发送各种指令，Docker Daemon 守护进程执行完指令，向 Client 端返回结果。</p>
<p>Docker 分层：把一个应用分为任意多个层，比如操作系统是第一层，依赖的库和第三方软件是第二层，应用的软件包和配置文件是第三层。如果两个应用有相同的底层，就可以共享这些层。</p>
<a id="more"></a>

<p>Docker 写时复制/写时拷贝策略：Docker 层次是有优先级的，上层和下层有相同的文件和配置时，上层覆盖下层，数据以上层的数据为准。给每个应用一个优先级最高的空白层，如果需要修改下层的文件，就把这个文件拷贝到这个优先级最高的空白层进行修改，保证下层的文件不做任何改变。这样，对于该应用来说，文件已经修改成功，而从其他应用的角度来看，文件没有发生任何改变。</p>
<p>Docker 内核虚拟化技术：与宿主机运行在相同的 Linux 内核，不需要指令级模拟，性能消耗非常小，是非常轻量化的虚拟化容器。</p>
<p>Docker 具有版本控制和增量更新功能，类似 git。</p>
<p>生产环境的机器上可以同时缓存应用的多个版本镜像，如果新发布的版本有问题，可以快速切换回原来的版本。</p>
<p>因为 Docker 的应用镜像包含应用运行需要的所有软件包、配置和操作系统，所以开发者打包好 Docker 镜像，测试和运维人员从私有仓库下拉，不需要做任何修改，就可以运行起来，并保证和开发者运行的环境完全一致，一处编译，到处运行。</p>
<h2 id="2-Docker-快速搭建-WordPress-博客网站"><a href="#2-Docker-快速搭建-WordPress-博客网站" class="headerlink" title="2. Docker 快速搭建 WordPress 博客网站"></a>2. Docker 快速搭建 WordPress 博客网站</h2><p>只需要两条命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name db --env MYSQL_ROOT_PASSWORD&#x3D;example -d mariadb</span><br><span class="line"></span><br><span class="line">$ docker run --name myWordPress --link db:mysql -p 8080:80 -d wordpress</span><br></pre></td></tr></table></figure>

<p>分析 1：</p>
<blockquote>
<p><code>docker run</code> 是一条 Docker 命令，后面的所有内容都是 Docker 指令的参数。</p>
</blockquote>
<blockquote>
<p>这条指令的含义（从后向前）是启动一个 mariadb 数据库，并且让这个数据库在后台运行。通过环境变量设置数据库管理员root的密码，并给起了一个唯一的名字 db 进行标识。</p>
</blockquote>
<p><code>docker run</code> 首先会从本机检查有没有 mariadb 程序，如果没有，就会从 Docker Hub 搜索并下载该程序， Docker Hub 就像 iPhone 是哪个的 App Store。</p>
<p>分析 2：</p>
<blockquote>
<p>WordPress 是把博客和个性化信息存储到数据库，所以需要和数据库建立连接。<code>--link db:mysql</code> 参数，把 WordPress 和数据库建立起了连接。</p>
</blockquote>
<blockquote>
<p>WordPress 是通过监听 Apache 的 80 端口对外提供服务。通过 <code>-p 8080:80</code> 参数，把原服务的 80<br> 端口映射到 8080，这样就可以通过访问 8080 端口来访问服务。URL为 127.0.0.1:8080</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[青海湖朝圣之旅 第三季 Part 4（多图预警）]]></title>
      <url>/2017/06/04/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%9C%9D%E5%9C%A3%E4%B9%8B%E6%97%85-%E7%AC%AC%E4%B8%89%E5%AD%A3%20part4/</url>
      <content type="html"><![CDATA[<p>已经接近两年没有一次实质性的旅行了，本就计划今年内做一次短途旅行，给自己的眼睛和心灵放放假。</p>
<a id="more"></a>

<h2 id="感动"><a href="#感动" class="headerlink" title="感动"></a>感动</h2><p>都说一方水土养一方人，这里的人朴实、热心，如天空和湖水般澄澈而一尘不染。这里列几件小事加以佐证。</p>
<ol>
<li><p>四年前环湖的第三天早晨，还下着小雨，很冷。我们刚刚踏上行程，同伴的车胎就扎胎了。这也是我这么多年来第一次遇见扎胎。虽然之前见过别人补胎，但是轮到自己动手，还是有着意想不到的难度。而且当时还下着雨，可以说是非常绝望的情况。我们刚把轮胎拆下，路边小店的一位藏族小哥就走了出来，二话不说就将我们拽进了店里，也不顾泥水弄脏地面，熟练得开始帮我们补胎。我们站在旁边，束手无策，眼睁睁看着藏族小哥帮我们补完胎打完气。除了感谢，就是感动。</p>
</li>
<li><p>这次抵达西海镇后，我们找到一个空旷的地方放飞无人机。玩累了之后，看到旁边有一大家子人在野炊，煮着什么东西。我们好奇地凑上前去看看煮了什么东西。他们就主动招呼我们，把各种东西拿给我们吃。我们给他们的小孩子红包他们也不要。我们几个吃到基本都不用吃晚饭。后来他们还邀请我们环湖结束到到他们家去做客，后来由于其他情况未能成行。但这种热情好客着实让我们非常感动。</p>
<p> <img src="http://omp48p40q.bkt.clouddn.com/17-6-4/87087269.jpg"></p>
<p> <img src="http://omp48p40q.bkt.clouddn.com/17-6-4/96578581.jpg"></p>
</li>
<li><p>租车时，我们向老板索要车锁，老板说没有，从来没有向租车者提供过车锁，这里任何地方都不会有人偷车。在路上餐馆吃饭的时候，我们也尽量找靠窗的座位，并时不时向窗外多看两眼。餐馆老板见状就说，放心吧，这里安全得很，不会丢的。这里民风之淳朴，除了感动还是感动。</p>
</li>
<li><p>虽然车子坏了，租车店老板主动驱车赶来帮忙似乎是他分内的，但他大老远赶到我们的所在地，并给更换了一辆新车（美利达挑战者300，前一天我一直想选的车）。考虑到我们的行程安排，将我们向前带了20公里。</p>
</li>
<li><p>不管我们是去买汽车票，还是去吃饭、去邮局等，旅店老板都会将我们带过去，给我们节省了不少时间。最后我们离开时将房间打扫干净，不留垃圾，并将一些路上买的装备送给了他，算是感谢吧。（注：租车店老板和旅店老板是同一人，这里基本都是提供全套服务。）</p>
</li>
<li><p>第二天冷雨中骑行50公里，抵达黑马河的时候手脚麻木冰凉，几无知觉。找了一家餐馆还没有点菜，老板就招呼我们到后厨烤烤火，并给我们倒上了热水。最后结账的时候还给我们打了折，并带上了两壶热水。心里暖暖的。</p>
</li>
<li><p>茶卡盐湖的售票姑娘也非常热心，我们买票的时候下着毛毛雨，她提醒我们说今天肯定拍不出天空之境，不如明天再来，明天天气晴，而且是新园开园一周年，明天免票。无奈我们行程紧，时间有限，第二天肯定来不了，只能买票进去。</p>
</li>
<li><p>在刚察，一天骑行120公里，队友们都累了。旅店老板提前出门迎接，用三轮车将我们带到了住的地方。我们累得不想出门，老板就去买肉和菜，帮我们做晚饭，并只收了一点点加工费。第二天还是主动提供早饭，并冒雨去为我们买好了回西海镇的大巴票。感动无以言表，加老板微信并发了个红包表达谢意。</p>
<p> <img src="http://omp48p40q.bkt.clouddn.com/17-6-4/5322015.jpg"></p>
</li>
<li><p>不知是骑友都如此热心还是受到这里民风的感染，路上我们几个扎胎，骑友们经过都会主动询问情况，并主动提供工具或者帮忙补、换。虽然没有他们的帮忙我们也能完成此次行程，但骑友们主动提供帮助还是让我们十分感动。</p>
</li>
<li><p>还有很多很多，有些记忆不够深刻。留着以后有机会再去感受吧。</p>
</li>
</ol>
<h2 id="几个小遗憾"><a href="#几个小遗憾" class="headerlink" title="几个小遗憾"></a>几个小遗憾</h2><ol>
<li>由于车子是在环湖东湖坏掉的，老板带我们的20公里就把湖边沙漠这个景观错过了，当时天气还非常好，所以非常遗憾。那本该是第一次近距离接触湖水的地方。</li>
<li>最大的遗憾应该是在第二天，驱车去茶卡盐湖的路上，天气状况由小雨到多云，似乎还看到了太阳出来的苗头，司机师傅也说黑马河地区下雨，茶卡不下，这让我们平添了很多期待。但天公仍不作美，在茶卡的两个小时天空一片阴霾，根本拍不出天空之境的感觉。游玩的兴致一下子烟消云散。 </li>
<li>淡季人少，一个主要的原因是油菜花还未盛开。这次没有见到油菜花，景色稍显黯淡。</li>
<li>大部分时间在下雨，天近蓝和湖蓝只在第三天看得到，其余几天拍的照片都挺惨。</li>
<li>还是由于下雨，一直念叨的第四天的连续4公里上坡未能挑战。留着下次吧。</li>
<li>下雨，以及车子故障（4人次车胎问题，也算是人品大爆炸），这次没能完整得骑完360公里环湖路。不过之前两次都完整地骑完了，这次也能原谅自己吧。</li>
<li>日出，还是日出，其实第三天早晨本应该可以看到黑马河日出的，但还是因为心里没底所以没有去看。我就这么与日出无缘么？北戴河的日出，下雨没看成；三亚的日出，下雨没看成；上一次黑马河的日出，下雨没看成；这一次黑马河日出，前一天下雨所以没早起去看。。。</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为什么这么喜欢青海湖这个地方？首先，我最心水的景色就是纯净、天然、没有人工痕迹。青海湖恰恰符合这些要求，即使有人工痕迹，也是牧民围起来的栅栏，用于放牧，而不是商业运作。天空蓝得干净，可以洗眼睛；白云白净而活泼；雪山明亮而庄严；路面干净；湖水清澈，湖蓝色很漂亮；油菜花一望无际；动物很多且是这里的主人，过马路时行人车辆都要避让，人与自然和谐而美好；更不必说这里的人们善良而淳朴了，这构成一幅完美的画面，让我流连忘返。</p>
<p>反观茶卡盐湖，这次尽管是天气的原因没有拍到好照片，但其他几个方面却将其在我心中的完美印象击得粉碎。票价上提了50%情有可原，毕竟已经过去了四年。但是其他的收费项目真是如雨后春笋般出现。首先从售票口到接近盐湖的地方修了一条长长的“观光路”，有观光车来往，走路进去大概要耽误二三十分钟。火车轨道和湖边都被长长的栅栏围了起来，游客与狗不得靠近。原本任何地方都可以直接下到湖里，尽情拍照游玩，现在呢，想要翻过栅栏就有工作人员对你大喊大叫，想要下到湖里拍照只能再多走二三十分钟的路，否则就买票坐小火车去。兴致一下子大打折扣。比这样的天气还要恶心。餐馆、纪念品商店更是多如牛毛，到处散发着过度商业化的铜臭味。已经不是我记忆中纯净的天空之境了。但愿青海湖还能保持其自然纯净，不要受商业化的打扰。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/51772514.jpg"></p>
<p>青海湖我必然还会再去，这样的茶卡盐湖，我想我可能不会再去了。</p>
]]></content>
      
        <categories>
            
            <category> 图集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 青海湖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[青海湖朝圣之旅 第三季 Part 3 （多图预警）]]></title>
      <url>/2017/06/04/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%9C%9D%E5%9C%A3%E4%B9%8B%E6%97%85-%E7%AC%AC%E4%B8%89%E5%AD%A3%20part3/</url>
      <content type="html"><![CDATA[<p>已经接近两年没有一次实质性的旅行了，本就计划今年内做一次短途旅行，给自己的眼睛和心灵放放假。</p>
<a id="more"></a>
<h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>下雨，还是下雨。一路也没有太多风景，同伴也着急赶回去乘火车，遂取消了最后一天的行程，搭乘大巴回到西海镇–环湖的起点。匆匆结束了本次旅行。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/55327230.jpg"></p>
<h2 id="全景"><a href="#全景" class="headerlink" title="全景"></a>全景</h2><p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/52069726.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/20398064.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/77920497.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/29920612.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/97568312.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/50992300.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/29109699.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/31657203.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/42722245.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 图集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 青海湖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[青海湖朝圣之旅 第三季 Part 2 （多图预警）]]></title>
      <url>/2017/06/04/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%9C%9D%E5%9C%A3%E4%B9%8B%E6%97%85-%E7%AC%AC%E4%B8%89%E5%AD%A3%20part2/</url>
      <content type="html"><![CDATA[<p>已经接近两年没有一次实质性的旅行了，本就计划今年内做一次短途旅行，给自己的眼睛和心灵放放假。</p>
<a id="more"></a>

<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>前一天晚上看天气预报说今天有雨，果不其然，起床后就能听到外面的雨声。没办法，还是要赶路啊，今天的任务不多，只有50多公里，下午要赶到黑马河，然后包车去茶卡盐湖。本来挺轻松的一天，被这雨一下子打乱了节奏。</p>
<p>扎胎，还是扎胎，还好已轻车熟路，换好胎立马上路。</p>
<p>即便穿上了雨衣，50公里下来全身还是湿透，手脚麻木冰冷，鞋子里面灌满水可以养金鱼。好在这50公里以下坡为主，且基本一路顺风，大概中午就抵达黑马河安顿下来。</p>
<p>途中海龙兄第二次中招，再次扎胎，只是这次在雨中，没有办法换，且备胎已用完，只能坚持到一个小商店，一行人动手补完了三个轮胎，也是成就感满满。</p>
<p>下雨也无法阻挡我们对于茶卡盐湖的向往。吃完午饭休息片刻就包车前往天空之境。只是雨水一直没停，拍的照片都惨不忍睹，更别提天空之境的感觉了。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/43648678.jpg"></p>
<p>穿着拖鞋去茶卡的貌似只有我们几个了<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/40253221.jpg"></p>
<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><blockquote>
<p>阳光总在风雨后<br>请相信有彩虹</p>
</blockquote>
<p>一觉醒来，惊奇地发现火红的太阳挂在碧绿的湖面，这才拍大腿后悔没有早起去看日出，黑马河的日出闻名遐迩，自己却两次错过，遗憾啊遗憾。</p>
<p>不过今天的天气好到爆炸，也算是弥补了一些遗憾。今天任务繁重，120公里的行程还是以坡路为主，压力比较大。但这样的蓝天白云，这样的雪山，这样的湖水，怎能不停下来记录呢？</p>
<h3 id="雪山"><a href="#雪山" class="headerlink" title="雪山"></a>雪山</h3><p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/40138562.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/72768218.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/89582254.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/57861173.jpg"></p>
<h3 id="天空"><a href="#天空" class="headerlink" title="天空"></a>天空</h3><p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/41274610.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/65916076.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/16110640.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/33727324.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/59443804.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/57530305.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/17322450.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/84307153.jpg"></p>
<h3 id="湖水"><a href="#湖水" class="headerlink" title="湖水"></a>湖水</h3><p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/16991815.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/60948578.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/62291969.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/80697454.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/923508.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/50823298.jpg"></p>
<h3 id="我们"><a href="#我们" class="headerlink" title="我们"></a>我们</h3><p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/58791578.jpg"></p>
<p>在这里抓拍到了最好的一张照片，可惜这不是我们的人<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/16297434.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/10526304.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/91390372.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/6578090.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/95725865.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/95070563.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/70286595.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/74980463.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/22844875.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 图集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 青海湖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[青海湖朝圣之旅 第三季 Part 1 （多图预警）]]></title>
      <url>/2017/06/04/%E9%9D%92%E6%B5%B7%E6%B9%96%E6%9C%9D%E5%9C%A3%E4%B9%8B%E6%97%85-%E7%AC%AC%E4%B8%89%E5%AD%A3%20part1/</url>
      <content type="html"><![CDATA[<p>Best catch from this trip.</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/81997653.jpg"></p>
<p>已经接近两年没有一次实质性的旅行了，本就计划今年内做一次短途旅行，给自己的眼睛和心灵放放假。</p>
<a id="more"></a>

<p>几个月前鸽子曾提及毕业前想出去玩一次，想去青海湖，由于我之前去过两次，让我给点建议。想想自己确实也不知道自己想去哪里，青海湖给我的印象又是好到爆炸，就萌生了自己也再去一次的想法。趁着端午节的三天假期，狠下心来请了三天假，加上接下来的一个周末，8天的时间正好够环湖。说走就走的旅行，不就是这样么？</p>
<p>计划什么的完全不用做了，这条路线本就简单，环湖骑行两次的经历让我对这条线路也了然于心。以下是对本次环湖骑行的一些简单记录，以图片为主。</p>
<h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>5月29日下午，火车抵达西宁，之前从天气预报了解到，青海最近的天气不是很好，要么阴天要么下雨。心里也做好了这次旅途凶多吉少的准备。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/48067496.jpg"></p>
<p>到了之后，发现果真是阴天，尽管有了心理准备，但还是感觉到很低落。在火车站停留片刻，太阳逐渐从厚厚的云层中漏出半个脑袋，天空也慢慢渗出一点蓝色，这才有了一点与天空距离更近的感觉。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/21091796.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/24873346.jpg"></p>
<p>一行5人乘大巴车耗时一个半小时抵达环湖起点–海北藏族自治州西海镇。</p>
<p>找好住宿，租好车，时间还早，就开始了对这片陌生土地的探索。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/17081831.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/73040497.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/84795830.jpg"></p>
<p>由于是旅游淡季，环湖骑行的人比较少。住在同一家旅店的有一个广东的妹子，只身一人来环湖骑行，勇气可嘉，这种事情我都不一定能做到。就这样，我们的队伍壮大到6人。</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>出发，天气似乎还不错。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/93829334.jpg"></p>
<p>环湖东路刚开始就有几个上坡，对于刚刚出发的我们是不小的挑战。犹记得四年前的自己初生牛犊不怕虎，一口气冲到坡顶，而今带着多了20多斤的肥膘在半坡就气喘吁吁。好在还是咬牙坚持到达坡顶。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/46285113.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/31188012.jpg"></p>
<p>仅仅20多公里，妹子的车胎就没气了。检查后发现是轮胎老化，刚开始想补，后来决定直接换。但是这辆车是一辆公路车，拆装难度都极其大。我们折腾了有一个多小时也以失败告终，路上几位热心骑友主动帮忙也没能将其换好。无奈，只好打电话向租车店老板求助，要求其换一辆车。</p>
<p>一个小时后，车子换好了。考虑到第一天的行程比较紧张，有100公里。老板就将我们向前带了20公里。这才保证第一天完成任务。</p>
<p>像风儿一样自由<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/78905802.jpg"></p>
<p>天空触手可及<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/13953071.jpg"></p>
<p>雪山清晰可见，只是距离还是有些远<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/21529038.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/12747707.jpg"></p>
<p>湖水清澈见底，略咸略苦<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/31856606.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/84007068.jpg"></p>
<p>可以以假乱真的毛绒玩具<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/93988479.jpg"></p>
<p>起飞<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/5161349.jpg"></p>
<p>假的洱海，是否有真洱海的感觉？<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/6176193.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/51724586.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/13065274.jpg"></p>
<p>羊羊羊<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/6435283.jpg"></p>
<p>牛牛牛<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/69617105.jpg"></p>
<p>骑马下湖<br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/16198502.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/74410178.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/177919.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/31842491.jpg"><br><img src="http://omp48p40q.bkt.clouddn.com/17-6-4/96146063.jpg"></p>
<p>下午一位伙伴的车子又扎胎了，一天两次也是够了。好在是一辆山地车，我们几分钟就换好新胎继续上路。</p>
<p>未完待续…</p>
]]></content>
      
        <categories>
            
            <category> 图集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 青海湖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 平台下配置 Charles 实现抓取手机网络请求]]></title>
      <url>/2017/05/27/Mac-%E5%B9%B3%E5%8F%B0%E4%B8%8B%E9%85%8D%E7%BD%AE-Charles-%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8F%96%E6%89%8B%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在测试app的时候，往往需要去定位问题，找到所抛出的请求是否异常，Mac 平台下课通过 Charles 来实现，那么如何抓到手机抛出的请求呢？</p>
</blockquote>
<p>前提： Mac 和 手机处在同一局域网下</p>
<a id="more"></a>
<h1 id="1-配置-Charles-实现-HTTP-请求的抓取"><a href="#1-配置-Charles-实现-HTTP-请求的抓取" class="headerlink" title="1. 配置 Charles 实现 HTTP 请求的抓取"></a>1. 配置 Charles 实现 HTTP 请求的抓取</h1><h2 id="1-设置-Charles-代理"><a href="#1-设置-Charles-代理" class="headerlink" title="1. 设置 Charles 代理"></a>1. 设置 Charles 代理</h2><p>Charles -&gt; Proxy -&gt; Proxy Settings -&gt; Proxies, 在 Http Proxy  的 Port 中填写代理的端口，默认为 8888.</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/13486922.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/63870331.jpg"></p>
<h2 id="2-获取-Mac-当前-IP"><a href="#2-获取-Mac-当前-IP" class="headerlink" title="2. 获取 Mac 当前 IP"></a>2. 获取 Mac 当前 IP</h2><p>方法有很多种，介绍一种最简单的</p>
<p>按住 option 键，点击右上角的 WiFi 图标即可</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/18622996.jpg"></p>
<h2 id="3-设置手机-HTTP-代理"><a href="#3-设置手机-HTTP-代理" class="headerlink" title="3. 设置手机 HTTP 代理"></a>3. 设置手机 HTTP 代理</h2><p>设置 -&gt; 无线局域网 -&gt; 与 Mac 同一 WiFi -&gt; 点击右侧的信息 -&gt; 页面最下面设置 HTTP 代理，服务器和端口在前两部中已获得，填入即可。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/54533762.jpg"></p>
<blockquote>
<p><font color=red>注意： 在不使用的时候需要将手机中的 HTTP 代理关闭，否则 mac 关机或者关闭软件后，手机无法正常上网！</font></p>
</blockquote>
<h1 id="2-配置-Charles-实现-HTTPS-请求的抓取"><a href="#2-配置-Charles-实现-HTTPS-请求的抓取" class="headerlink" title="2. 配置 Charles 实现 HTTPS 请求的抓取"></a>2. 配置 Charles 实现 HTTPS 请求的抓取</h1><p>如果不进行下面的设置， https 的 reqeust 和 response 都是乱码，设置完之后 https 就可以抓包了。</p>
<h2 id="1-Mac-端安装证书"><a href="#1-Mac-端安装证书" class="headerlink" title="1. Mac 端安装证书"></a>1. Mac 端安装证书</h2><p>点击 Charles 菜单的 help -&gt; SSL -&gt; proxying -&gt; install charles root certificate</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/98451153.jpg"></p>
<h2 id="2-从-Keychains-找到刚安装的证书，并选择信任"><a href="#2-从-Keychains-找到刚安装的证书，并选择信任" class="headerlink" title="2. 从 Keychains 找到刚安装的证书，并选择信任"></a>2. 从 Keychains 找到刚安装的证书，并选择信任</h2><p>安装完成后 keychains 会自动弹出。选择信任后，需要输入 Mac 的登录密码才能保存。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/74007718.jpg"></p>
<h2 id="3-手机端安装证书"><a href="#3-手机端安装证书" class="headerlink" title="3. 手机端安装证书"></a>3. 手机端安装证书</h2><p>Safari 中输入 chls.pro/ssl， 按提示一步步操作即可。此步需要输入手机密码。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/20454656.jpg"></p>
<blockquote>
<p><font color=red>注意： 对于 iOS 10.3 及以后的版本，安装完成后并不算结束，还需要一步设置：设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置，找到 Charles 的证书，选择信任。</font></p>
</blockquote>
<h2 id="4-Charles-设置"><a href="#4-Charles-设置" class="headerlink" title="4. Charles 设置"></a>4. Charles 设置</h2><p>Charles -&gt; Proxy -&gt; SSL Proxy Setting</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/30483139.jpg"></p>
<p>在弹出的窗口勾选 Enable SSL Proxying, 选择 Add，在弹窗中填入要抓取的域名和端口，如 API，baidu.com， Port: 443</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/62707963.jpg"></p>
<p>配置完成，在手机端打开一个 https 站点试试。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-27/22162539.jpg"></p>
<p>Https 请求的 response 的 content 不再是乱码，可以愉快的玩耍了。</p>
<p>不用的时候最好还是关掉，需要的再打开就好。</p>
]]></content>
      
        
        <tags>
            
            <tag> Charles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【记录】sed 学习]]></title>
      <url>/2017/05/25/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91sed%20%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>本文是慕课网 <a href="http://www.imooc.com/learn/819">《实例妙解sed 和 awk 的秘密》》</a> 的学习记录的第二部分：sed。</p>
<p>Linux 三大利器： grep, sed, awk.</p>
<a id="more"></a>

<h2 id="1-sed-工作原理"><a href="#1-sed-工作原理" class="headerlink" title="1. sed 工作原理"></a>1. sed 工作原理</h2><p>sed 是一种流处理编辑器</p>
<ol>
<li>文本或管道输入（正则选定文本）</li>
<li>读入一行到模式空间（临时缓冲区）</li>
<li>sed命令处理</li>
<li>结果输出到屏幕</li>
<li>重复第2步操作</li>
</ol>
<p>sed 一次处理一行内容</p>
<p>sed 不改变文件内容 （除非重定向）</p>
<h3 id="2-使用-sed-格式"><a href="#2-使用-sed-格式" class="headerlink" title="2. 使用 sed 格式"></a>2. 使用 sed 格式</h3><ul>
<li>命令行格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed [options] &#39;command&#39; file(s)</span><br></pre></td></tr></table></figure>

<p>options: -e, -n</p>
<p>command: 行定位（正则） + sed命令 （操作）</p>
<ul>
<li>脚本格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -f scriptfile file(s)</span><br></pre></td></tr></table></figure>

<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; p 即 print，打印命令</span><br><span class="line">$ sed -n &#39;root&#x2F;p&#39;</span><br></pre></td></tr></table></figure>

<h2 id="2-sed-基本操作命令"><a href="#2-sed-基本操作命令" class="headerlink" title="2. sed 基本操作命令"></a>2. sed 基本操作命令</h2><h3 id="1-p-打印相关命令"><a href="#1-p-打印相关命令" class="headerlink" title="1. -p 打印相关命令"></a>1. -p 打印相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;p&#39; passwd</span><br></pre></td></tr></table></figure>

<p>结果每一行都被输出了两次，为什么？</p>
<p>sed 原理为读入一行，输出一行到屏幕，现在中间又加入一个打印的步骤，所以就出现了重复。</p>
<p>如何规避？</p>
<p>再添加一个 -n 参数即可。该参数一般与 p 参数一起使用，表示只打印出相关的行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n &#39;p&#39; passwd</span><br></pre></td></tr></table></figure>

<h3 id="2-行定位"><a href="#2-行定位" class="headerlink" title="2. 行定位"></a>2. 行定位</h3><ul>
<li>定位一行： x; /pattern/;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印第33行</span><br><span class="line">$ sed -n &#39;33p&#39; passwd</span><br><span class="line">_svn:*:73:73:SVN Server:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure>

<p>通过 nl 命令查看行号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印第33行</span><br><span class="line">$ nl passwd | sed -n &#39;33p&#39;</span><br><span class="line">    33	_svn:*:73:73:SVN Server:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印包含root的行</span><br><span class="line">$ sed -n &#39;&#x2F;root&#x2F;p&#39; passwd</span><br><span class="line">root:*:0:0:System Administrator:&#x2F;var&#x2F;root:&#x2F;bin&#x2F;sh</span><br><span class="line">daemon:*:1:1:System Services:&#x2F;var&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">_cvmsroot:*:212:212:CVMS Root:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure>

<ul>
<li>定位多行（范围）： x,y; /pattery/,x;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印10到20行</span><br><span class="line">$ nl passwd | sed -n &#39;10,20p&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印第一个包含root的行到第一个包含www的行之间所有的行</span><br><span class="line">$ nl passwd | sed -n &#39;&#x2F;root&#x2F;,&#x2F;www&#x2F;p</span><br></pre></td></tr></table></figure>

<p>都是匹配第一个</p>
<ul>
<li>取反操作 !</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 不打印第20行</span><br><span class="line">$ nl passwd | sed -n &#39;20!p&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 不打印10到20行</span><br><span class="line">$ nl passwd | sed -n &#39;10,20!p&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>定位间隔几行 first~step</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 输出奇数行，Mac亲测无效，CentOS 有效</span><br><span class="line">$ nl passwd | sed -n &#39;1~2p&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<h3 id="3-sed-行处理命令"><a href="#3-sed-行处理命令" class="headerlink" title="3. sed 行处理命令"></a>3. sed 行处理命令</h3><h4 id="1-基本操作命令（Mac下失效）"><a href="#1-基本操作命令（Mac下失效）" class="headerlink" title="1. 基本操作命令（Mac下失效）"></a>1. 基本操作命令（Mac下失效）</h4><p>a：新增行</p>
<p>i：插入行</p>
<p>c：替代行</p>
<p>d：删除行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在第5行后面添加分隔线</span><br><span class="line">$ nl passwd | sed &#39;5a &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在第1-5行后面添加分隔线</span><br><span class="line">$ nl passwd | sed &#39;1,5a &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在第1-5行之前添加分隔线</span><br><span class="line">$ nl passwd | sed &#39;5i &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第5行替换为其他内容</span><br><span class="line">$ nl passwd | sed &#39;5c &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | sed &#39;1,5c &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意替换规则与插入规则的区别，连续行的替换是整体替换，而不是一行一行。</p>
</blockquote>
<p>随意感受一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | sed &#39;&#x2F;nologin&#x2F;c &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown</span><br><span class="line">     8	halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    25	zzp:x:1000:1000::&#x2F;home&#x2F;zzp:&#x2F;bin&#x2F;bash</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除行，不会影响源文件</span><br><span class="line">$ nl passwd | sed &#39;&#x2F;root&#x2F;d&#39;</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="2-案例1-修改配置文件"><a href="#2-案例1-修改配置文件" class="headerlink" title="2. 案例1 修改配置文件"></a>2. 案例1 修改配置文件</h4><p>简单的操作就可以替代 vim 了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在文档末尾增加一些内容</span><br><span class="line">$ sed &#39;$a new line \nnew line&#39;</span><br></pre></td></tr></table></figure>

<h4 id="3-案例2-删除文本中的空行"><a href="#3-案例2-删除文本中的空行" class="headerlink" title="3. 案例2 删除文本中的空行"></a>3. 案例2 删除文本中的空行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;&#x2F;^$&#x2F;d&#39; file</span><br></pre></td></tr></table></figure>

<h4 id="4-案例3-log-中提取-error"><a href="#4-案例3-log-中提取-error" class="headerlink" title="4. 案例3 log 中提取 error"></a>4. 案例3 log 中提取 error</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n &#39;&#x2F;Error&#x2F;p&#39; file</span><br></pre></td></tr></table></figure>

<h3 id="4-sed-替换命令-s-（核心，重点）"><a href="#4-sed-替换命令-s-（核心，重点）" class="headerlink" title="4. sed 替换命令 s （核心，重点）"></a>4. sed 替换命令 s （核心，重点）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;nologin&#x2F;login&#x2F;&#39; passwd</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;login</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;login</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;login</span><br><span class="line">lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;login</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;:&#x2F;%&#x2F;&#39; passwd</span><br><span class="line">root%x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">bin%x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon%x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm%x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp%x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<p>这里出现了一个问题，每一行只替换了第一个匹配。</p>
<p>添加全局标记 g 即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;:&#x2F;%&#x2F;g&#39; passwd</span><br><span class="line">root%x%0%0%root%&#x2F;root%&#x2F;bin&#x2F;bash</span><br><span class="line">bin%x%1%1%bin%&#x2F;bin%&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon%x%2%2%daemon%&#x2F;sbin%&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm%x%3%4%adm%&#x2F;var&#x2F;adm%&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp%x%4%7%lp%&#x2F;var&#x2F;spool&#x2F;lpd%&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<h4 id="1-案例：获取网卡中的ip"><a href="#1-案例：获取网卡中的ip" class="headerlink" title="1. 案例：获取网卡中的ip"></a>1. 案例：获取网卡中的ip</h4><p>思路：首先取出 ifconfig 命令输出的第二行，然后将 ip 前后两部分无用的信息分别替换为空即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取出所需行</span><br><span class="line">$ ifconfig | sed -n &#39;&#x2F;inet .*broadcast.*&#x2F;p&#39;</span><br><span class="line">        inet 172.17.147.89  netmask 255.255.240.0  broadcast 172.17.159.255</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 替换ip前的字符为空</span><br><span class="line">$ ifconfig | sed -n &#39;&#x2F;inet .*broadcast.*&#x2F;p&#39; | sed &#39;s&#x2F;inet &#x2F;&#x2F;&#39;</span><br><span class="line">        172.17.147.89  netmask 255.255.240.0  broadcast 172.17.159.255</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 替换ip后的字符为空</span><br><span class="line">$ ifconfig | sed -n &#39;&#x2F;inet .*broadcast.*&#x2F;p&#39; | sed &#39;s&#x2F;inet &#x2F;&#x2F;&#39; | sed &#39;s&#x2F;netmask.*&#x2F;&#x2F;&#39;</span><br><span class="line">        172.17.147.89</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 替换可能漏掉的空格</span><br><span class="line">$ ifconfig | sed -n &#39;&#x2F;inet .*broadcast.*&#x2F;p&#39; | sed &#39;s&#x2F;inet &#x2F;&#x2F;&#39; | sed &#39;s&#x2F;netmask.*&#x2F;&#x2F;&#39; | sed &#39;s&#x2F;\ &#x2F;&#x2F;&#39;</span><br><span class="line">       172.17.147.89</span><br></pre></td></tr></table></figure>

<h2 id="3-sed-高级操作命令"><a href="#3-sed-高级操作命令" class="headerlink" title="3. sed 高级操作命令"></a>3. sed 高级操作命令</h2><h3 id="1-：-多个sed命令，用；分开"><a href="#1-：-多个sed命令，用；分开" class="headerlink" title="1. -{ }： 多个sed命令，用；分开"></a>1. -{ }： 多个sed命令，用；分开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 先将2-10行删除，然后将false替换为true，两个命令写到一起，这里&#123;&#125;不用转义</span><br><span class="line">$ nl passwd | sed &#39;&#123;2,10d;s&#x2F;false&#x2F;true&#x2F;&#125;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">    11	games:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin</span><br><span class="line">    12	ftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin</span><br><span class="line">    13	nobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<h3 id="2-n-读取下一个输入行（用下一个命令处理）"><a href="#2-n-读取下一个输入行（用下一个命令处理）" class="headerlink" title="2. -n 读取下一个输入行（用下一个命令处理）"></a>2. -n 读取下一个输入行（用下一个命令处理）</h3><p>有一个跳行的过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | sed -n &#39;&#123;n;p&#125;&#39;</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     6	sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">     8	halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt</span><br></pre></td></tr></table></figure>

<p>这就实现了偶数行输出。如何输出奇数行？先输入p后跳行即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | sed -n &#39;&#123;p;n&#125;&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     7	shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown</span><br></pre></td></tr></table></figure>

<p>之前的等效做法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nl passwd | sed -n &#39;1~2p&#39;</span><br><span class="line">$ nl passwd | sed -n &#39;2~2p&#39;</span><br></pre></td></tr></table></figure>

<p>2,5,8… 这样输出呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 两种方法等效，推荐使用前者</span><br><span class="line">$ nl passwd | sed -n &#39;2~3p&#39;</span><br><span class="line">$ nl passwd | sed -n &#39;&#123;n;p;n&#125;&#39;</span><br></pre></td></tr></table></figure>

<h3 id="3-amp-符号使用"><a href="#3-amp-符号使用" class="headerlink" title="3. &amp; 符号使用"></a>3. &amp; 符号使用</h3><p>-&amp;: 替换固定字符串<br>优化替换操作。</p>
<p>案例： passwd 文件中的用户名后面添加空格，便于阅读。</p>
<p>分析：</p>
<ul>
<li>用户名都是在行首，可以包含字母，中划线和下划线。</li>
</ul>
<p>使用 &amp;，就没有必要在替换后的字符串中将替换前的正则重新再写一遍。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;^[a-z_-]\+&#x2F;&amp;   &#x2F;&#39; passwd</span><br><span class="line">root   :x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">bin   :x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon   :x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<p>原来的写法可能是这样的，还不一定能实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;^[a-z_-]\+&#x2F;^[a-z_-]\+  &#x2F;&#39; passwd</span><br></pre></td></tr></table></figure>

<h4 id="案例：-大小写转换"><a href="#案例：-大小写转换" class="headerlink" title="案例： 大小写转换"></a>案例： 大小写转换</h4><p>将用户名的首字母转化为大写/小写</p>
<p>元字符 </p>
<ul>
<li>\u \l (首字母转换) </li>
<li>\U \L (字符串转换) </li>
<li>uppercase, lowercase</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;^[a-z_-]\+&#x2F;\u&amp;&#x2F;&#39; passwd</span><br><span class="line">Root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">Bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">Daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">Adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;^[a-z_-]\+&#x2F;\U&amp;&#x2F;&#39; passwd</span><br><span class="line">ROOT:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">BIN:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">DAEMON:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<p>文件名转大写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls *.txt | sed &#39;s&#x2F;^\w\+&#x2F;\U&amp;&#x2F;&#39;</span><br></pre></td></tr></table></figure>


<h3 id="4-（）符号"><a href="#4-（）符号" class="headerlink" title="4. （）符号"></a>4. （）符号</h3><p>一个括号代表一个要被替换的部分。注意转义括号。</p>
<p>示例：数据筛选，获取passwd中 USER, UID  和 GID</p>
<p>一个一个获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;\(^[a-z_-]\+\):.*$&#x2F;\1&#x2F;&#39; passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sed &#39;s&#x2F;\(^[a-z_-]\+\):x:\([0-9]\+\).*$&#x2F;\1 \2&#x2F;&#39; passwd</span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br><span class="line">adm 3</span><br><span class="line">lp 4</span><br><span class="line">sync 5</span><br><span class="line">shutdown 6</span><br><span class="line">halt 7</span><br><span class="line">mail 8</span><br><span class="line">operator 11</span><br><span class="line">games 12</span><br><span class="line">ftp 14</span><br><span class="line">nobody 99</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ $ sed &#39;s&#x2F;\(^[a-z_-]\+\):x:\([0-9]\+\):\([0-9]\+\).*$&#x2F;USER:\1 UID:\2 GID:\3&#x2F;&#39; passwd</span><br><span class="line">USER:root UID:0 GID:0</span><br><span class="line">USER:bin UID:1 GID:1</span><br><span class="line">USER:daemon UID:2 GID:2</span><br><span class="line">USER:adm UID:3 GID:4</span><br><span class="line">USER:lp UID:4 GID:7</span><br><span class="line">USER:sync UID:5 GID:0</span><br><span class="line">USER:shutdown UID:6 GID:0</span><br><span class="line">USER:halt UID:7 GID:0</span><br><span class="line">USER:mail UID:8 GID:12</span><br><span class="line">USER:operator UID:11 GID:0</span><br><span class="line">USER:games UID:12 GID:100</span><br><span class="line">USER:ftp UID:14 GID:50</span><br><span class="line">USER:nobody UID:99 GID:99</span><br></pre></td></tr></table></figure>

<p>示例： 获取网卡IP</p>
<p>分析：之前我们是将IP行分为三段，分别将前后两段无用的信息替换为空。现在我们还是将该行分为三段，但是只要获取第二段即可。</p>
<p>先找到IP所在的行，匹配第一部分，注意别漏了空格。第二部分用括号括起来，用于输出，第三部分不用管。最后将第二部分打印输出即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig | sed -n &#39;&#x2F;inet &#x2F;p&#39; | sed -n &#39;1p&#39; | sed &#39;s&#x2F;[a-z ]\+\([0-9.]\+\) .*$&#x2F;\1&#x2F;&#39;</span><br><span class="line">172.17.147.89</span><br></pre></td></tr></table></figure>

<h3 id="5-rw-命令"><a href="#5-rw-命令" class="headerlink" title="5. rw 命令"></a>5. rw 命令</h3><p>读和写命令，文件互操作</p>
<p>r: 复制指定文件插入到匹配行</p>
<p>w: 复制匹配行拷贝至指定文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo -e &#39;11111\n22222\n33333&#39; &gt; 123.txt</span><br><span class="line">$ echo -e &#39;aaaa\nbbbbb\ncccc&#39; &gt; abc.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 读取文件123.txt，将结果放入到abc.txt 中，放置位置为第一行后。</span><br><span class="line">$ sed &#39;1r 123.txt&#39; abc.txt</span><br><span class="line">aaaa</span><br><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br><span class="line">bbbbb</span><br><span class="line">cccc</span><br></pre></td></tr></table></figure>

<p>如果不指定行号，将会在目录文件的每一行后面插入读取到的文件内容。</p>
<p>读文件后，两个文件的内容都没有发生改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将123.txt文件的第一行写入abc.txt</span><br><span class="line">$ sed &#39;1w abc.txt&#39; 123.txt</span><br></pre></td></tr></table></figure>

<p>写操作后，abc.txt内容受影响，原内容消失，只剩下本次操作写入的内容。不指定行号就相当于文件内容拷贝。</p>
<p>引号中是rw直接操作的文件。使用w的时候要格外小心。</p>
<h3 id="6-q-命令"><a href="#6-q-命令" class="headerlink" title="6. q 命令"></a>6. q 命令</h3><p>退出 sed</p>
<p>在执行中间提前退出sed，没必要每次都执行到最后一行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行到第5行退出sed</span><br><span class="line">$ nl passwd | sed &#39;5q&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     3	daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     4	adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">     5	lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">&#x2F;&#x2F; 找到第一个 nologin 就退出 sed</span><br><span class="line">$ nl passwd | sed &#39;&#x2F;nologin&#x2F;q&#39;</span><br><span class="line">     1	root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">     2	bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-25/45710249.jpg"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【记录】正则表达式学习]]></title>
      <url>/2017/05/24/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>本文是慕课网 <a href="http://www.imooc.com/learn/819">《实例妙解sed 和 awk 的秘密》</a> 的学习记录的第一部分：正则表达式。</p>
<p>Linux 三大利器： grep, sed, awk.</p>
<a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>正则表达式应用场景：查找、取出、匹配符合条件的字符或字符串</p>
<p>学习方法：从小到大、组合的过程。单个字符-&gt;字符串-&gt;表达式。</p>
<p>grep 搜索命令匹配正则表达式例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;root&#39; passwd</span><br><span class="line">root:*:0:0:System Administrator:&#x2F;var&#x2F;root:&#x2F;bin&#x2F;sh</span><br><span class="line">daemon:*:1:1:System Services:&#x2F;var&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">_cvmsroot:*:212:212:CVMS Root:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure>

<h2 id="2-正则单个字符的表示方式"><a href="#2-正则单个字符的表示方式" class="headerlink" title="2. 正则单个字符的表示方式"></a>2. 正则单个字符的表示方式</h2><h3 id="1-特定字符"><a href="#1-特定字符" class="headerlink" title="1. 特定字符"></a>1. 特定字符</h3><p>某个具体的字符，如 ‘1’, ‘a’</p>
<p>使用 grep 搜索命令进行正则表达式的匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;1&#39; passwd</span><br><span class="line">daemon:*:1:1:System Services:&#x2F;var&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">_taskgated:*:13:13:Task Gate Daemon:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">_scsd:*:31:31:Service Configuration Service:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">_eppc:*:71:71:Apple Events User:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>匹配结果被标红</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-24/6251408.jpg"></p>
<h3 id="2-范围内字符"><a href="#2-范围内字符" class="headerlink" title="2. 范围内字符"></a>2. 范围内字符</h3><ul>
<li><strong>单个</strong>字符 []</li>
</ul>
<p>数字字符：[0-9], [278], 表示2/7/8, 注意只匹配一个字符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;[0-9]&#39; passwd</span><br></pre></td></tr></table></figure>

<ul>
<li><p>小写字符：[a-z]</p>
</li>
<li><p>大写字符：[A-Z]</p>
</li>
<li><p>大小写：[a-zA-Z]</p>
</li>
<li><p>符号： [,:!%-().]</p>
</li>
<li><p>反向字符： ^, <strong>必须放在范围之前，[]内部</strong>，如</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;[^0-9]&#39; passwd</span><br></pre></td></tr></table></figure>

<h3 id="3-任意字符"><a href="#3-任意字符" class="headerlink" title="3. 任意字符"></a>3. 任意字符</h3><p>代表任何一个字符： .</p>
<p>注意 ., \.,  [.] 的区别，其中后两个的作用是一样的。</p>
<h3 id="4-其他常用字符"><a href="#4-其他常用字符" class="headerlink" title="4. 其他常用字符"></a>4. 其他常用字符</h3><ul>
<li>边界字符/头尾字符</li>
</ul>
<p>头字符 ^root, 表示以root开头的行，注意与取反字符 [^0-9] 的区别</p>
<p>尾字符 false$, 表示以false结尾的行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;^root&#39; passwd</span><br><span class="line">root:*:0:0:System Administrator:&#x2F;var&#x2F;root:&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">$ grep &#39;false$&#39; passwd</span><br><span class="line">nobody:*:-2:-2:Unprivileged User:&#x2F;var&#x2F;empty:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">daemon:*:1:1:System Services:&#x2F;var&#x2F;root:&#x2F;usr&#x2F;bin&#x2F;false</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>空行： ^$, 头尾相接。</p>
<ul>
<li>元字符（代表普通字符或特殊字符）</li>
</ul>
<p>实质上起替代的作用</p>
<p>\w: 匹配任何字类字符，即字母数字下划线 [a-zA-Z0-9_]</p>
<p>\W: 匹配任何非字类字符，即 [^a-zA-Z0-9_]</p>
<p>\b: 代表单词的分隔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;\btime\b&#39; file</span><br></pre></td></tr></table></figure>

<p>只匹配包含单词 time 的行，不匹配 timezone，showtime 等。</p>
<h2 id="3-字符组合"><a href="#3-字符组合" class="headerlink" title="3. 字符组合"></a>3. 字符组合</h2><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h3><p>‘root’, ‘1000’, ‘r..t’ (r开头，t结束，长度为4的字符串)</p>
<p>‘[A-Z][a-z]’ (一个大写字母加一个小写字母)</p>
<p>‘[0-9][0-9]’ (两个连续的数字，<strong>正则为最大化匹配，所以四位数也会匹配，五位数也会匹配前四位</strong>)</p>
<h3 id="2-重复"><a href="#2-重复" class="headerlink" title="2. 重复"></a>2. 重复</h3><ul>
<li><p>*: 0-n 次匹配前面的字符或表达式</p>
</li>
<li><p>+: 1-n 次匹配</p>
</li>
<li><p>?: 0-1 次匹配</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可能的匹配结果： s, se, see, seee...</span><br><span class="line">$ grep &#39;se*&#39; passwd</span><br><span class="line">&#x2F;&#x2F; 可能的匹配结果： se, see, seee...</span><br><span class="line">$ grep &#39;se\+&#39; passwd</span><br><span class="line">&#x2F;&#x2F; 可能的匹配结果： s, se, 只有两种</span><br><span class="line">$ grep &#39;se\?&#39; passwd</span><br></pre></td></tr></table></figure>

<p>后两者注意要进行转义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配字符串，要加括号 se, sese, sese...</span><br><span class="line">$ grep &#39;\(se\)\+&#39; passwd</span><br></pre></td></tr></table></figure>

<p>注意括号也要进行转义。</p>
<ul>
<li>重复特定次数 {n,m}</li>
</ul>
<p>*: 相当于 {0,} </p>
<p>+: 相当于 {1,}</p>
<p>?: 相当于 {0,1}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配两到三位数字</span><br><span class="line">$ grep &#39;[0-9]\&#123;2,3\&#125;&#39; passwd</span><br></pre></td></tr></table></figure>

<p>注意大括号也要转义。</p>
<ul>
<li>任意字符串： .*<br>(即任意单字符重复0-n次)</li>
</ul>
<p>如： ^r.*,  r.*t</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;^r.*&#39; passwd</span><br><span class="line">root:*:0:0:System Administrator:&#x2F;var&#x2F;root:&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：正则贪婪匹配的规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;\bd.*e\b&#39; passwd</span><br></pre></td></tr></table></figure>

<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-24/65316894.jpg"></p>
<p>多么贪婪，我只想要匹配类似 dislike 这种词。</p>
<p>这时候就不能重复任意字符了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;\bd[a-z]*e\b&#39; passwd</span><br></pre></td></tr></table></figure>

<p>这样改就好了。</p>
<p>尽量去缩小要匹配的范围，才能避免踩这些坑。</p>
<h3 id="3-逻辑"><a href="#3-逻辑" class="headerlink" title="3. 逻辑"></a>3. 逻辑</h3><ul>
<li>逻辑或 |</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;bin&#x2F;\(false\|true\)&#39; passwd</span><br></pre></td></tr></table></figure>

<h2 id="4-正则案例"><a href="#4-正则案例" class="headerlink" title="4. 正则案例"></a>4. 正则案例</h2><h3 id="1-匹配4-10位QQ号"><a href="#1-匹配4-10位QQ号" class="headerlink" title="1. 匹配4-10位QQ号"></a>1. 匹配4-10位QQ号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;^[0-9]\&#123;4,10\&#125;$&#39; file</span><br></pre></td></tr></table></figure>

<h3 id="2-匹配15或18位身份证号，包括X"><a href="#2-匹配15或18位身份证号，包括X" class="headerlink" title="2. 匹配15或18位身份证号，包括X"></a>2. 匹配15或18位身份证号，包括X</h3><p>分析：</p>
<ul>
<li>第一位不能为0</li>
<li>最后一位的范围要扩大</li>
<li>中间为13或16位重复数字</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 先写逻辑，最后加头尾和转义</span><br><span class="line">$ grep &#39;^[1-9]\([0-9]\&#123;13\&#125;\|[0-9]\&#123;16\&#125;\)[0-9xX]$&#39; file</span><br></pre></td></tr></table></figure>

<h3 id="3-匹配密码"><a href="#3-匹配密码" class="headerlink" title="3. 匹配密码"></a>3. 匹配密码</h3><p>分析：</p>
<ul>
<li>密码保护字母数字下划线，使用元字符 \w</li>
<li>可1次或多次重复 +</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#39;^\w\+$&#39; file</span><br></pre></td></tr></table></figure>

<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-24/91639479.jpg"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《财经》CMS后台查询功能的实现（基于Laravel Repository）]]></title>
      <url>/2017/05/24/%E3%80%8A%E8%B4%A2%E7%BB%8F%E3%80%8BCMS%E5%90%8E%E5%8F%B0%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%9F%BA%E4%BA%8ELaravel-Repository%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>使用 <a href="https://github.com/andersao/l5-repository">RequestCriteria</a> 统一搜索功能，可自动根据 url 按字段进行搜索，无需写方法</p>
<a id="more"></a>

<h1 id="第一部分-单表查询"><a href="#第一部分-单表查询" class="headerlink" title="第一部分 单表查询"></a>第一部分 单表查询</h1><h2 id="1-后台搜索框的基本代码："><a href="#1-后台搜索框的基本代码：" class="headerlink" title="1. 后台搜索框的基本代码："></a>1. 后台搜索框的基本代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel-group&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel panel-default&quot; style&#x3D;&quot;border: none;&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">            &lt;h4 class&#x3D;&quot;panel-title&quot;&gt;</span><br><span class="line">                &lt;a data-toggle&#x3D;&quot;collapse&quot; href&#x3D;&quot;#wrapper_search&quot;</span><br><span class="line">                   aria-expanded&#x3D;&quot;false&quot; @if(false &#x3D;&#x3D; $searchMode)class&#x3D;&quot;collapsed&quot; @endif &gt;</span><br><span class="line">                    搜索相关</span><br><span class="line">                &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;wrapper_search&quot; class&#x3D;&quot;panel-collapse collapse @if(true &#x3D;&#x3D; $searchMode)in @endif&quot;</span><br><span class="line">             aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;portlet-heading&quot;&gt;</span><br><span class="line">                    &lt;form id&#x3D;&quot;frm_search_info&quot; class&#x3D;&quot;text-dark form-horizontal&quot; action&#x3D;&quot;&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;hidden&quot; value&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;form-group col-sm-4 pull-left&quot;&gt;</span><br><span class="line">                            &lt;label for&#x3D;&quot;order_sn&quot; class&#x3D;&quot;control-label col-sm-4&quot;&gt;订单号&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;div class&#x3D;&quot;col-sm-8&quot;&gt;</span><br><span class="line">                                &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;title&quot; name&#x3D;&quot;id&quot;</span><br><span class="line">                                       value&#x3D;&quot;&#123;&#123;isset($searchCondition[&#39;id&#39;])?$searchCondition[&#39;id&#39;]:&#39;&#39;&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class&#x3D;&quot;form-group col-sm-4 pull-left&quot;&gt;</span><br><span class="line">                            &lt;label for&#x3D;&quot;snap_goods_name&quot; class&#x3D;&quot;control-label col-sm-4&quot;&gt;商品名称&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;div class&#x3D;&quot;col-sm-8&quot;&gt;</span><br><span class="line">                                &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;title&quot; name&#x3D;&quot;snap_goods_name&quot;</span><br><span class="line">                                       value&#x3D;&quot;&#123;&#123;isset($searchCondition[&#39;snap_goods_name&#39;])?$searchCondition[&#39;snap_goods_name&#39;]:&#39;&#39;&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class&#x3D;&quot;form-group col-sm-4 pull-left&quot;&gt;</span><br><span class="line">                            &lt;label for&#x3D;&quot;paymentInfo.payment_type&quot; class&#x3D;&quot;control-label col-sm-4&quot;&gt;支付方式&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;div class&#x3D;&quot;col-sm-8&quot;&gt;</span><br><span class="line">                                &lt;select class&#x3D;&quot;form-control input-lg select2&quot; id&#x3D;&quot;paymentInfo.payment_type&quot; name&#x3D;&quot;paymentInfo.payment_type&quot;</span><br><span class="line">                                        style&#x3D;&quot;width: 192px;&quot;&gt;</span><br><span class="line">                                    &lt;option value&#x3D;&quot;&quot;&gt;全部&lt;&#x2F;option&gt;</span><br><span class="line">                                    @if(isset($paymentType))</span><br><span class="line">                                        @foreach($paymentType as $index &#x3D;&gt; $item)</span><br><span class="line">                                            &lt;option value&#x3D;&quot;&#123;&#123;$index&#125;&#125;&quot;</span><br><span class="line">                                                    @if(isset($searchCondition[&#39;paymentInfo.payment_type&#39;]) &amp;&amp; $index &#x3D;&#x3D; $searchCondition[&#39;paymentInfo.payment_type&#39;]) selected&#x3D;&quot;selected&quot; @endif&gt;&#123;&#123;$item&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">                                        @endforeach</span><br><span class="line">                                    @endif</span><br><span class="line">                                &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;form-group col-sm-4 pull-left&quot;&gt;</span><br><span class="line">                            &lt;label for&#x3D;&quot;created_at@&quot; class&#x3D;&quot;control-label col-sm-4&quot;&gt;至&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;div class&#x3D;&quot;col-sm-8&quot;&gt;</span><br><span class="line">                                &lt;div class&#x3D;&quot;input-group datetimepicker date&quot; id&#x3D;&quot;end_time_picker&quot;&gt;</span><br><span class="line">                                    &lt;input class&#x3D;&quot;form-control&quot; id&#x3D;&quot;created_at@&quot;</span><br><span class="line">                                           name&#x3D;&quot;created_at@&quot; type&#x3D;&quot;text&quot;</span><br><span class="line">                                           value&#x3D;&quot;@if(isset($searchCondition[&#39;created_at@&#39;]) &amp;&amp; $searchCondition[&#39;created_at@&#39;])&#123;&#123;$searchCondition[&#39;created_at@&#39;]&#125;&#125;@endif&quot;&gt;</span><br><span class="line">                                    &lt;span class&#x3D;&quot;input-group-addon&quot; for&#x3D;&quot;created_at@&quot;&gt;</span><br><span class="line">                            &lt;span class&#x3D;&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;span&gt;</span><br><span class="line">                                &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class&#x3D;&quot;form-group col-sm-4 pull-right&quot;&gt;</span><br><span class="line">                            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default m-l-10&quot; id&#x3D;&quot;btn_clear&quot;&gt;清空&lt;&#x2F;button&gt;</span><br><span class="line">                            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-purple m-l-10&quot; id&#x3D;&quot;btn_export&quot;&gt;</span><br><span class="line">                                Excel 导出</span><br><span class="line">                            &lt;&#x2F;button&gt;</span><br><span class="line">                            &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary m-l-10&quot; id&#x3D;&quot;btn_search&quot;&gt;搜索&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class&#x3D;&quot;clearfix&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>要求表单中的 name 与数据表中的字段名完全一致。<br>注意：这里是 button，而不是 submit</p>
<h2 id="2-在YourModelRepositoryEloquent-php-如FlashRepositoryEloquent-php-中添加-fieldSearchable-字段"><a href="#2-在YourModelRepositoryEloquent-php-如FlashRepositoryEloquent-php-中添加-fieldSearchable-字段" class="headerlink" title="2. 在YourModelRepositoryEloquent.php (如FlashRepositoryEloquent.php) 中添加 $fieldSearchable 字段"></a>2. 在YourModelRepositoryEloquent.php (如FlashRepositoryEloquent.php) 中添加 $fieldSearchable 字段</h2><p>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected $fieldSearchable &#x3D; [</span><br><span class="line">    &#39;id&#39;,</span><br><span class="line">    &#39;snap_goods_name&#39; &#x3D;&gt; &#39;like&#39;,</span><br><span class="line">    &#39;username&#39;,</span><br><span class="line">    &#39;order_status&#39;,</span><br><span class="line">    &#39;created_at&#39; &#x3D;&gt; &quot;&gt;&#x3D;&quot;,</span><br><span class="line">    &#39;created_at@&#39; &#x3D;&gt; &quot;&lt;&#x3D;&quot;,</span><br><span class="line">    &#39;source_id&#39;,</span><br><span class="line">    &#39;paymentInfo.payment_type&#39;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>要列出所有需要进行搜索的字段。</li>
<li>等于的可以省略，</li>
<li>模糊搜索用 like，</li>
<li>范围搜索也直接写。</li>
<li>如果一个字段需要用一次以上，需要对 key 进行重写，加一个@</li>
</ul>
<p>其中，最后一个功能是在 BaseRepositoryEloquent 中定义的。</p>
<p>默认的键值间的分隔符为：， 如<a href="http://prettus.local/users?search=name:John">http://prettus.local/users?search=name:John</a> Doe;email:<a href="mailto:&#106;&#x6f;&#104;&#110;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#106;&#x6f;&#104;&#110;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a><br>可以进行自定义。<br>在 BaseRepositoryEloquent.php 的构造方法中，<br><code>$this-&gt;keyValueSeparator = &#39;|:&#39;</code>。</p>
<p>组件中默认不包含范围选择符，即sql中的between用法。我们进行了改写，以支持该用法。</p>
<p>BaseRepositoryEloquent 中，添加解析搜索url的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function parserSearchData($searchData)</span><br><span class="line">&#123;</span><br><span class="line">    if (!empty($searchData) &amp;&amp; is_array($searchData)) &#123;</span><br><span class="line">        foreach ($searchData as $index &#x3D;&gt; $item) &#123;</span><br><span class="line">            $method &#x3D; sprintf(&quot;parser%s4Search&quot;, ucfirst(camel_case(str_replace(&#39;@&#39;, &#39;&#39;, $index))));</span><br><span class="line">            $model &#x3D; $this-&gt;getModel();</span><br><span class="line">            if (method_exists($model, $method)) &#123;</span><br><span class="line">                $searchData[$index] &#x3D; $model-&gt;&#123;$method&#125;($item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $searchData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以及解析原始搜索数据的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public function parserOriginSearchData($search)</span><br><span class="line">&#123;</span><br><span class="line">    $searchData &#x3D; [];</span><br><span class="line">    if (stripos($search, $this-&gt;keyValueSeparator)) &#123;</span><br><span class="line">        $fields &#x3D; explode($this-&gt;paramSeparator, $search);</span><br><span class="line"></span><br><span class="line">        foreach ($fields as $row) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                list($field, $value) &#x3D; explode($this-&gt;keyValueSeparator, $row);</span><br><span class="line">                $searchData[trim($field)] &#x3D; trim($value);</span><br><span class="line">            &#125; catch (\Exception $e) &#123;</span><br><span class="line">                &#x2F;&#x2F;Surround offset error</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $searchData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务需要，添加了整合后的获取搜索参数的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public function getSearchData($param &#x3D; null, $is_origin &#x3D; true)</span><br><span class="line">&#123;</span><br><span class="line">    $search &#x3D; $this-&gt;request-&gt;get(config(&#39;repository.criteria.params.search&#39;, &#39;search&#39;), null);</span><br><span class="line">    $searchData &#x3D; $this-&gt;parserOriginSearchData($search);</span><br><span class="line">    if (false &#x3D;&#x3D; $is_origin) &#123;</span><br><span class="line">        $searchData &#x3D; $this-&gt;parserSearchData($searchData);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!empty($param)) &#123;</span><br><span class="line">        if (isset($searchData[$param])) &#123;</span><br><span class="line">            $searchData &#x3D; $searchData[$param];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $searchData &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $searchData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-js-文件中添加解析url的方法。"><a href="#3-js-文件中添加解析url的方法。" class="headerlink" title="3. js 文件中添加解析url的方法。"></a>3. js 文件中添加解析url的方法。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 搜索 按钮</span><br><span class="line">searchWithParams(&#39;&#x2F;magazine&#x2F;order?page&#x3D;1&#39;);</span><br><span class="line"></span><br><span class="line">function searchWithParams(url) &#123;</span><br><span class="line">    $(&quot;#btn_search&quot;).click(function () &#123;</span><br><span class="line">        var params &#x3D; &#123;&#125;;</span><br><span class="line">        $(&quot;#frm_search_info select, #frm_search_info input[type&#x3D;text], #frm_search_info input[type&#x3D;hidden]&quot;).each(function () &#123;</span><br><span class="line">            var value &#x3D; $(this).val();</span><br><span class="line">            if (&#39;&#39; !&#x3D; value) &#123;</span><br><span class="line">                params[$(this).attr(&#39;name&#39;)] &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        if (!$.isEmptyObject(params)) &#123;</span><br><span class="line">            url +&#x3D; &quot;&amp;search&#x3D;&quot; + parserParams2Url(params);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location.href &#x3D; url;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法实现了对所有输入框、下拉框等搜索框内容的收集并处理，生成一个 Repository 可解析的 url。</p>
<h2 id="4-回显的数据不需要通过控制器获取后回传，在模板中通过-searchCondition-全局变量获取即可"><a href="#4-回显的数据不需要通过控制器获取后回传，在模板中通过-searchCondition-全局变量获取即可" class="headerlink" title="4. 回显的数据不需要通过控制器获取后回传，在模板中通过 $searchCondition 全局变量获取即可"></a>4. 回显的数据不需要通过控制器获取后回传，在模板中通过 $searchCondition 全局变量获取即可</h2><p>如何使用？<br>控制器中的方法会非常简洁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function getIndex(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $flashes &#x3D; $this-&gt;repositoryInterface-&gt;paginate();</span><br><span class="line"></span><br><span class="line">    return View::make(&quot;flash&#x2F;index&quot;, array(</span><br><span class="line">        &quot;flashes&quot; &#x3D;&gt; $flashes,</span><br><span class="line">        &quot;flashTypes&quot; &#x3D;&gt; Flash::$flashTypes,</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="第二部分-跨表查询"><a href="#第二部分-跨表查询" class="headerlink" title="第二部分 跨表查询"></a>第二部分 跨表查询</h1><p>上述搜索方法只是实现了单表搜索，如果搜索涉及到跨表该怎么处理？</p>
<p>场景：在模型Order的列表页进行搜索，但搜索的关键字是模型Payment的一个字段，模型Payment有一个指向模型Order的外键 order_id。</p>
<p>实现：</p>
<h2 id="1-在-app-Models-Order-中，建立与-Payment-模型的关联关系。"><a href="#1-在-app-Models-Order-中，建立与-Payment-模型的关联关系。" class="headerlink" title="1. 在 app/Models/Order 中，建立与 Payment 模型的关联关系。"></a>1. 在 app/Models/Order 中，建立与 Payment 模型的关联关系。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 支付信息关联关系</span><br><span class="line"> * @return \Illuminate\Database\Eloquent\Relations\HasOne</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function paymentInfo()</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;hasOne(&#39;App\Models\Payment&#39;, &#39;order_id&#39;, &#39;id&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Order-的模板文件（列表-resources-views-backend-order-index-blade-php）中，搜索相关部分的-name-和字段名都要加上关联关系的方法前缀。"><a href="#2-Order-的模板文件（列表-resources-views-backend-order-index-blade-php）中，搜索相关部分的-name-和字段名都要加上关联关系的方法前缀。" class="headerlink" title="2. Order 的模板文件（列表 resources/views/backend/order/index.blade.php）中，搜索相关部分的 name 和字段名都要加上关联关系的方法前缀。"></a>2. Order 的模板文件（列表 resources/views/backend/order/index.blade.php）中，搜索相关部分的 name 和字段名都要加上关联关系的方法前缀。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;form-group col-sm-4 pull-left&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;paymentInfo.payment_type&quot; class&#x3D;&quot;control-label col-sm-4&quot;&gt;支付方式&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-8&quot;&gt;</span><br><span class="line">        &lt;select class&#x3D;&quot;form-control input-lg select2&quot; id&#x3D;&quot;paymentInfo.payment_type&quot; name&#x3D;&quot;paymentInfo.payment_type&quot;</span><br><span class="line">                style&#x3D;&quot;width: 192px;&quot;&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;&quot;&gt;全部&lt;&#x2F;option&gt;</span><br><span class="line">            @if(isset($paymentType))</span><br><span class="line">                @foreach($paymentType as $index &#x3D;&gt; $item)</span><br><span class="line">                    &lt;option value&#x3D;&quot;&#123;&#123;$index&#125;&#125;&quot;</span><br><span class="line">                            @if(isset($searchCondition[&#39;paymentInfo.payment_type&#39;]) &amp;&amp; $index &#x3D;&#x3D; $searchCondition[&#39;paymentInfo.payment_type&#39;]) selected&#x3D;&quot;selected&quot; @endif&gt;&#123;&#123;$item&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">                @endforeach</span><br><span class="line">            @endif</span><br><span class="line">        &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-在YourModelRepositoryEloquent-php-如FlashRepositoryEloquent-php-中添加-fieldSearchable-字段"><a href="#3-在YourModelRepositoryEloquent-php-如FlashRepositoryEloquent-php-中添加-fieldSearchable-字段" class="headerlink" title="3. 在YourModelRepositoryEloquent.php (如FlashRepositoryEloquent.php) 中添加 $fieldSearchable 字段"></a>3. 在YourModelRepositoryEloquent.php (如FlashRepositoryEloquent.php) 中添加 $fieldSearchable 字段</h2><p>如：</p>
<pre><code>protected $fieldSearchable = [
    &#39;paymentInfo.payment_type&#39;
];

要与模板文件的name一致。
</code></pre>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[晚霞无限好，只是下班晚]]></title>
      <url>/2017/05/23/%E6%99%9A%E9%9C%9E%E6%97%A0%E9%99%90%E5%A5%BD%EF%BC%8C%E5%8F%AA%E6%98%AF%E4%B8%8B%E7%8F%AD%E6%99%9A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>天地有大美而不言。一直以来，我都是喜欢自然的美景，人工的建筑再怎么精致宏伟也不感冒。在大自然的波诡云谲面前，人类的巧夺天工也不值一提。</p>
</blockquote>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/95812189-file_1495509134387_3a99.jpg"></p>
<a id="more"></a>

<p>昨天下了小半天的雨。由于雨伞一直落在单位，导致早晨上班的时候出门困难，折返两次回屋去找雨伞，无果。最终冒雨前行，基本湿透。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/78653587-file_1495508664383_490e.jpg"></p>
<p>忙碌的一天很快就过去了，下班时太阳已下山。打开朋友圈，发现已经被晚霞刷屏。</p>
<p>错过此等美景实属遗憾，遂盗图数张，贴于此。侵删。</p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/78018613-file_1495509134710_17b32.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/41585586-file_1495509134561_f0d0.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/14621647-file_1495509134265_f79.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/60977595-file_1495509134110_11497.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/57319255-file_1495509133942_a29e.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/5676366-file_1495509133767_77d1.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/3171034-file_1495509133623_65d6.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/90260416-file_1495509510830_769.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/90429892-file_1495509510989_926c.jpg"></p>
<p><img src="http://omp48p40q.bkt.clouddn.com/17-5-23/98195669-file_1495509511284_dabb.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 图集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 晚霞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bd：快速返回某级父目录而不用冗余地输入 “cd ..”]]></title>
      <url>/2017/05/20/bd%EF%BC%9A%E5%BF%AB%E9%80%9F%E8%BF%94%E5%9B%9E%E6%9F%90%E7%BA%A7%E7%88%B6%E7%9B%AE%E5%BD%95%E8%80%8C%E4%B8%8D%E7%94%A8%E5%86%97%E4%BD%99%E5%9C%B0%E8%BE%93%E5%85%A5-%E2%80%9Ccd-%E2%80%9D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在 Linux 系统上通过命令行切换文件夹时，为了回到父目录（长路径），我们通常会重复输入 cd 命令（<code>cd ../../..</code>），直到进入感兴趣的目录。</p>
</blockquote>
<p>转自 <a href="https://linux.cn/article-8491-1.html">Linux 中国 bd：快速返回某级父目录而不用冗余地输入 “cd ..”</a>，有删改。</p>
<p>建议阅读： <a href="https://linux.cn/article-5983-1.html">Autojump - 一个快速浏览 Linux 文件系统的高级 “cd” 命令</a></p>
<a id="more"></a>

<p>在 Linux 系统上通过命令行切换文件夹时，为了回到父目录（长路径），我们通常会重复输入 cd 命令（<code>cd ../../..</code>），直到进入感兴趣的目录。</p>
<p>对于经验丰富的 Linux 用户或需要进行各种不同任务的系统管理员而言，这可能非常乏味，因此希望在操作系统时有一个快捷方式来简化工作。</p>
<p>bd 是用于切换文件夹的便利工具，它可以使你快速返回到父目录，而不必重复键入 <code>cd ../../..</code> 。 你可以可靠地将其与其他 Linux 命令组合以执行几个日常操作。</p>
<h2 id="安装-bd"><a href="#安装-bd" class="headerlink" title="安装 bd"></a>安装 <a href="https://github.com/vigneshwaranr/bd">bd</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;bd https:&#x2F;&#x2F;raw.github.com&#x2F;vigneshwaranr&#x2F;bd&#x2F;master&#x2F;bd</span><br><span class="line">chmod +rx &#x2F;usr&#x2F;local&#x2F;bin&#x2F;bd</span><br><span class="line">echo &#39;alias bd&#x3D;&quot;. bd -si&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果 shell 使用的是 zsh，后面两步的 <code>.bashrc</code> 要替换成 <code>.zshrc</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用方法很简单。</p>
<p>假定当前目录为<code>/home/user/project/src/org/main/site/utils/file/reader/whatever</code>，想要快速跳转至 site 目录，只需输入 <code>bd site</code> 即可。甚至只需输入目前的前几个字母都可以，比如 <code>bd si</code>。</p>
<p>配合 autojump 使用，爽歪歪。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 项目中 远程把图片下载到本地]]></title>
      <url>/2017/05/15/Laravel-%E9%A1%B9%E7%9B%AE%E4%B8%AD-%E8%BF%9C%E7%A8%8B%E6%8A%8A%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如今，开发应用时，我们会从不断增多的大量专用组件中选择合适的。既然已经有了 <a href="https://github.com/guzzle/guzzle"><code>guzzlehttp/guzzle</code> 组件</a>，为什么还要浪费时间自己编写处理HTTP请求和响应库呢？</p>
</blockquote>
<a id="more"></a>

<p>最近在做第三方登录，用户的头像处理成了一个问题。原来用户系统中的头像都是以文件的形式保存在我们自己的服务器中。</p>
<p>第三方账号的头像是以 url 的形式传入后台，考虑先通过后台将图片下载在服务器，重命名后存表。这样就与之前的用户系统一致，不用改代码。</p>
<h2 id="安装-guzzle-组件"><a href="#安装-guzzle-组件" class="headerlink" title="安装 guzzle 组件"></a>安装 guzzle 组件</h2><p>安装 guzzle 组件需要先安装 composer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Install Composer</span><br><span class="line">curl -sS https:&#x2F;&#x2F;getcomposer.org&#x2F;installer | php</span><br></pre></td></tr></table></figure>
<p>使用 composer 安装 guzzle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php composer.phar require guzzlehttp&#x2F;guzzle</span><br><span class="line"># 或者</span><br><span class="line"> composer require guzzlehttp&#x2F;guzzle</span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><a href="http://docs.guzzlephp.org/en/latest/#">guzzle 文档</a></p>
<p>命名空间中引入 guzzle 依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use GuzzleHttp\Client;</span><br><span class="line">use GuzzleHttp\Exception\GuzzleException;</span><br></pre></td></tr></table></figure>

<p>保存头像，这里使用 md5 加密 url 作为文件名，基本可以保证唯一性。后缀选择 jpg，不知道会不会引起问题，暂时先这么处理了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (!empty($avatar)) &#123;</span><br><span class="line">    if (strpos($avatar, &#39;http:&#x2F;&#x2F;&#39;) &#x3D;&#x3D;&#x3D; 0 || strpos($avatar, &#39;https:&#x2F;&#x2F;&#39;) &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">        $client &#x3D; new Client([&#39;verify&#39; &#x3D;&gt; false]);  &#x2F;&#x2F;忽略SSL错误</span><br><span class="line">        $path &#x3D; APP_ROOT . config(&#39;common.picture_path.user_avatar_path&#39;) . md5($avatar) . &#39;.jpg&#39;;</span><br><span class="line">        $response &#x3D; $client-&gt;get($avatar, [&#39;save_to&#39; &#x3D;&gt; $path]);  &#x2F;&#x2F;保存远程url到文件</span><br><span class="line">        if ($response-&gt;getStatusCode() &#x3D;&#x3D; 200) &#123;</span><br><span class="line">            $avatar &#x3D; md5($avatar) . &#39;.jpg&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将生成后的文件名入库即可。</p>
]]></content>
      
        <categories>
            
            <category> Laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在iTerm2中使用Zmodem传输文件]]></title>
      <url>/2017/05/12/%E5%9C%A8iTerm2%E4%B8%AD%E4%BD%BF%E7%94%A8Zmodem%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>rz,sz命令传输文件，比使用scp要方便得多，特别是在图形界面打开终端，SSH登陆到远程机器需要传输文件的时候。但是MacOS里Terminal.app并不支持Zmodel传输。好在iTerm2具备较强的扩展性可以通过简单的配置支持Zmodem传输。</p>
</blockquote>
<a id="more"></a>

<p>Zmodem 是跨平台的文件传输协议，可以很方便的在不同的操作系统之间接传输文件。lzrsz 是该协议的实现方式：<a href="https://ohse.de/uwe/software/lrzsz.html">https://ohse.de/uwe/software/lrzsz.html</a> 。安装后，在 Mac 的 ITerm2 中用 SSH 登陆远程的 Linux 主机，然后用 rz 、sz 命令传输文件。</p>
<h2 id="1-安装-lrzsz"><a href="#1-安装-lrzsz" class="headerlink" title="1. 安装 lrzsz"></a>1. 安装 lrzsz</h2><p>在 Ubuntu 中安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install lrzsz</span><br></pre></td></tr></table></figure>

<p>在 CentOS 中安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install lrzsz</span><br></pre></td></tr></table></figure>

<p>在 Mac 中安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install lrzsz</span><br></pre></td></tr></table></figure>

<h2 id="2-下载脚本文件"><a href="#2-下载脚本文件" class="headerlink" title="2. 下载脚本文件"></a>2. 下载脚本文件</h2><p>从<a href="https://github.com/mmastrac/iterm2-zmodem">这里</a>下载。复制到 /usr/local/bin/，并增加执行权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;mmastrac&#x2F;iterm2-zmodem.git</span><br><span class="line">$ cp iterm2-zmodem&#x2F;iterm2-send-zmodem.sh &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-send-zmodem.sh</span><br><span class="line">$ cp iterm2-zmodem&#x2F;iterm2-recv-zmodem.sh &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-recv-zmodem.sh</span><br><span class="line">$ chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-send-zmodem.sh</span><br><span class="line">$ chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-recv-zmodem.sh</span><br></pre></td></tr></table></figure>

<h2 id="3-配置-iTerm2"><a href="#3-配置-iTerm2" class="headerlink" title="3. 配置 iTerm2"></a>3. 配置 iTerm2</h2><p>iTerm2 -&gt; Profiles -&gt; Default -&gt;Advanced -&gt; Triggers -&gt; edit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Regular expression: rz waiting to receive.\*\*B0100</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-send-zmodem.sh</span><br><span class="line">Instant: checked</span><br><span class="line"></span><br><span class="line">Regular expression: \*\*B00000000000000</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-recv-zmodem.sh</span><br><span class="line">Instant: checked</span><br></pre></td></tr></table></figure>

<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>发送文件：</p>
<ol>
<li>登录服务器</li>
<li><code>$ rz</code></li>
<li>在弹窗中从本地选择文件</li>
<li>确定，等待</li>
</ol>
<p>接收文件：</p>
<ol>
<li>登录服务器</li>
<li><code>$ sz filename1 filename2 ... filenameN</code></li>
<li>在弹窗中选择接收的本地目录</li>
<li>确定，等待</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centOS7 安装 PHP7 (updated at 2017-11-20)]]></title>
      <url>/2017/05/06/centOS%20%E5%AE%89%E8%A3%85%20PHP7/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-8d0e8340119e6d58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>新买了台服务器，随便倒腾，记录一下。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-安装-epel-release"><a href="#1-安装-epel-release" class="headerlink" title="1. 安装 epel-release"></a>1. 安装 epel-release</h2><h3 id="1-什么是epel"><a href="#1-什么是epel" class="headerlink" title="1. 什么是epel"></a>1. 什么是epel</h3><p>如果既想获得 RHEL 的高质量、高性能、高可靠性，又需要方便易用(关键是免费)的软件包更新功能，那么 Fedora Project 推出的 EPEL(Extra Packages for Enterprise Linux)正好适合你。</p>
<p><a href="http://fedoraproject.org/wiki/EPEL">EPEL</a> 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。</p>
<h3 id="2-使用心得"><a href="#2-使用心得" class="headerlink" title="2. 使用心得"></a>2. 使用心得</h3><ol>
<li>不用去换原来yum源，安装后会产生新repo</li>
<li>epel会有很多源地址，如果一个下不到，会去另外一个下</li>
</ol>
<h3 id="3-安装方法"><a href="#3-安装方法" class="headerlink" title="3. 安装方法"></a>3. 安装方法</h3><h4 id="1-搜索EPEL相关的软件包"><a href="#1-搜索EPEL相关的软件包" class="headerlink" title="1. 搜索EPEL相关的软件包"></a>1. 搜索EPEL相关的软件包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># yum search epel</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository base is listed more than once in the configuration</span><br><span class="line">Repository updates is listed more than once in the configuration</span><br><span class="line">Repository extras is listed more than once in the configuration</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * epel: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * extras: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * updates: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * webtatic: us-east.repo.webtatic.com</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: epel &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">epel-release.noarch : Extra Packages for Enterprise Linux repository configuration</span><br><span class="line">epel-rpm-macros.noarch : Extra Packages for Enterprise Linux RPM macros</span><br><span class="line">python3-pkgversion-macros.noarch : Convenience macros for Fedora&#x2F;EPEL Python 3</span><br><span class="line">                                 : packages building</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use &quot;search all&quot; for everything.</span><br></pre></td></tr></table></figure>

<h4 id="2-安装EPEL软件包"><a href="#2-安装EPEL软件包" class="headerlink" title="2. 安装EPEL软件包"></a>2. 安装EPEL软件包</h4><p>通过yum搜索的结果中epel-release.noarch就是我们需要的软件包。</p>
<p>安装可以不用包含软件包名称中点“.”后面的部分，当然包含也没有问题。点“.”后面的部分只是提供软件包适应系统架构。noarch为通用型，还有x86_64为64位的系统，i686为32位系统使用。</p>
<p>通过下面命令进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># yum install epel-release</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository base is listed more than once in the configuration</span><br><span class="line">Repository updates is listed more than once in the configuration</span><br><span class="line">Repository extras is listed more than once in the configuration</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * epel: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * extras: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * updates: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * webtatic: uk.repo.webtatic.com</span><br><span class="line">Package epel-release-7-9.noarch already installed and latest version</span><br><span class="line">Nothing to do</span><br></pre></td></tr></table></figure>

<p>想知道epel-release这个包包含哪些内容，就使用rpm命令查询列出。-q 表示查询，-l 标识列出软件包的所包含的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># rpm -ql epel-release</span><br><span class="line">&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL-7</span><br><span class="line">&#x2F;etc&#x2F;yum.repos.d&#x2F;epel-testing.repo</span><br><span class="line">&#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system-preset&#x2F;90-epel.preset</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;epel-release-7</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;epel-release-7&#x2F;GPL</span><br></pre></td></tr></table></figure>

<p>可以看出最主要的就是/etc/yum.repos.d/epel.repo这个文件了，默认已经启用。不确定的话可以用vi等命令查看编辑。</p>
<p><code>enabled=1</code>说明已经启用</p>
<p>启用之后就可安装EPEL源中提供的软件了。<br>通过使用<code>yum install XXXXX</code>命令安装，会自动搜索所有可用的软件源，并提示可用的软件包。</p>
<h2 id="2-安装PHP7的rpm源"><a href="#2-安装PHP7的rpm源" class="headerlink" title="2. 安装PHP7的rpm源"></a>2. 安装PHP7的rpm源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># rpm -Uvh https:&#x2F;&#x2F;mirror.webtatic.com&#x2F;yum&#x2F;el7&#x2F;webtatic-release.rpm</span><br><span class="line">Retrieving https:&#x2F;&#x2F;mirror.webtatic.com&#x2F;yum&#x2F;el7&#x2F;webtatic-release.rpm</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">    package webtatic-release-7-3.noarch is already installed</span><br></pre></td></tr></table></figure>

<h2 id="3-安装PHP7"><a href="#3-安装PHP7" class="headerlink" title="3. 安装PHP7"></a>3. 安装PHP7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install php71w</span><br></pre></td></tr></table></figure>

<h2 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4. 编译安装"></a>4. 编译安装</h2><h3 id="1-下载PHP源码包"><a href="#1-下载PHP源码包" class="headerlink" title="1. 下载PHP源码包"></a>1. 下载PHP源码包</h3><p>从<a href="http://cn2.php.net/downloads.php">这里</a>获取所需版本的PHP的下载地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget -O php7.tar.gz url&#x2F;get&#x2F;from&#x2F;last&#x2F;step</span><br></pre></td></tr></table></figure>

<h3 id="2-解压php7"><a href="#2-解压php7" class="headerlink" title="2. 解压php7"></a>2. 解压php7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -xvf php7.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-进入php目录"><a href="#3-进入php目录" class="headerlink" title="3. 进入php目录"></a>3. 进入php目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd php-7.x.x</span><br></pre></td></tr></table></figure>

<h3 id="4-安装依赖包"><a href="#4-安装依赖包" class="headerlink" title="4. 安装依赖包"></a>4. 安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel</span><br></pre></td></tr></table></figure>

<h3 id="5-编译配置（如果出现错误，基本都是上一步的依赖文件没有安装所致）"><a href="#5-编译配置（如果出现错误，基本都是上一步的依赖文件没有安装所致）" class="headerlink" title="5. 编译配置（如果出现错误，基本都是上一步的依赖文件没有安装所致）"></a>5. 编译配置（如果出现错误，基本都是上一步的依赖文件没有安装所致）</h3><p>嫌麻烦的可以从这一步起参考<a href="http://php.net/manual/zh/install.unix.nginx.php">PHP官方安装说明</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php \</span><br><span class="line">--with-config-file-path&#x3D;&#x2F;etc \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user&#x3D;nginx  \</span><br><span class="line">--with-fpm-group&#x3D;nginx \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared  \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-pcre-regex \</span><br><span class="line">--with-sqlite3 \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--enable-calendar \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-cdb \</span><br><span class="line">--enable-dom \</span><br><span class="line">--enable-exif \</span><br><span class="line">--enable-fileinfo \</span><br><span class="line">--enable-filter \</span><br><span class="line">--with-pcre-dir \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib-dir  \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--enable-gd-native-ttf \</span><br><span class="line">--enable-gd-jis-conv \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-gmp \</span><br><span class="line">--with-mhash \</span><br><span class="line">--enable-json \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-mbregex-backtrack \</span><br><span class="line">--with-libmbfl \</span><br><span class="line">--with-onig \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--with-mysqli&#x3D;mysqlnd \</span><br><span class="line">--with-pdo-mysql&#x3D;mysqlnd \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--with-pdo-sqlite \</span><br><span class="line">--with-readline \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-simplexml \</span><br><span class="line">--enable-sockets  \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-wddx \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xsl \</span><br><span class="line">--enable-zip \</span><br><span class="line">--enable-mysqlnd-compression-support \</span><br><span class="line">--with-pear \</span><br><span class="line">--enable-opcache</span><br></pre></td></tr></table></figure>

<p>这里可能会报很多错误，一个个解决即可。<a href="http://ask.apelearn.com/question/10761">这里</a>有大部分的解决方法。</p>
<p>列出几个常见的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">checking for png_write_image in -lpng… yes If configure fails try –with-xpm-dir&#x3D;</span><br><span class="line"></span><br><span class="line">configure: error: freetype.h not found.</span><br><span class="line">Fix: Reconfigure your PHP with the following option. --with-xpm-dir&#x3D;&#x2F;usr</span><br><span class="line"></span><br><span class="line">checking for png_write_image in -lpng… yes configure: error: libXpm.(a|so) not found.</span><br><span class="line"></span><br><span class="line">Fix: yum install libXpm-devel</span><br><span class="line"></span><br><span class="line">checking for bind_textdomain_codeset in -lc… yes checking for GNU MP support… yes configure: error: Unable to locate gmp.h</span><br><span class="line"></span><br><span class="line">Fix: yum install gmp-devel</span><br></pre></td></tr></table></figure>

<h3 id="6-正式安装"><a href="#6-正式安装" class="headerlink" title="6. 正式安装"></a>6. 正式安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>没有报错就表示安装完成。</p>
<h2 id="4-配置PHP"><a href="#4-配置PHP" class="headerlink" title="4. 配置PHP"></a>4. 配置PHP</h2><h3 id="1-配置环境变量"><a href="#1-配置环境变量" class="headerlink" title="1. 配置环境变量"></a>1. 配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>在末尾追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>执行命令使得改动立即生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h3 id="2-配置php-fpm"><a href="#2-配置php-fpm" class="headerlink" title="2. 配置php-fpm"></a>2. 配置php-fpm</h3><p>把所需的几个配置文件放到需要的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cp php.ini-production &#x2F;etc&#x2F;php.ini</span><br><span class="line"># cp &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.conf.default &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.conf</span><br><span class="line"># cp &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf.default &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line"># cp sapi&#x2F;fpm&#x2F;init.d.php-fpm &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br><span class="line"># chmod +x &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="3-启动php-fpm"><a href="#3-启动php-fpm" class="headerlink" title="3. 启动php-fpm"></a>3. 启动php-fpm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;php-fpm start</span><br></pre></td></tr></table></figure>
<h3 id="4-查看是否已正确安装"><a href="#4-查看是否已正确安装" class="headerlink" title="4. 查看是否已正确安装"></a>4. 查看是否已正确安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># php -v</span><br><span class="line">PHP 7.1.4 (cli) (built: Apr 30 2017 11:20:19) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line"># which php</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php</span><br></pre></td></tr></table></figure>

<h2 id="5-坑"><a href="#5-坑" class="headerlink" title="5. 坑"></a>5. 坑</h2><h3 id="1-Nginx-Error"><a href="#1-Nginx-Error" class="headerlink" title="1. Nginx Error!"></a>1. Nginx Error!</h3><p>The page you are looking for is temporarily unavailable. Please try again later.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect() to unix:&#x2F;var&#x2F;run&#x2F;php-fpm&#x2F;php-fpm.sock failed (2: No such file or directory) while connecting to upstream</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://www.scalescale.com/tips/nginx/php-fpm-connect-to-unixtmpphp5-fpm-sock-failed-2-no-such-file-or-directory/">这里</a>的解决方案</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cp &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf.rpmsave &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line"># vi &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line">listen 改为</span><br><span class="line">listen &#x3D; 127.0.0.1:9000;</span><br></pre></td></tr></table></figure>

<p>nginx 配置文件也改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;yoursite.com.conf</span><br><span class="line"></span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure>

<p>重启php-fpm 和 nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo &#x2F;etc&#x2F;init.d&#x2F;php-fpm restart</span><br><span class="line"># sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>上面是 TCP 的解决方案，另一种连接方式是通过 socket 套接字连接。<br>Nginx连接fastcgi的方式有2种：TCP和unix domain socket, 推荐使用php-fpm的UnixSocket的方式</p>
<blockquote>
<p>Socket 可以被定义描述为两个应用通信通道的端点。一个 Socket 端点可以用 Socket 地址来描述， Socket 地址结构由 IP 地址，端口和使用协议组成（ TCP or UDP ）。http协议可以通过socket实现，socket在传输层上实现。从这个角度来说，socket介于应用层和传输层之间。但是socket作为一种进程通信机制，操作系统分配唯一一个socket号，是依赖于通信协议的，但是这个通信协议不仅仅是 tcp或udp，也可以是其它协议。</p>
</blockquote>
<p>TCP是使用TCP端口连接127.0.0.1:9001<br>Socket是使用unix domain<br>socket连接套接字/dev/shm/php-cgi.sock（很多教程使用路径/tmp，而路径/dev/shm是个tmpfs，速度比磁盘快得多）</p>
<p>理论上，unix socket不走网络，会快些，<br>可是，稳定性就不那么理想了，<br>另外放在/tmp目录不如放在内存里面<br>我一般放在 /dev/shm/php-fpm.sock<br>放在内存读取速度快更快的</p>
<p>修改方法：</p>
<p>php-fpm listen sock 模式</p>
<h4 id="1-新建套接字文件"><a href="#1-新建套接字文件" class="headerlink" title="1. 新建套接字文件"></a>1. 新建套接字文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch &#x2F;dev&#x2F;shm&#x2F;php-fpm.sock</span><br><span class="line">chmod 777 &#x2F;dev&#x2F;shm&#x2F;php-fpm.sock</span><br><span class="line"># 用户组和用户名查 nginx.conf 文件</span><br><span class="line">chown nginx:nginx &#x2F;dev&#x2F;shm&#x2F;php-fpm.sock</span><br></pre></td></tr></table></figure>

<h4 id="2-nginx-配置"><a href="#2-nginx-配置" class="headerlink" title="2. nginx 配置"></a>2. nginx 配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">	#fastcgi_pass 127.0.0.1:9001; </span><br><span class="line">	fastcgi_pass unix:&#x2F;dev&#x2F;shm&#x2F;php-fpm.sock;</span><br><span class="line">	fastcgi_index index.php;</span><br><span class="line">	# 不要忘了这一行</span><br><span class="line">	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">	include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-php-fpm-conf"><a href="#3-php-fpm-conf" class="headerlink" title="3. php fpm conf"></a>3. php fpm conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim www.conf</span><br><span class="line">;listen &#x3D; 127.0.0.1:9001</span><br><span class="line">listen &#x3D; &#x2F;dev&#x2F;shm&#x2F;php-fpm.sock</span><br><span class="line">listen.owner &#x3D; nginx</span><br><span class="line">listen.group &#x3D; nginx</span><br><span class="line">listen.mode &#x3D; 0660</span><br></pre></td></tr></table></figure>

<h4 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connect() to unix:&#x2F;dev&#x2F;shm&#x2F;php-fpm.sock failed (13: Permission denied) while connecting to upstream, </span><br><span class="line">client: 192.168.121.130, server: localhost, request: &quot;GET &#x2F;index.php HTTP&#x2F;1.1&quot;, </span><br><span class="line">upstream: &quot;fastcgi:&#x2F;&#x2F;unix:&#x2F;dev&#x2F;shm&#x2F;php-fpm.sock:&quot;, host: &quot;192.168.121.130&quot; </span><br></pre></td></tr></table></figure>

<p>确保：nginx: worker process 的用户是 nginx.conf 中的 user, Permission denied 不是一个用户导致</p>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ol>
<li><a href="http://idroot.net/tutorials/how-to-install-wget-on-centos/">How To Install Wget on CentOS</a></li>
<li><a href="http://blog.csdn.net/21aspnet/article/details/6581618">CentOS怎样强制卸载PHP以及自定义安装PHP</a></li>
<li><a href="http://www.jianshu.com/p/246ffcd5e77d">CentOS7 安装 PHP7最新版</a></li>
<li><a href="http://lyp.cn/350_how-to-fix-php-compile-errors">PHP编译过程中常见错误信息的解决方法</a></li>
<li><a href="http://ask.apelearn.com/question/10761">PHP编译安装时常见错误解决办法，php编译常见错误</a></li>
<li><a href="https://www.scalescale.com/tips/nginx/php-fpm-connect-to-unixtmpphp5-fpm-sock-failed-2-no-such-file-or-directory/">PHP-FPM connect() to unix:/tmp/php5-fpm.sock failed (2: No such file or directory)</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 搭建个人博客的学习记录-yelee 主题设置]]></title>
      <url>/2017/04/24/hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-yelee%20%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>对比了很多主题，最后采用 <a href="https://github.com/MOxFIVE/hexo-theme-yelee">Yelee</a></p>
<p><a href="http://moxfive.coding.me/yelee/">Yelee 文档</a></p>
<a id="more"></a>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>首先，确保已安装 <a href="https://github.com/hexojs/hexo">hexo</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;MOxFIVE&#x2F;hexo-theme-yelee.git themes&#x2F;yelee</span><br></pre></td></tr></table></figure>

<p>再修改 Hexo 根目录对应配置文件 <code>_config.yml</code>，即可切换到 Yelee 主题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yelee</span><br></pre></td></tr></table></figure>

<p>执行以下命令预览当前主题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<h3 id="语言切换"><a href="#语言切换" class="headerlink" title="语言切换"></a>语言切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<h3 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h3><p>如果站点通过 HTTPS 访问，那下列的服务可能 无法正常使用：</p>
<ul>
<li>多说评论</li>
<li>友言评论</li>
<li>百度分享</li>
<li>百度统计</li>
</ul>
<p>可使用下列支持 HTTPS 的服务替代：</p>
<ul>
<li>Disqus 评论</li>
<li>AddThis</li>
<li>谷歌分析</li>
</ul>
<h2 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2. 基本设置"></a>2. 基本设置</h2><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><p>默认头像存储于 <code>yelee/source/img/avatar.png</code></p>
<p>配置中对应填写 <code>/img/avatar.png</code>，可替换图片或指定新地址</p>
<p>我上传了自己的头像，尺寸为 150*150</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: &#x2F;img&#x2F;zzp.png</span><br></pre></td></tr></table></figure>

<h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>两种在文章列表显示摘要的方式</p>
<ol>
<li>正文中添加 <code>&lt;!-- more --&gt;</code></li>
<li>文件头添加 description 标签，内容就是显示在文章列表中 摘要，如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description: &quot;这里写要显示在文章列表的摘要。&quot;</span><br></pre></td></tr></table></figure>

<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>等备案完成后再来补充</p>
<h3 id="标签云页面"><a href="#标签云页面" class="headerlink" title="标签云页面"></a>标签云页面</h3><p>使用 Hexo 命令新建一个名为 tags 的页面即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>该页面标题可以在文件 <code>\hexo\source\tags\index.md</code> 中修改</p>
<h3 id="关于我页面"><a href="#关于我页面" class="headerlink" title="关于我页面"></a>关于我页面</h3><p>使用 Hexo 命令新建一个名为 about 的页面即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>该页面内容在文件 <code>\hexo\source\about\index.md</code> 中修改</p>
<h3 id="站点小图标"><a href="#站点小图标" class="headerlink" title="站点小图标"></a>站点小图标</h3><p>若将图标存储于 <code>yelee/source/favicon.png</code></p>
<p>则配置中对应填写 <code>/favicon.png</code>，另外填网络图片的地址也可</p>
<p><code>favicon: /favicon.png</code></p>
<p><a href="http://tool.lu/favicon/">在线制作小图片</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vagrant-打造PHP开发环境]]></title>
      <url>/2017/04/21/Vagrant-%E6%89%93%E9%80%A0PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-dcab921466013b5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>本文是慕课网 <a href="http://www.imooc.com/learn/805">《vagrant打造跨平台可移动的开发环境》</a>的学习记录。</p>
<a id="more"></a>

<p>ThinkPHP 和 Apache 的配置相对麻烦，且很少使用。若没有需求可直接略过这两部分。</p>
<h2 id="1-虚拟机"><a href="#1-虚拟机" class="headerlink" title="1. 虚拟机"></a>1. 虚拟机</h2><p>优点：</p>
<ul>
<li>安装多种演示环境；</li>
<li>保证主机快速运行，减少不必要的垃圾安装程序；</li>
<li>避免每次重新安装；</li>
<li>测试不熟悉的应用，随便在虚拟机中安装和删除；</li>
<li>体验不同版本的操作系统。</li>
</ul>
<hr>
<h2 id="2-Vagrant"><a href="#2-Vagrant" class="headerlink" title="2. Vagrant"></a>2. Vagrant</h2><p>是构建在虚拟化技术之上的虚拟机运行环境管理工具</p>
<h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul>
<li>建立和删除虚拟机</li>
<li>配置虚拟机运行参数</li>
<li>管理虚拟机运行状态</li>
<li>自动化配置和安装开发环境</li>
</ul>
<p>vagrant 的运行，需要依赖某项具体的<strong>虚拟化技术</strong>（virtualbox，vmvare）</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li><p>跨平台 无差异性</p>
</li>
<li><p>可移动 镜像和配置文件相对较小</p>
</li>
<li><p>自动化部署，无需人工参与</p>
</li>
<li><p>面试加分项</p>
</li>
<li><p>减少公司人力培训成本</p>
</li>
<li><p>统一开发环境（vagrant+virtualbox+ubuntu）</p>
</li>
</ul>
<h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><ul>
<li>开发环境，不适用线上环境</li>
<li>项目配置比较复杂 （nginx/apache, memcache/redis, php/python/java）配置好的环境可以分发给每一个人，保证环境统一</li>
</ul>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol>
<li>下载 Virtualbox（VirtualBox-5.1.4-110228-OSX.dmg） </li>
<li>Vagrant（vagrant_1.8.5.dmg）， 安装</li>
</ol>
<hr>
<h3 id="常用-vagrant-命令"><a href="#常用-vagrant-命令" class="headerlink" title="常用 vagrant 命令"></a>常用 vagrant 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vagrant box list 查看目前已有的box</span><br><span class="line">vagrant box add 新增加一个box 需要在下载好的box(基于该box生成)的路径下执行，或者指定box的路径 如 vagrant box add myProject ubuntu16.01.box</span><br><span class="line">vagrant box remove 删除指定的box</span><br><span class="line">vagrant init  初始化配置文件 vagrantfile</span><br><span class="line">vagrant up 启动虚拟机</span><br><span class="line">vagrant ssh ssh登录虚拟机</span><br><span class="line">vagrant suspend 挂起虚拟机</span><br><span class="line">vagrant reload 重启虚拟机</span><br><span class="line">vagrant halt 关闭虚拟机</span><br><span class="line">vagrant status 虚拟机状态</span><br><span class="line">vagrant destroy 删除虚拟机</span><br></pre></td></tr></table></figure>


<p>实战<br>目标：<br>生成一个box<br>box镜像默认配置好 LAMP &amp; LNMP<br>Yii2，TP5，Laravel 可以直接运行</p>
<hr>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-初始化并启动虚拟机"><a href="#1-初始化并启动虚拟机" class="headerlink" title="1. 初始化并启动虚拟机"></a>1. 初始化并启动虚拟机</h3><ul>
<li><p>VirtualBox 5.1.8<br>下载地址 <a href="https://www.virtualbox.org/wiki/Download_Old_Builds_5_1">https://www.virtualbox.org/wiki/Download_Old_Builds_5_1</a></p>
</li>
<li><p>Vagrant 1.8.6<br>下载地址：<a href="https://releases.hashicorp.com/vagrant/1.8.6/">https://releases.hashicorp.com/vagrant/1.8.6/</a><br>切记根据自己的操作系统下载，同时分32位和64位</p>
</li>
<li><p>Windows 额外工作</p>
<blockquote>
<p>可能需要配置环境变;<br>安装Xshell命令行工具;<br>注意，一定要开启 VT-x/AMD-V 硬件加速</p>
</blockquote>
</li>
</ul>
<ul>
<li>下载 ubuntu1404.box</li>
<li>首先运行 vagrant box list 看当前所有的box</li>
<li>然后在ubuntu1404.box 所在的路径执行 vagrant box add ubuntu1404（这个名字随意起） ubuntu1404.box</li>
<li>再次执行 vagrant box list 看是否添加成功</li>
<li>创建一个目录，在该目录中执行 vagrant init ubuntu1404（镜像的名称）</li>
<li>在该目录下就会生成一个名为 Vagrantfile 的配置文件</li>
<li>使用编辑器打开该配置文件，可以看到第15行，box的名称为刚才镜像的名称</li>
<li>vagrant up 启动虚拟机，可以在virtualbox客户端看到启动的过程</li>
<li>vagrant ssh 进入虚拟机</li>
</ul>
<h3 id="2-替换源-使用阿里云的镜像，不用翻墙"><a href="#2-替换源-使用阿里云的镜像，不用翻墙" class="headerlink" title="2. 替换源(使用阿里云的镜像，不用翻墙)"></a>2. 替换源(使用阿里云的镜像，不用翻墙)</h3><p>备份<br><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p>
<p>编辑<br>文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>更新源(<strong>这里卡住了</strong>)<br><code>sudo apt-get update</code></p>
<p>这部分有点坑，反正我能翻墙，不用它了</p>
<h3 id="3-安装-nginx"><a href="#3-安装-nginx" class="headerlink" title="3. 安装 nginx"></a>3. 安装 nginx</h3><ol>
<li>首先进入虚拟机，查看 nginx 是否可安装<br><code>apt-cache search nginx</code></li>
<li>安装 nginx<br><code>sudo apt-get install nginx</code></li>
<li>查看是否安装成功<br><code>nginx -v</code></li>
<li>测试 nginx 能否得到请求并正确响应<br><code>curl -I &#39;http://127.0.0.1&#39;</code><br><code>curl http://www.baidu.com</code></li>
</ol>
<h3 id="4-安装-apache2"><a href="#4-安装-apache2" class="headerlink" title="4. 安装 apache2"></a>4. 安装 apache2</h3><ol>
<li>安装 nginx<br><code>sudo apt-get install apache2</code></li>
<li>查看是否安装成功<br><code>apache2 -v</code></li>
<li>测试 nginx 能否得到请求并正确响应 必须先停止nginx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;nginx stop</span><br><span class="line">curl -I &#39;http:&#x2F;&#x2F;127.0.0.1&#39;</span><br><span class="line">curl -I &#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 start</span><br><span class="line">curl -I &#39;http:&#x2F;&#x2F;127.0.0.1&#39;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-安装-mysql"><a href="#5-安装-mysql" class="headerlink" title="5. 安装 mysql"></a>5. 安装 mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt-get install mysql-client</span><br><span class="line">mysql -uroot -p</span><br><span class="line">select version();</span><br></pre></td></tr></table></figure>

<h3 id="6-安装-PHP"><a href="#6-安装-PHP" class="headerlink" title="6. 安装 PHP"></a>6. 安装 PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5-cli</span><br></pre></td></tr></table></figure>

<h3 id="7-安装-扩展"><a href="#7-安装-扩展" class="headerlink" title="7. 安装 扩展"></a>7. 安装 扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5-mcrypt php5-mysql php5-gd</span><br></pre></td></tr></table></figure>

<h3 id="8-安装-apache2-的-PHP-模块"><a href="#8-安装-apache2-的-PHP-模块" class="headerlink" title="8. 安装 apache2 的 PHP 模块"></a>8. 安装 apache2 的 PHP 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-php5</span><br></pre></td></tr></table></figure>

<h3 id="8-安装-nginx-fastcgi"><a href="#8-安装-nginx-fastcgi" class="headerlink" title="8. 安装 nginx fastcgi"></a>8. 安装 nginx fastcgi</h3><p>fastcgi  fpm 是一个进程池，来管理PHP的进程(cgi)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5-cgi php5-fpm</span><br><span class="line">&#x2F;&#x2F; 查询软件启动状态</span><br><span class="line">ps -ef | grep apache</span><br></pre></td></tr></table></figure>

<h3 id="9-更改端口"><a href="#9-更改端口" class="headerlink" title="9. 更改端口"></a>9. 更改端口</h3><p>apache 和 nginx 默认都是监听 80 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 更改 Apache 的监听端口为8888</span><br><span class="line">sudo vim &#x2F;etc&#x2F;apache2&#x2F;ports.conf </span><br><span class="line">listen 8888 保存后重启apache</span><br></pre></td></tr></table></figure>
<p>这时候，监听的端口不同，两个server就可以同时运行，可以查看启动状态</p>
<p>验证是否可以访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -I &quot;http:&#x2F;&#x2F;127.0.0.1:80&quot;</span><br><span class="line">curl -I &quot;http:&#x2F;&#x2F;127.0.0.1:8888&quot;</span><br></pre></td></tr></table></figure>
<p>按需求来，一般不会两个同时安装。</p>
<h3 id="10-通过浏览器访问虚拟机"><a href="#10-通过浏览器访问虚拟机" class="headerlink" title="10. 通过浏览器访问虚拟机"></a>10. 通过浏览器访问虚拟机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 挂起虚拟机</span><br><span class="line">vagrant suspend</span><br><span class="line">&#x2F;&#x2F; 打开virtualbox，选中要操作的虚拟机-setting-network-advance-port forwarding</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/693141-3ae6d25152d5914f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>配置完成后，保存，启动虚拟机。</p>
<p>8888端口，访问的是虚拟机里面的80端口，即nginx</p>
<p>8889端口，访问的是虚拟机里面的8888端口，即Apache</p>
<p>在浏览器中访问虚拟机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8888</span><br><span class="line">127.0.0.1:8889</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="vagrant-高级功能"><a href="#vagrant-高级功能" class="headerlink" title="vagrant 高级功能"></a>vagrant 高级功能</h2><p>进入当前虚拟机目录， 这样所有操作都是针对当前的虚拟机进行的操作。</p>
<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>上述手动的配置，重启虚拟机之后自动消失。</p>
<p>vagrant每次重启的时候，都会按照自己的配置文件进行设置，所以手动更改的配置无效。</p>
<p>参考官网的示例是最好的学习方式。</p>
<p>修改本虚拟机的配置文件 Vagrantfile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;forwarded_port&quot;, guest:80 (虚拟机里的端口), host:8888 （主机里的端口）</span><br><span class="line">config.vm.network &quot;forwarded_port&quot;, guest:8888, host:8889</span><br></pre></td></tr></table></figure>
<p>保存后重启虚拟机</p>
<h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><h4 id="1-公有IP"><a href="#1-公有IP" class="headerlink" title="1. 公有IP"></a>1. 公有IP</h4><p>公有IP不能创建nfs共享目录</p>
<p>IP段必须和主机（host 自己的电脑，不是虚拟机guest）的IP段一致，且不能与其他IP冲突。</p>
<h4 id="2-私有IP"><a href="#2-私有IP" class="headerlink" title="2. 私有IP"></a>2. 私有IP</h4><p>只能本机和虚拟机之间，以及虚拟机与虚拟机之间进行通讯。一般都使用私有IP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip:&quot;192.168.11.11&quot;</span><br></pre></td></tr></table></figure>
<p>这样，可以直接在浏览器中输入IP来访问虚拟机的webserver</p>
<h3 id="共享目录"><a href="#共享目录" class="headerlink" title="共享目录"></a>共享目录</h3><p>一般共享代码目录，本地修改可以及时同步到虚拟机调试。</p>
<p>NFS方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder &quot;&#x2F;Users&#x2F;ZouZhipeng&#x2F;mooc_vagrant&#x2F;&quot;, &quot;&#x2F;home&#x2F;www&#x2F;&quot; (该目录如果不存在，会自动创建), :nfs &#x3D;&gt; true</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-d8da821808b2e649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-1bd408cef572074d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<h2 id="vagrant-配置-ThinkPHP5"><a href="#vagrant-配置-ThinkPHP5" class="headerlink" title="vagrant 配置 ThinkPHP5"></a>vagrant 配置 ThinkPHP5</h2><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<h3 id="2-克隆代码"><a href="#2-克隆代码" class="headerlink" title="2. 克隆代码"></a>2. 克隆代码</h3><p>新建一个目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;top-think&#x2F;think tp5</span><br></pre></td></tr></table></figure>
<p>切换到tp5目录下，再克隆核心框架仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd tp5 &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;top-think&#x2F;framework thinkphp</span><br></pre></td></tr></table></figure>
<h3 id="3-nginx-配置文件（-etc-nginx-nginx-conf）详解"><a href="#3-nginx-配置文件（-etc-nginx-nginx-conf）详解" class="headerlink" title="3. nginx 配置文件（/etc/nginx/nginx.conf）详解"></a>3. nginx 配置文件（/etc/nginx/nginx.conf）详解</h3><p>下面两行有一个包含的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br></pre></td></tr></table></figure>

<p>也就是说，所有在conf.d目录下以.conf为后缀的文件，以及所有在sites-enabled目录下的文件，都可以自动加载到nginx的配置文件。这样不会影响到主配置文件。</p>
<p>新建一个配置文件 cd conf.d &amp;&amp; sudo touch tp5.conf：</p>
<p>详解版</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server&#123; &#x2F;&#x2F; 所有nginx虚拟机的配置都是以 server 变量开始的</span><br><span class="line">	server_name tp5.zzp.com; &#x2F;&#x2F; 虚拟机域名</span><br><span class="line">	root &#x2F;home&#x2F;www&#x2F;tp5&#x2F;public; &#x2F;&#x2F; 代码路径 入口文件地址</span><br><span class="line">	index index.php index.html; &#x2F;&#x2F; 默认的索引文件</span><br><span class="line">	location &#x2F; &#123;  &#x2F;&#x2F; </span><br><span class="line">		if (-f $request_filename) &#123; &#x2F;&#x2F;如果访问的文件存在，直接跳转，不执行这里</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		if (!-e $request_filename) &#123; &#x2F;&#x2F; 如果访问的文件不存在 正则表达式（任何内容） 重定向到入口文件，参数为前面的正则表达式$1 last 表示不再走了</span><br><span class="line">			rewrite ^&#x2F;(.*)&#x2F;$ &#x2F;index.php&#x2F;$1 last;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php &#123; &#x2F;&#x2F; 任何路径，如果是以.php结尾的，包括前面的index.php</span><br><span class="line">		set $script $uri;</span><br><span class="line">		set $path_info &quot;&quot;;</span><br><span class="line">		if ($uri ~ &quot;^(.+\.php)(&#x2F;.+)&quot;) &#123; &#x2F;&#x2F; 如果路由符合这个规则</span><br><span class="line">			set $script $1;</span><br><span class="line">			set $path_info $2;</span><br><span class="line">		&#125; </span><br><span class="line">		include fastcgi_params; &#x2F;&#x2F; 包含fastcgi参数</span><br><span class="line">		&#x2F;&#x2F; 需手动设置pathInfo类型的路由</span><br><span class="line">		&#x2F;&#x2F; 多传递一个参数，并解析出来</span><br><span class="line">		fastcgi_index index.php?IF_REWRITE&#x3D;1;</span><br><span class="line">		fastcgi_param PATH_INFO $path_info;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">		fastcgi_param SCRIPT_NAME $script;</span><br><span class="line">		fastcgi_pass 127.0.0.1:9000; &#x2F;&#x2F; fastcgi 端口</span><br><span class="line">		try_files $uri &#x3D; 404; &#x2F;&#x2F; 如果文件不存在，直接404</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>copy版</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 128M;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name tp5.imooc.test;</span><br><span class="line"></span><br><span class="line">    root  &#x2F;home&#x2F;www&#x2F;mooc&#x2F;vagrant&#x2F;phpmvc&#x2F;tp5&#x2F;public;</span><br><span class="line">    index  index.php;</span><br><span class="line"></span><br><span class="line">    location ~* \.(eot|otf|ttf|woff)$ &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        index    index.html index.php;</span><br><span class="line">        if ( -f $request_filename) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ( !-e $request_filename) &#123;</span><br><span class="line">            rewrite ^&#x2F;(.*)$ &#x2F;index.php&#x2F;$1 last;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">    	set $script $uri;</span><br><span class="line">        set $path_info &quot;&quot;;</span><br><span class="line">        if ($uri ~ &quot;^(.+\.php)(&#x2F;.+)&quot;) &#123;</span><br><span class="line">            set $script $1;</span><br><span class="line">            set $path_info $2;</span><br><span class="line">        &#125;</span><br><span class="line">        include   fastcgi_params;</span><br><span class="line">        fastcgi_index    index.php?IF_REWRITE&#x3D;1;</span><br><span class="line">    	fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    	fastcgi_param    PATH_INFO    $path_info;</span><br><span class="line">        fastcgi_param    SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param    SCRIPT_NAME    $script;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 /etc/hosts 文件中绑定上面配置的域名 其实就是自定义的DNS服务<br><code>192.168.11.11 tp5.zzp.com</code></p>
<p>然后再浏览器中访问，发现报错404。</p>
<h4 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h4><p>排错的方式就是查看日志，首先找到日志存放的位置。主配置文件nginx.conf中可以找到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># Logging Settings</span><br><span class="line">##</span><br><span class="line">access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br></pre></td></tr></table></figure>
<p>首先看访问日志，如果有变化说明访问进来了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure>
<p>如果没权限，先修改访问日志的权限为777</p>
<p>再次在浏览器中访问，访问日志有记录。然后查看错误日志。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span><br></pre></td></tr></table></figure>
<p>同样需要先修改权限。</p>
<p>如果错误为 connection refused，如何排查。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;php5&#x2F;fpm&#x2F;pool.d</span><br><span class="line">sudo vim www.conf 搜索listen</span><br><span class="line">找到</span><br><span class="line">listen &#x3D; &#x2F;var&#x2F;run&#x2F;php5-fpm.sock</span><br><span class="line">这是监听域模式的方式，改成端口方式进行监听</span><br><span class="line">listen &#x3D; 127.0.0.1：9000 </span><br><span class="line">端口方式比域模式更加稳定</span><br><span class="line">修改后重启fpm服务</span><br><span class="line">sudo service php5-fpm restart</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;php5-fpm restart 这两行一样</span><br></pre></td></tr></table></figure>
<p>再次通过浏览器访问，终于通了。</p>
<h3 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;apache2</span><br><span class="line">vim apache2.conf</span><br><span class="line">打开配置文件，最下面可以看到</span><br><span class="line"># Include the virtual host configurations:</span><br><span class="line">IncludeOptional sites-enabled&#x2F;*.conf</span><br><span class="line">找到子配置文件的目录</span><br><span class="line">cd sites-enabled</span><br><span class="line">sudo touch tp5.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:8888&gt; &#x2F;&#x2F; xml 形式 端口为8888</span><br><span class="line">	ServerName tp5.zzp.com</span><br><span class="line">	DocumentRoot &#x2F;home&#x2F;www&#x2F;tp5&#x2F;public</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>然后重启apache</p>
<p>浏览器中访问 tp5.zzp.com:8888  返回403错误</p>
<h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>看错误日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 755 &#x2F;var&#x2F;log&#x2F;apache2</span><br><span class="line">tail -f error.log</span><br><span class="line">client denied by server configuration</span><br><span class="line">一般是Apache的配置错误导致的</span><br><span class="line">sudo vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line"></span><br><span class="line">&lt;Directory &#x2F;&gt;</span><br><span class="line">        Options FollowSymLinks</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Require all denied &#x2F;&#x2F; 把这行注释掉即可,然后重启apache</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure>
<p>TP 的路由解决方式已经非常落后，给webserver 的配置带来了很多麻烦，看看就好。</p>
<h4 id="开启Apache的rewrite功能"><a href="#开启Apache的rewrite功能" class="headerlink" title="开启Apache的rewrite功能"></a>开启Apache的rewrite功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>
<p>在Apache的配置文件中还要修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line">找到 Directory 的 AllowOverride, 改为All</span><br></pre></td></tr></table></figure>

<h2 id="2-vagrant-安装yii2-amp-Laravel5"><a href="#2-vagrant-安装yii2-amp-Laravel5" class="headerlink" title="2. vagrant 安装yii2 &amp; Laravel5"></a>2. vagrant 安装yii2 &amp; Laravel5</h2><h3 id="1-下载yii-basic-的压缩包，解压到目标目录"><a href="#1-下载yii-basic-的压缩包，解压到目标目录" class="headerlink" title="1. 下载yii-basic 的压缩包，解压到目标目录"></a>1. 下载yii-basic 的压缩包，解压到目标目录</h3><h3 id="2-配置nginx运行环境"><a href="#2-配置nginx运行环境" class="headerlink" title="2. 配置nginx运行环境"></a>2. 配置nginx运行环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">sudo touch yii2.conf</span><br><span class="line">sudo vim yii2.conf</span><br><span class="line">sudo service nginx restart</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    server_name yii.zzp.com;</span><br><span class="line">    root &#x2F;home&#x2F;www&#x2F;yii&#x2F;web;</span><br><span class="line">    index index.php;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      try_files $uri $uri&#x2F; &#x2F;index.php?$args;</span><br><span class="line">  &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line">      fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">      try_files $uri &#x3D; 404;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">别忘了 hosts 在浏览器中就可以访问了</span><br></pre></td></tr></table></figure>
<h3 id="3-配置Apache"><a href="#3-配置Apache" class="headerlink" title="3. 配置Apache"></a>3. 配置Apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;apache2&#x2F;sites-enabled</span><br><span class="line">sudo touch yii.conf</span><br><span class="line">sudo vim yii.conf</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8888&gt;</span><br><span class="line">  ServerName yii.zzp.com</span><br><span class="line">  DocumentRoot &#x2F;home&#x2F;www&#x2F;yii&#x2F;web</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">重启apache 在浏览器中就可以访问了</span><br></pre></td></tr></table></figure>

<h3 id="4-下载并解压-laravel安装包"><a href="#4-下载并解压-laravel安装包" class="headerlink" title="4. 下载并解压 laravel安装包"></a>4. 下载并解压 laravel安装包</h3><p>配置基本和yii一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    server_name laravel.zzp.com;</span><br><span class="line">    root &#x2F;home&#x2F;www&#x2F;laravel&#x2F;public;</span><br><span class="line">    index index.php;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      try_files $uri $uri&#x2F; &#x2F;index.php?$args;</span><br><span class="line">  &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line">      fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">      try_files $uri &#x3D; 404;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:8888&gt;</span><br><span class="line">  ServerName laravel.zzp.com</span><br><span class="line">  DocumentRoot &#x2F;home&#x2F;www&#x2F;laravel&#x2F;public</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-vagrant-虚拟机优化"><a href="#3-vagrant-虚拟机优化" class="headerlink" title="3. vagrant  虚拟机优化"></a>3. vagrant  虚拟机优化</h2><h3 id="虚拟机名字-内存和CPU"><a href="#虚拟机名字-内存和CPU" class="headerlink" title="虚拟机名字 内存和CPU"></a>虚拟机名字 内存和CPU</h3><p>修改vagrantfile并重启虚拟机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">#   # Display the VirtualBox GUI when booting the machine</span><br><span class="line">#   vb.gui &#x3D; true</span><br><span class="line">#</span><br><span class="line">#   # Customize the amount of memory on the VM:</span><br><span class="line">    vb.memory &#x3D; &quot;1024&quot;</span><br><span class="line">    vb.cpus &#x3D; 2</span><br><span class="line">    vb.name &#x3D; &quot;ubuntu_mooc&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="虚拟机主机名"><a href="#虚拟机主机名" class="headerlink" title="虚拟机主机名"></a>虚拟机主机名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.hostname &#x3D; &quot;mooc&quot;</span><br></pre></td></tr></table></figure>
<p>查看虚拟机内容 <code>free -m</code><br>CPU <code>top</code> 再按1查看，q退出</p>
<h3 id="优化nginx和apache-同步目录的问题-修改后文件可及时同步"><a href="#优化nginx和apache-同步目录的问题-修改后文件可及时同步" class="headerlink" title="优化nginx和apache 同步目录的问题 修改后文件可及时同步"></a>优化nginx和apache 同步目录的问题 修改后文件可及时同步</h3><p><img src="http://upload-images.jianshu.io/upload_images/693141-368f8373feeaa483.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<h2 id="打包分发环境"><a href="#打包分发环境" class="headerlink" title="打包分发环境"></a>打包分发环境</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>需先关闭虚拟机 vagrant halt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant package --output xxx.box</span><br><span class="line">vagrant package --output xxx.box --base 虚拟机名</span><br></pre></td></tr></table></figure>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>老用户：使用Vagrantfile进行升级；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">apt-get install -y redis-server (-y 表示强制安装)</span><br><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure>
<p>新用户：直接重新打包分发给他</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add new xxx.box</span><br><span class="line">新建一个目录</span><br><span class="line">vagrant box list</span><br><span class="line">vagrant init new</span><br></pre></td></tr></table></figure>

<p>配置文件里面的vb.gui可以查看虚拟机启动时候的情况，可用于错误调试。</p>
<p>打包的时候最好关闭网络配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Vagrantfile 配置文件所有内容</span><br><span class="line"># -*- mode: ruby -*-</span><br><span class="line"># vi: set ft&#x3D;ruby :</span><br><span class="line"></span><br><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box &#x3D; &quot;ubuntu1404&quot;</span><br><span class="line">  config.vm.hostname &#x3D; &quot;mooc&quot;</span><br><span class="line">  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8888 ,id: &#39;nginx&#39;</span><br><span class="line">  config.vm.network &quot;forwarded_port&quot;, guest: 8888, host: 8889 ,id: &#39;apache&#39;</span><br><span class="line">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.11.11&quot;,auto_config: true</span><br><span class="line">  config.vm.synced_folder &quot;&#x2F;Users&#x2F;ZouZhipeng&#x2F;www&#x2F;mooc_vagrant&#x2F;&quot;, &quot;&#x2F;home&#x2F;www&quot;, :nfs &#x3D;&gt; true</span><br><span class="line">  #config.vm.synced_folder &quot;&#x2F;Users&#x2F;vincent&#x2F;code&#x2F;&quot;, &quot;&#x2F;home&#x2F;www&quot;, :nfs &#x3D;&gt; true</span><br><span class="line"></span><br><span class="line">  config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class="line">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class="line">  #   vb.gui &#x3D; true</span><br><span class="line">  #</span><br><span class="line">  #   # Customize the amount of memory on the VM:</span><br><span class="line">      vb.memory &#x3D; &quot;1024&quot;</span><br><span class="line">      vb.cpus &#x3D; 2</span><br><span class="line">      vb.name &#x3D; &quot;ubuntu_mooc&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # Enable provisioning with a shell script. Additional provisioners such as</span><br><span class="line">  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br><span class="line">  # documentation for more information about their specific syntax and use.</span><br><span class="line">  # config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span><br><span class="line">  #   apt-get update</span><br><span class="line">  #   apt-get install -y apache2</span><br><span class="line">  # SHELL</span><br><span class="line">end</span><br></pre></td></tr></table></figure>


]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo 搭建个人博客的学习记录-Git 自动部署代码到服务器]]></title>
      <url>/2017/04/18/hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-Git%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<style>
  .img {
    width: 60%;
    text-align: center;
  }
</style>

<div class='img'>
![](http://omp48p40q.bkt.clouddn.com/17-5-7/51656771-file_1494155724132_a08a.png)
</div>


<blockquote>
<p>这个世界是由懒人驱动的。 PS: 参考这类技术文章还是要找原文，国内的翻译，不说了。</p>
</blockquote>
<a id="more"></a>


<p>之前常用的部署代码就是用svn，或是更老土的ftp。每次的git pull实在是一个让人烦躁的东西，就网上查找了一下，发现git-hook 是个好东西。<a href="http://toroid.org/git-website-howto">参考原文</a></p>
<p>实现原理是当我们push 代码到<code>remote repository</code>时，通过git的<code>post-receive hooks</code>。执行<br><code>git checkout prod -f</code><br>来帮助我们实现自动部署。</p>
<h2 id="1-在本地创建一个git-repository"><a href="#1-在本地创建一个git-repository" class="headerlink" title="1. 在本地创建一个git repository"></a>1. 在<strong>本地</strong>创建一个<code>git repository</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test &amp;&amp; cd test</span><br><span class="line">$ git init </span><br><span class="line">$ echo &#39;Hello, world!&#39; &gt; index.html</span><br><span class="line">$ git add index.html</span><br><span class="line">$ git commit -q -m &quot;init&quot;</span><br></pre></td></tr></table></figure>

<p><code>index.html</code> 就是我们希望能够部署到服务器的代码</p>
<h2 id="2-然后在服务器创建一个repository"><a href="#2-然后在服务器创建一个repository" class="headerlink" title="2. 然后在服务器创建一个repository"></a>2. 然后在<strong>服务</strong>器创建一个<code>repository</code></h2><p>要注意，服务器要设置两个目录，一个是 git 目录，一个是代码目录。服务器的git目录和本地的代码目的都要指向服务器的代码目录。</p>
<p>这里可不是服务器部署代码的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test.git &amp;&amp; cd test.git</span><br><span class="line">$ git init --bare</span><br><span class="line">$ cat &gt; hooks&#x2F;post-receive</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">GIT_WORK_TREE&#x3D;&#x2F;dir&#x2F;to&#x2F;your&#x2F;webpage&#x2F;root git checkout -f</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">GIT_WORK_TREE&#x3D;&#x2F;root&#x2F;www&#x2F;test git checkout  -f  &#x2F;&#x2F; 这个是我的网站路径，这就是服务器git目录指向服务器代码目录的方式</span><br><span class="line">$ chmod +x hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>这是服务器的git代码目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dir&#x2F;to&#x2F;test.git</span><br></pre></td></tr></table></figure>

<p>这里的 <code>/root/www/test</code> 就是我将要部署服务器代码的位置，一般的lamp，我们喜欢放在www里，当然这里需要根据不同的环境更换就好了。</p>
<h2 id="3-在本地的git目录下增加一个remote"><a href="#3-在本地的git目录下增加一个remote" class="headerlink" title="3. 在本地的git目录下增加一个remote"></a>3. 在本地的git目录下增加一个remote</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add web ssh:&#x2F;&#x2F;root@47.93.234.60:&#x2F;root&#x2F;www&#x2F;test.git</span><br><span class="line">$ git push web +master:refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure>

<p>server_address 可以是 ip，域名。</p>
<p>也可以使用 SourceTree 来实现上面两个步骤。</p>
<p>这时我们切换到服务器目录下，就可以看到我们的<code>index.html</code> 在我们向<code>web push</code>的之后，已经自动<code>check out</code> 到我们指定目录下了。</p>
<p>之后我们只需要修改完成之后，<code>git push web</code> 就可以自动部署代码了。</p>
<p>SourceTree</p>
<ol>
<li>New Repository -&gt; add Existing Local Repository -&gt; 选中本地代码目录</li>
<li>更改文件后添加并push即可。 </li>
</ol>
<p>我的做法是把 hexo 的 public 目录作为本地代码目录，编译生成静态文件后通过git上传到服务器代码目录，然后nginx将站点指向服务器代码目录即可。服务器上不需要配置hexo，只保留静态文件即可。</p>
<p>在本地写markdown文件并调试好再上传。</p>
<p>最后还是决定同步整个 hexo 文件夹。本地和服务器都可以做更改。但在服务器上做的更改需要注意，可能会被本地的更改冲掉。所以尽量在本地做更改。</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【记录】PHP 项目中使用 Openssl 加密]]></title>
      <url>/2017/04/17/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91PHP%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Openssl%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<p>首先确保openssl已正确安装， <code>openssl verison</code></p>
<p>进入想要生成公钥和私钥的目录</p>
<h3 id="1-生成RSA私钥"><a href="#1-生成RSA私钥" class="headerlink" title="1. 生成RSA私钥"></a>1. 生成RSA私钥</h3><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 进入 openssl 客户端</span><br><span class="line">$ openssl</span><br><span class="line"></span><br><span class="line"># 生成1024位的私钥,不指定的话默认2048位</span><br><span class="line">OpenSSL&gt; genrsa -out rsa_private_key.pem 1024</span><br><span class="line"></span><br><span class="line"># 如果提示下面的错误：unable to write &#39;random state&#39;</span><br><span class="line">e is 65537 (0x10001)，执行下面的语句</span><br><span class="line">$ sudo rm ~&#x2F;.rnd</span><br><span class="line"></span><br><span class="line"># 重新执行，在该目录就能看到生成的私钥</span><br><span class="line">OpenSSL&gt; genrsa -out rsa_private_key.pem 1024</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-把RSA私钥转换成PKCS8格式"><a href="#2-把RSA私钥转换成PKCS8格式" class="headerlink" title="2. 把RSA私钥转换成PKCS8格式"></a>2. 把RSA私钥转换成PKCS8格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL&gt; pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM –nocrypt</span><br><span class="line"></span><br><span class="line">$ touch rsa_private_key_pkcs8.pem</span><br><span class="line"># 将生成的私钥粘贴，并保存</span><br></pre></td></tr></table></figure>

<h3 id="3-生成RSA公钥"><a href="#3-生成RSA公钥" class="headerlink" title="3. 生成RSA公钥"></a>3. 生成RSA公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL&gt; rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br></pre></td></tr></table></figure>

<p>此时，我们可以看到一个文件名为<code>rsa_public_key.pem</code>的文件，打开它，可以看到<code>-----BEGIN PUBLIC KEY-----</code>开头，<br><code>-----END PUBLIC KEY-----</code>结尾的没有换行的字符串，这个就是公钥。</p>
<h3 id="4-在项目中使用"><a href="#4-在项目中使用" class="headerlink" title="4. 在项目中使用"></a>4. 在项目中使用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">opensslEncrypt</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取公匙</span></span><br><span class="line">    $publicKeyPath = app_path(<span class="string">&#x27;Knowledge/OpensslKeys/&#x27;</span>) . <span class="string">&#x27;rsa_public_key.pem&#x27;</span>;</span><br><span class="line">    <span class="comment">//这个函数可用来判断公钥是否是可用的</span></span><br><span class="line">    $publicKey = openssl_pkey_get_public(file_get_contents($publicKeyPath));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        $privateKeyPath = app_path(&#x27;Knowledge/OpensslKeys/&#x27;) . &#x27;rsa_private_key.pem&#x27;;</span></span><br><span class="line">    <span class="comment">//这个函数可用来判断私钥是否是可用的，可用返回资源id Resource id</span></span><br><span class="line"><span class="comment">//        $privateKey = openssl_pkey_get_private(file_get_contents($privateKeyPath));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用公钥加密，客户端使用私钥解密</span></span><br><span class="line">    <span class="keyword">if</span> (!is_empty($publicKey)) &#123;</span><br><span class="line">        $encrypted = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $decrypted = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//            openssl_private_encrypt($data, $encrypted, $privateKey);//私钥加密</span></span><br><span class="line"><span class="comment">//            $encrypted = base64_encode($encrypted);//加密后的内容通常含有特殊字符，需要编码转换下，在网络间通过url传输时要注意base64编码是否是url安全的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            $decrypted = &quot;&quot;;</span></span><br><span class="line"><span class="comment">//            openssl_public_decrypt(base64_decode($encrypted), $decrypted, $publicKey);//私钥加密的内容通过公钥可解密出来</span></span><br><span class="line"><span class="comment">//            dd($decrypted);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        openssl_public_encrypt($data, $encrypted, $publicKey);<span class="comment">//公钥加密</span></span><br><span class="line">        <span class="keyword">return</span> base64_encode($encrypted); <span class="comment">// 加密后的内容通常含有特殊字符，需要编码转换下，在网络间通过url传输时要注意base64编码是否是url安全的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>


]]></content>
      
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git 的几个小问题]]></title>
      <url>/2017/04/11/git%20%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="1-git-blame-指定行或范围"><a href="#1-git-blame-指定行或范围" class="headerlink" title="1. git blame 指定行或范围"></a>1. <code>git blame</code> 指定行或范围</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame filename -L150,+11</span><br></pre></td></tr></table></figure>


<p>这里 <code>-L150,11</code> 表示“只看150-160行”。</p>
<a id="more"></a>

<h2 id="2-git-cherry-pick-合并某一次提交到另一分支"><a href="#2-git-cherry-pick-合并某一次提交到另一分支" class="headerlink" title="2. git cherry-pick 合并某一次提交到另一分支"></a>2. <code>git cherry-pick</code> 合并某一次提交到另一分支</h2><p>经常地，在错误的分支里进行了想要的提交，这时需要将本次提交合并到正确的分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 目标分支名</span><br><span class="line">$ git cherry-pick 想要合并的提交</span><br></pre></td></tr></table></figure>



]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 懒人工具--autojump]]></title>
      <url>/2017/04/10/Linux-%E6%87%92%E4%BA%BA%E5%B7%A5%E5%85%B7---autojump/</url>
      <content type="html"><![CDATA[<p><img src="http://omp48p40q.bkt.clouddn.com/17-4-14/72919152-file_1492142306461_3bfa.jpg"></p>
<blockquote>
<p>在终端的文件夹跳转非常麻烦, 需要敲长长的路径.<br>alias 别名也不是很方便。<br><a href="https://github.com/wting/autojump">autojump</a> 是通过记录进入过的目录到数据库来实现的, 所以必须是曾经进入过的目录才能跳转.</p>
</blockquote>
<a id="more"></a>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="1-OS-X"><a href="#1-OS-X" class="headerlink" title="1. OS X"></a>1. OS X</h3><p>推荐使用 Homebrew 安装 autojump</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure>

<p>macOS 启动 Shell 自动读取的文件有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;profile</span><br><span class="line">~&#x2F;.bash_profile</span><br><span class="line">~&#x2F;.bash_login</span><br><span class="line">~&#x2F;.profile</span><br></pre></td></tr></table></figure>

<p>所以只需要在上面其中一个文件加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;[autojump.sh](http:&#x2F;&#x2F;autojump.sh&#x2F;) ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;[autojump.sh](http:&#x2F;&#x2F;autojump.sh&#x2F;)</span><br></pre></td></tr></table></figure>

<p>但如果终端工具使用的是 zsh，需要在<code>~/.zshrc</code>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s &#96;brew --prefix&#96;&#x2F;etc&#x2F;autojump.sh ]] &amp;&amp; . &#96;brew --prefix&#96;&#x2F;etc&#x2F;autojump.sh</span><br></pre></td></tr></table></figure>

<p>然后，运行 <code>source &lt;sourcefile&gt;</code>.</p>
<h3 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2. Linux"></a>2. Linux</h3><p>首先下载 autojump 源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;joelthelion&#x2F;autojump.git</span><br></pre></td></tr></table></figure>

<p>然后可安装或卸载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd autojump</span><br><span class="line">.&#x2F;install.py or .&#x2F;uninstall.py</span><br></pre></td></tr></table></figure>

<p>由于Linux 下 Shell 启动会自动读取 ~/.bashrc 文件，所以将下面一行添加到该文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh</span><br></pre></td></tr></table></figure>

<p>然后，运行<code>source ~/.bashrc</code>即可。</p>
<p>安装完成后，使用查看autojump版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ autojump --version</span><br><span class="line">autojump release-v21.1.2</span><br></pre></td></tr></table></figure>



<h2 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h2><p>只有打开过的目录 autojump 才会记录，所以使用时间越长，autojump 才会越智能。</p>
<p>可以使用 <code>autojump</code> 命令，或者使用短命令 <code>j</code>.</p>
<ol>
<li><p>跳转到指定目录</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j directoryName</span><br></pre></td></tr></table></figure>
<p> 如果不知道目录全名，输入一部分，按Tab键就好，输错了也没关系，可以自动识别，非常强大。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># j csm</span><br><span class="line">&#x2F;data&#x2F;www&#x2F;xxx&#x2F;cms</span><br></pre></td></tr></table></figure>

<p> Tab 键效果</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ pwd</span><br><span class="line">&#x2F;home&#x2F;vagrant</span><br><span class="line">vagrant@homestead:~$ j --stat</span><br><span class="line">10.0:	&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">20.0:	&#x2F;home&#x2F;vagrant&#x2F;www&#x2F;xxx&#x2F;doc_api</span><br><span class="line">34.6:	&#x2F;home&#x2F;vagrant&#x2F;www&#x2F;xxx</span><br><span class="line">40.0:	&#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">Total key weight: 104. Number of stored dirs: 4</span><br><span class="line">vagrant@homestead:~$ j n__ (Tab 键自动添加了下划线)</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">vagrant@homestead:&#x2F;var&#x2F;log&#x2F;nginx$</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳转到指定目录的子目录（Mac 下效果与<code>j</code>相同，Ubuntu下不好用）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jc directoryName</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用系统工具（Mac Finder, Windows Explorer, GNOME, etc.）打开目录，类似Mac OS terminal 下的 <code>open</code> 命令，但<code>open</code> 命令需要指定路径（Mac中还算实用，Ubuntu下不好用）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jo directoryName</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看权重 <code>j --stat</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ j --stat</span><br><span class="line">10.0:	&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">10.0:	&#x2F;home&#x2F;vagrant&#x2F;www&#x2F;caijing&#x2F;doc_api</span><br><span class="line">10.0:	&#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">30.0:	&#x2F;home&#x2F;vagrant&#x2F;www&#x2F;caijing</span><br><span class="line">Total key weight: 59. Number of stored dirs: 4</span><br></pre></td></tr></table></figure>

<p> 权重越高，说明目录使用的越频繁。</p>
<p> 感觉 Mac 中的显示效果更好，还可以自己去调整权重值。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ j --stat</span><br><span class="line">10.0:	&#x2F;Users&#x2F;xxx&#x2F;xxx&#x2F;xxxx&#x2F;xxxx&#x2F;xxxx&#x2F;vendor</span><br><span class="line">22.4:	&#x2F;Users&#x2F;xxx&#x2F;xxx&#x2F;xxxx&#x2F;xxxx&#x2F;xxxx&#x2F;log</span><br><span class="line"></span><br><span class="line">32:	    total weight</span><br><span class="line">2:	     number of entries</span><br><span class="line">10.00:	 current directory weight</span><br><span class="line"></span><br><span class="line">data:	 &#x2F;Users&#x2F;xxx&#x2F;Library&#x2F;autojump&#x2F;autojump.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autojump --help</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkDown 常用语法]]></title>
      <url>/2017/04/06/MarkDown-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-4cd67258f6dba075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<a id="more"></a>
<h2 id="1-如何换行"><a href="#1-如何换行" class="headerlink" title="1. 如何换行"></a>1. 如何换行</h2><p>在 Markdown 中另起一段时，需要多敲一次回车键，来在段落之间添加一个空行。这是与其他常见文档格式的不同之处。</p>
<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><p>Markdown 中，只需要在文本前面加上“#”，就会被认为是加了一个标题。同理，你还可以增加二级、三级、四级、五级标题和六级标题，只需要增加“#” 即可。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-无序列表"><a href="#3-无序列表" class="headerlink" title="3. 无序列表"></a>3. 无序列表</h2><p>若列表中的条目没有特定顺序时，可以使用 无序列表。加号“+”或减号“-”都可以作为列表标记，后面要跟一个空格。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- windows</span><br><span class="line">- mac</span><br><span class="line">- Linux</span><br><span class="line">或者</span><br><span class="line">+ windows</span><br><span class="line">+ mac</span><br><span class="line">+ Linux</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<ul>
<li>windows</li>
<li>mac</li>
<li>Linux</li>
</ul>
<h2 id="4-有序列表"><a href="#4-有序列表" class="headerlink" title="4. 有序列表"></a>4. 有序列表</h2><p>若想在段落前加上数字序号，就需要用到有序列表了。使用数字、一个英文句号和一个空格即可。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. windows</span><br><span class="line">2. mac</span><br><span class="line">3. Linux</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<ol>
<li>windows</li>
<li>mac</li>
<li>Linux</li>
</ol>
<h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h2><p>Markdown 中可以插入图片，只需要感叹号、方括号和圆括号即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](&#x2F;path&#x2F;to&#x2F;img.jpg)</span><br><span class="line"></span><br><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;693141-43ab4842291e1de8.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br></pre></td></tr></table></figure>
<p>一个英文感叹号 “!” 后紧跟方括号，里面可以写这张图片的说明；再紧跟一对圆括号，里面写这张图片的网址。</p>
<p>效果：<br><img src="http://upload-images.jianshu.io/upload_images/693141-43ab4842291e1de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h2><p>在文档中插入连接的语法和插入图片的语法很像，只是少了最前面的英文感叹号”!”。</p>
<p>在方括号写下链接文字，圆括号写下网址即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[显示的文字](http:&#x2F;&#x2F;www.redirect.com)</span><br></pre></td></tr></table></figure>

<p>效果：<br><a href="http://www.redirect.com/">显示的文字</a></p>
<h2 id="7-引用"><a href="#7-引用" class="headerlink" title="7. 引用"></a>7. 引用</h2><p>可以使用”&gt;” 标记来引用其他人的言论、书籍或报纸的内容。只需要在段落的第一行最前面加上 &gt; 即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ”每位作者都应该学习 Markdown。” ——马克思</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>”每位作者都应该学习 Markdown。” ——马克思</p>
</blockquote>
<p>引用可以嵌套，只要根据层次的不同，加上不同数量的 &gt; 即可。</p>
<p>在引用的区域内，也可以使用其他的 Markdown 语法，包括标题、列表等。</p>
<h2 id="8-强调"><a href="#8-强调" class="headerlink" title="8. 强调"></a>8. 强调</h2><p>在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。</p>
<p>在需要斜体的文本左右各加一个“<em>”或“_” ，在需要加粗的文本左右各加两个“</em>”或“_” 。</p>
<h2 id="9-分割线"><a href="#9-分割线" class="headerlink" title="9. 分割线"></a>9. 分割线</h2><p>在 Markdown 中，可以用分隔线来将内容分成不同区域。</p>
<p>只需要连续三个减号”-“即可。</p>
<hr>
<h2 id="10-待办事项"><a href="#10-待办事项" class="headerlink" title="10. 待办事项"></a>10. 待办事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 支持以 PDF 格式导出文稿</span><br><span class="line">- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</span><br><span class="line">- [x] 新增 Todo 列表功能</span><br><span class="line">- [x] 修复 LaTex 公式渲染问题</span><br><span class="line">- [x] 新增 LaTex 公式编号功能</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<ul>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li>
</ul>
<h2 id="11-数学公式"><a href="#11-数学公式" class="headerlink" title="11. 数学公式"></a>11. 数学公式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$E&#x3D;mc^2$$</span><br></pre></td></tr></table></figure>
<p>简书不支持直接插入数学公式，只能采用<a href="http://www.jianshu.com/p/888c5eaebabd">这里</a>提到的第二种方法。</p>
<p>![](<a href="http://www.forkosh.com/mathtex.cgi">http://www.forkosh.com/mathtex.cgi</a>? E=mc^2)</p>
<h2 id="12-代码段"><a href="#12-代码段" class="headerlink" title="12. 代码段"></a>12. 代码段</h2><p>使用 ``` 包含代码段。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="13-绘制表格"><a href="#13-绘制表格" class="headerlink" title="13. 绘制表格"></a>13. 绘制表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h2 id="14-转义字符"><a href="#14-转义字符" class="headerlink" title="14. 转义字符"></a>14. 转义字符</h2><p>下面这些符号前面加上反斜杠来帮助插入普通的符号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\ 反斜杠</span><br><span class="line">&#96; 反引号</span><br><span class="line">* 星号</span><br><span class="line">_ 底线</span><br><span class="line">&#123;&#125; 大括号</span><br><span class="line">[] 方括号</span><br><span class="line">() 括号</span><br><span class="line"># 井字号</span><br><span class="line">+ 加号</span><br><span class="line">- 减号</span><br><span class="line">. 英文句点</span><br><span class="line">! 惊叹号</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/693141-a2fad6a87c1631d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
]]></content>
      
        
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php7 安装 mysql 扩展]]></title>
      <url>/2017/03/06/php7-%E5%AE%89%E8%A3%85-mysql-%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-5a30165323bf547c.gif?imageMogr2/auto-orient/strip"></p>
<a id="more"></a>

<p>PHP7全面删除Mysql扩展支持，原本的mysql_*系列函数将在mysql中不再得到支持。导致旧的项目报错，现把扩展装回，记录一下。</p>
<h2 id="1-首先下载mysql扩展"><a href="#1-首先下载mysql扩展" class="headerlink" title="1. 首先下载mysql扩展"></a>1. 首先下载<a href="http://git.php.net/?p=pecl/database/mysql.git;a=summary">mysql扩展</a></h2><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mysql.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="3-cd-进解压后的目录"><a href="#3-cd-进解压后的目录" class="headerlink" title="3. cd 进解压后的目录"></a>3. cd 进解压后的目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>在 modules 目录下生成了一个 mysql.so 文件。</p>
<h2 id="4-php-配置文件添加mysql扩展"><a href="#4-php-配置文件添加mysql扩展" class="headerlink" title="4. php 配置文件添加mysql扩展"></a>4. php 配置文件添加mysql扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 首先打印出 phpinfo()， php的配置文件在这里</span><br><span class="line">Loaded Configuration File	&#x2F;etc&#x2F;php&#x2F;7.1&#x2F;fpm&#x2F;php.ini</span><br><span class="line">sudo vim &#x2F;etc&#x2F;php&#x2F;7.1&#x2F;fpm&#x2F;php.ini</span><br><span class="line"># 添加一行</span><br><span class="line">extension&#x3D;&#x2F;path&#x2F;to&#x2F;mysql.so</span><br><span class="line"># 重启 php-fpm</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;php7.1-fpm restart</span><br></pre></td></tr></table></figure>


]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Crontab 学习笔记]]></title>
      <url>/2017/03/03/Crontab-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-b997419bb7de3810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>这是慕课网<a href="http://www.imooc.com/learn/216">《Linux中的计划任务之Crontab》</a>的学习记录，方便以后查阅。</p>
<blockquote>
<p>从定时重复的工作中解脱出来</p>
</blockquote>
<a id="more"></a>

<h2 id="1-Crontab-是什么？"><a href="#1-Crontab-是什么？" class="headerlink" title="1. Crontab 是什么？"></a>1. Crontab 是什么？</h2><p>Crontab 是一个用于设置<strong>周期性</strong>被执行的任务的工具。</p>
<ol>
<li>Cron Job：被周期性执行的任务</li>
<li>Cron Table：周期性执行的任务列表</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-b859093fa8a16912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="2-安装并检查Crontab服务"><a href="#2-安装并检查Crontab服务" class="headerlink" title="2. 安装并检查Crontab服务"></a>2. 安装并检查Crontab服务</h2><ol>
<li>检查Crontab工具是否安装：<code>crontab -l</code> </li>
<li>检查crond 服务是否启动：<code>service crond status</code></li>
<li>安装cron<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CentOS</span><br><span class="line">yum install vixie-cron</span><br><span class="line">yum install crontabs</span><br><span class="line">Ubuntu</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cron</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3-简单示例"><a href="#3-简单示例" class="headerlink" title="3. 简单示例"></a>3. 简单示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">crontab -e 进入编辑模式</span><br><span class="line"></span><br><span class="line">添加一行</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * date &gt;&gt; &#x2F;tmp&#x2F;date.log</span><br><span class="line">每分钟将当前日期时间写入日志文件</span><br><span class="line"></span><br><span class="line">tail -f &#x2F;tmp&#x2F;date.log （动态刷新）</span><br><span class="line">tail -3 &#x2F;tmp&#x2F;date.log (显示最后3行)</span><br></pre></td></tr></table></figure>

<h2 id="4-Crontab-的基本组成"><a href="#4-Crontab-的基本组成" class="headerlink" title="4. Crontab 的基本组成"></a>4. Crontab 的基本组成</h2><ol>
<li>配置文件：文件方式设置定时任务</li>
<li>系统服务CROND：每分钟都会从配置文件刷新定时任务、执行定时任务</li>
<li>配置工具crontab：调整定时任务</li>
</ol>
<h3 id="1-配置文件格式"><a href="#1-配置文件格式" class="headerlink" title="1. 配置文件格式"></a>1. 配置文件格式</h3><blockquote>
<p>分钟0-59</p>
</blockquote>
<blockquote>
<p>小时0-23</p>
</blockquote>
<blockquote>
<p>日期1-31</p>
</blockquote>
<blockquote>
<p>月份1-12</p>
</blockquote>
<blockquote>
<p>星期0-7（0和7都表示星期日）</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-a1d1e4b3b0a62fb5.gif?imageMogr2/auto-orient/strip"></p>
<p>示例：</p>
<p>每晚21：30重启apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 21 * * * service httpd restart</span><br></pre></td></tr></table></figure>
<p>每月1、10、22号4：34重启apache（离散）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">34 4 1,10,22 * * service httpd restart</span><br></pre></td></tr></table></figure>

<p>每月1-10号4：34重启apache （连续）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">34 4 1-22 * * service httpd restart</span><br></pre></td></tr></table></figure>
<p>每2分钟重启apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;2 * * * * service httpd restart (偶数分钟)</span><br><span class="line">1-59&#x2F;2 * * * * service httpd restart （奇数分钟）</span><br></pre></td></tr></table></figure>
<p>晚上11点到早晨7点重启apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 23-7&#x2F;1 * * * service httpd restart (分钟要指定)</span><br></pre></td></tr></table></figure>

<p>晚上11点到早晨7点每隔30分钟重启apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0,30 23-7&#x2F;1 * * * service httpd restart</span><br><span class="line">0-59&#x2F;30 23-7&#x2F;1 * * * service httpd restart</span><br></pre></td></tr></table></figure>
<p>小结：</p>
<ol>
<li>* 表示任何时候都匹配。</li>
<li>可以用”A,B,C” 表示A或者B或者C时执行命令</li>
<li>可以用”A-B”表示A到B之间时执行命令</li>
<li>可以用”*/A”表示每A分钟（小时等）执行一次命令</li>
</ol>
<h2 id="5-Crontab-工具的使用"><a href="#5-Crontab-工具的使用" class="headerlink" title="5. Crontab 工具的使用"></a>5. Crontab 工具的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab -help</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line">crontab -e -u cron</span><br><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;cron 查看计划任务的执行情况</span><br></pre></td></tr></table></figure>
<p>如果没有指定用户，显示的就是当前登录用户自己的计划任务。</p>
<h2 id="6-Crontab-配置文件"><a href="#6-Crontab-配置文件" class="headerlink" title="6. Crontab 配置文件"></a>6. Crontab 配置文件</h2><p>位于 <code>/etc/crontab</code> 目录下<br><img src="http://upload-images.jianshu.io/upload_images/693141-1423dc95ddf1a9e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>crontab 在载入配置文件的时候，会把cron.d 下面的sysstat文件里面的配置信息载入成为root用户的计划任务。</p>
<p>crontab -l/-e 不能查看和编辑系统级的计划任务，即 cron.d 目录下的文件，需要 cd 到该目录使用vi编辑。</p>
<p>crontab -l/-e 其实是操作的 /var/spool/cron/username 文件</p>
<h2 id="7-修改Crontab的默认编辑器为vi"><a href="#7-修改Crontab的默认编辑器为vi" class="headerlink" title="7. 修改Crontab的默认编辑器为vi"></a>7. 修改Crontab的默认编辑器为vi</h2><p>在root的配置文件 .profile (/root/.profile)添加以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EDITOR&#x3D;vi; export EDITOR</span><br></pre></td></tr></table></figure>
<p>然后，载入这个文件即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .profile</span><br></pre></td></tr></table></figure>

<h2 id="8-几个坑"><a href="#8-几个坑" class="headerlink" title="8. 几个坑"></a>8. 几个坑</h2><h3 id="1-环境变量"><a href="#1-环境变量" class="headerlink" title="1. 环境变量"></a>1. 环境变量</h3><p>.bash_profile 中设置的环境变量并不会被Crontab捕获。</p>
<h3 id="2-第三和第五个域之间执行的是“或”操作"><a href="#2-第三和第五个域之间执行的是“或”操作" class="headerlink" title="2. 第三和第五个域之间执行的是“或”操作"></a>2. 第三和第五个域之间执行的是“或”操作</h3><p>如四月第一个星期日早晨6：30执行脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 6 1-7 4 0 &#x2F;root&#x2F;a.sh</span><br></pre></td></tr></table></figure>
<p>上面写法的结果是：四月第一个星期的周一到周日（7次）或周日（一个月最少4次）早晨执行，总执行次数为10或11，并不是我们希望的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 6 1-7 4 * test &#96;date +\%w&#96; -eq 0 &amp;&amp; &#x2F;root&#x2F;a.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date +%w 输出当前的星期，0-6</span><br><span class="line">test 表示是否成功</span><br><span class="line">echo $? 输出上一个命令成功与否，1表示失败，0表示成功</span><br><span class="line">避免使用等号（用的话前后都加空格）进行判断，使用 -eq</span><br><span class="line">&amp;&amp; 表示前面成功（0）后面才执行</span><br><span class="line">% 在计划任务中要进行转义</span><br></pre></td></tr></table></figure>

<h3 id="3-分钟设置"><a href="#3-分钟设置" class="headerlink" title="3. 分钟设置"></a>3. 分钟设置</h3><p>* 表示所有都匹配，所以每小时，每天这样的情况要给小一级的单位设置一个默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 *&#x2F;2 * * * date</span><br></pre></td></tr></table></figure>

<h2 id="9-综合案例"><a href="#9-综合案例" class="headerlink" title="9. 综合案例"></a>9. 综合案例</h2><p>每30s执行一次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;1 * * * * echo &quot;1111&quot;</span><br><span class="line">*&#x2F;1 * * * * sleep 30s; echo &quot;1111&quot; (分号表示无论前面的命令是否成功，后面都会执行)</span><br></pre></td></tr></table></figure>


]]></content>
      
        
        <tags>
            
            <tag> crontab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell-脚本学习记录（1）]]></title>
      <url>/2017/02/22/Shell-%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-8b4a409ba533a5ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>这是我在慕课网<a href="http://www.imooc.com/learn/522">《Shell典型应用之主控脚本实现》</a>的学习记录，方便自己以后查找。希望对其他读者也能有些帮助。</p>
</blockquote>
<a id="more"></a>

<h1 id="第一部分-主控文件"><a href="#第一部分-主控文件" class="headerlink" title="第一部分 主控文件"></a>第一部分 主控文件</h1><h2 id="1-vim-编辑器的设置"><a href="#1-vim-编辑器的设置" class="headerlink" title="1. vim 编辑器的设置"></a>1. vim 编辑器的设置</h2><ol>
<li>临时性的设置<br>在末行模式进行的设置，当次有效</li>
<li>永久设置 修改vimrc/.vimrc文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 语法高亮</span><br><span class="line">syntax on</span><br><span class="line"># 显示行号</span><br><span class="line">set number</span><br><span class="line"># 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line"># 自动加入文件头</span><br></pre></td></tr></table></figure>
 <img src="http://upload-images.jianshu.io/upload_images/693141-70a7f46e1f5d6174.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li>
</ol>
<h2 id="2-shell-高亮显示"><a href="#2-shell-高亮显示" class="headerlink" title="2. shell 高亮显示"></a>2. shell 高亮显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e 终端颜色 + 显示内容 + 结束后颜色</span><br><span class="line">echo -e &quot;\e[1;30m Hello \e[1;0m&quot;</span><br><span class="line"># echo -e(扩展输出) &quot;\e(颜色设置使用\e)[1(1为设置终端颜色，0为不设置);</span><br><span class="line"># 30m(颜色) Hello \e(闭合)[1;0m(结束后的颜色)&quot;(所有内容包含在双引号中)</span><br><span class="line">echo -e &quot;\e[1;30m Hello &quot; $(tput sgr0)</span><br><span class="line"># $(tput sgr0)的作用是初始化输出的终端，使其颜色恢复为默认值</span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-b86151289bd439b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="3-shell-中的关联数组"><a href="#3-shell-中的关联数组" class="headerlink" title="3. shell 中的关联数组"></a>3. shell 中的关联数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 声明关联数组</span><br><span class="line">declare -A asso_arr1</span><br></pre></td></tr></table></figure>

<h2 id="4-ubuntu的坑"><a href="#4-ubuntu的坑" class="headerlink" title="4. ubuntu的坑"></a>4. ubuntu的坑</h2><p>ubuntu的默认shell由bash改为了dash，上述脚本输出时会出现两个错误。1，declare not found; 2，echo 后面的颜色配置内容都给输出。</p>
<p>三种解决方法：</p>
<ol>
<li>执行时由<code>sh build.sh</code>变成<code>bash build.sh</code></li>
<li><code>ln -s /bin/bash /bin/sh -f</code></li>
<li><code>sudo dpkg-reconfigure dash</code> 进行配置，道理同（2）</li>
</ol>
<p>主控文件所有内容及注释 monitor_main.sh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">resettem&#x3D;$(tput sgr0)</span><br><span class="line"># 定义关联数组存储 键：数字,脚本号码   值：脚本名</span><br><span class="line">DECLARE -A ssharray</span><br><span class="line">i&#x3D;0</span><br><span class="line">numbers&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 使用for循环遍历所有子功能shell并输出(需要排除本文件) 注意单引号和双引号的使用</span><br><span class="line">for script_file in &#96;ls -I &quot;monitor_main.sh&quot; .&#x2F;&#96;</span><br><span class="line">do</span><br><span class="line">    echo -e &quot;\e[1;35m&quot; &quot;The Script:&quot; $&#123;i&#125; &#39;&#x3D;&#x3D;&gt;&#39; $&#123;ressettem&#125; $&#123;script_file&#125;</span><br><span class="line">    # 关联数组赋值</span><br><span class="line">    ssharray[$i]&#x3D;$&#123;script_file&#125;</span><br><span class="line">    # echo $&#123;ssharray[$i]&#125;</span><br><span class="line">    numbers&#x3D;&quot;$&#123;numbers&#125; | $i&quot;</span><br><span class="line">    i&#x3D;$((i+1))</span><br><span class="line">done</span><br><span class="line"># echo $&#123;numbers&#125;</span><br><span class="line"># 写一个无限循环</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">  # 输入提示</span><br><span class="line">  read -p &quot;Please input a number [ $&#123;numbers&#125; ]:&quot;  execshell</span><br><span class="line">  # echo $&#123;execshell&#125;</span><br><span class="line">  # 如果输入内容不是数字，中断</span><br><span class="line">  if [[ ! $&#123;execshell&#125; &#x3D;~ ^[0-9]+ ]];  then</span><br><span class="line">     exit 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # 如果输入正确，执行对应的脚本</span><br><span class="line">  &#x2F;bin&#x2F;bash .&#x2F;$&#123;ssharray[$execshell]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h1 id="第二部分-系统信息及运行状态获取"><a href="#第二部分-系统信息及运行状态获取" class="headerlink" title="第二部分 系统信息及运行状态获取"></a>第二部分 系统信息及运行状态获取</h1><h2 id="1-系统信息所有内容及注释-system-monitor-sh"><a href="#1-系统信息所有内容及注释-system-monitor-sh" class="headerlink" title="1. 系统信息所有内容及注释 system_monitor.sh"></a>1. 系统信息所有内容及注释 system_monitor.sh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 清屏</span><br><span class="line">clear</span><br><span class="line"># $# 可提取位置参数个数 注意 [] 与内容之间都要有空格</span><br><span class="line">if [[ $# -eq  0 ]]</span><br><span class="line">then</span><br><span class="line"># 定义变量</span><br><span class="line">reset_terminal&#x3D;$(tput sgr0)</span><br><span class="line"># check OS type</span><br><span class="line">os&#x3D;$(uname -o)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;Operating System Type: &quot; $reset_terminal $os</span><br><span class="line"># check OS release version and name</span><br><span class="line">os_name&#x3D;$(cat &#x2F;etc&#x2F;issue)</span><br><span class="line"># os_name&#x3D;$(cat &#x2F;etc&#x2F;issue|grep -e &quot;Server&quot;)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;release version and name: &quot; $reset_terminal $os_name</span><br><span class="line"># check architecture</span><br><span class="line">architecture&#x3D;$(uname -m)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;architecture Type: &quot; $reset_terminal $architecture</span><br><span class="line"># check kernel release</span><br><span class="line">kernel&#x3D;$(uname -r);</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;kernel Type: &quot; $reset_terminal $kernel</span><br><span class="line"># check hostname</span><br><span class="line">hostname&#x3D;$(uname -n)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;hostname: &quot; $reset_terminal $hostname</span><br><span class="line"># hostname&#x3D;$(hostname)</span><br><span class="line"># hostname&#x3D;$(echo $HOSTNAME)</span><br><span class="line"></span><br><span class="line"># check internal IP</span><br><span class="line">internalIP&#x3D;$(hostname -I)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;internalIP: &quot; $reset_terminal $internalIP</span><br><span class="line"># check external IP</span><br><span class="line">externalIP&#x3D;$(curl -s http:&#x2F;&#x2F;ipecho.net&#x2F;plain)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;externalIP: &quot; $reset_terminal $externalIP</span><br><span class="line"># check DNS</span><br><span class="line"># -E 支持元字符  加边界匹配，匹配以&lt;nameserver开头，后面跟任意多个空格的内容</span><br><span class="line"># 使用awk做列筛选，$NF 表示以空格作为分隔符，打印出最后一列</span><br><span class="line"># 注意单双引号的使用</span><br><span class="line">DNS&#x3D;$(cat &#x2F;etc&#x2F;resolv.conf |grep -E &quot;\&lt;nameserver[ ]+&quot; | awk &#39;&#123;print $NF&#125;&#39;)</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;DNS: &quot; $reset_terminal $DNS</span><br><span class="line"># check internet connection status</span><br><span class="line"># ping -c 表示次数</span><br><span class="line"># 输出到空设备  &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">ping -c 2 baidu.com &amp;&gt;&#x2F;dev&#x2F;null &amp;&amp; echo &quot;Internet connected&quot; || echo &quot;Internet disconnected&quot;</span><br><span class="line"># check LoggedIn users</span><br><span class="line">who&gt;&#x2F;tmp&#x2F;who</span><br><span class="line">echo -e &#39;\e[1;32m&#39; &quot;LoggedIn users: &quot; $reset_terminal &amp;&amp; cat &#x2F;tmp&#x2F;who</span><br><span class="line"># 用完及时删除</span><br><span class="line">rm -rf &#x2F;tmp&#x2F;who</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-30d101e3970871cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="2-系统监控脚本"><a href="#2-系统监控脚本" class="headerlink" title="2. 系统监控脚本"></a>2. 系统监控脚本</h2><ol>
<li>操作系统使用内存与应用使用内存的区别<br><img src="http://upload-images.jianshu.io/upload_images/693141-1fdb300ae6d72455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统使用内容 &#x3D; total - free</span><br><span class="line">应用使用内容 &#x3D; total - (free + cached + buffers)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>内存中cache和buffer 区别</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-7fbc5e89dfe596d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>cache主要用来缓存打开过的文件，buffer用于缓存目录项，inode节点（文件索引头）。</p>
<p>除了使用 free -m 来获取内存外，还可以使用读取文件的方式来获取内容，文件位于 /proc/meminfo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;&#x2F;MemTotal&#x2F;&#123;total&#x3D;$2&#125;&#x2F;MemFree&#x2F;&#123;free&#x3D;$2&#125;END&#123;print (total-free)&#x2F;1024&#125;&#39; &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>
<p>解释： 使用awk来进行模式匹配，首先 匹配 MemTotal，第二列的值赋值给变量total；匹配MemFree，第二列的值赋值给free。使用END结束匹配，输出计算结果，并以MB单位显示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"># 内存使用</span><br><span class="line">system_memory_usage&#x3D;$(awk &#39;&#x2F;MemTotal&#x2F;&#123;total&#x3D;$2&#125;&#x2F;MemFree&#x2F;&#123;free&#x3D;$2&#125;END&#123;print (total-free)&#x2F;1024&#125;&#39; &#x2F;proc&#x2F;meminfo)</span><br><span class="line">echo -e &#39;\e[32m&#39; &quot;system memory usage:&quot; $reset_terminal $system_memory_usage</span><br><span class="line"># 有两个cache，匹配第一个</span><br><span class="line">app_memory_usage&#x3D;$(awk &#39;&#x2F;MemTotal&#x2F;&#123;total&#x3D;$2&#125;&#x2F;MemFree&#x2F;&#123;free&#x3D;$2&#125;&#x2F;^Cached&#x2F;&#123;cached&#x3D;$2&#125;&#x2F;Buffers&#x2F;&#123;buffers&#x3D;$2&#125;END&#123;print (total-free-cached-buffers)&#x2F;1024&#125;&#39; &#x2F;proc&#x2F;meminfo)</span><br><span class="line">echo -e &#39;\e[32m&#39; &quot;apps memory usage:&quot; $reset_terminal $app_memory_usage</span><br></pre></td></tr></table></figure>

<h2 id="3-CPU-负载"><a href="#3-CPU-负载" class="headerlink" title="3. CPU 负载"></a>3. CPU 负载</h2><p><img src="http://upload-images.jianshu.io/upload_images/693141-b08caa30fe4cfcd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>可以读取 /proc/meminfo 文件，也可以使用 top 命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -n 1 -b | grep &quot;load average&quot; | awk &#39;&#123;print $10  $11  $12&#125;&#39;</span><br></pre></td></tr></table></figure>
<p>解释： -n 表示刷新次数，一次即可。  -b表示更完整地显示信息。 awk 进行列匹配，取出第10，11，12 列的数值。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-04d1c54659ab212b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h2 id="4-磁盘容量-使用量"><a href="#4-磁盘容量-使用量" class="headerlink" title="4. 磁盘容量 使用量"></a>4. 磁盘容量 使用量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h | grep -vE &#39;Filesystem|tmpfs&#39; | awk &#39;&#123;print $1 &quot; &quot; $5&#125;&#39;</span><br></pre></td></tr></table></figure>
<p>解释： v表示反选，E表示元字符，匹配到的内容将别忽略，即取出除匹配到的内容之外的所有内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">###########################################################</span><br><span class="line"># CPU</span><br><span class="line">loadaverage&#x3D;$(top -n 1 -b | grep &quot;load average&quot; | awk &#39;&#123;print $10  $11  $12&#125;&#39;)</span><br><span class="line">echo -e &#39;\e[32m&#39; &quot;load averages &quot; $reset_terminal $loadaverage</span><br><span class="line">diskaverage&#x3D;$(df -h | grep -vE &#39;Filesystem|tmpfs&#39; | awk &#39;&#123;print $1 &quot; &quot; $5&#125;&#39;)</span><br><span class="line">echo -e &#39;\e[32m&#39; &quot;disk averages &quot; $reset_terminal $diskaverage</span><br></pre></td></tr></table></figure>


]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置和使用-Xdebug-方法二]]></title>
      <url>/2017/02/04/%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8-Xdebug-%E6%96%B9%E6%B3%95%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-33e6d9872c86262a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>基本配置参见前一篇<a href="http://www.jianshu.com/p/3a3db0359bc7">《配置和使用 Xdebug (Laravel + Homestead + Xdebug)》</a></p>
<h1 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h1><p>xdebug.so 文件的内容改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">zend_extension&#x3D;&quot;&#x2F;usr&#x2F;lib&#x2F;php&#x2F;20151012&#x2F;xdebug.so&quot;</span><br><span class="line">xdebug.idekey&#x3D;&quot;PHPSTORM&quot;</span><br><span class="line">xdebug.profiler_append &#x3D; 0</span><br><span class="line">xdebug.profiler_enable &#x3D; off</span><br><span class="line">xdebug.profiler_enable_trigger &#x3D; off</span><br><span class="line">xdebug.profiler_output_dir &#x3D; &quot;&#x2F;tmp&quot;</span><br><span class="line">xdebug.profiler_output_name &#x3D; &quot;cachegrind.out.%t-%s&quot;</span><br><span class="line">xdebug.remote_enable &#x3D; on</span><br><span class="line">xdebug.remote_handler &#x3D; &quot;dbgp&quot;</span><br><span class="line">xdebug.remote_host &#x3D; &quot;127.0.0.1&quot;</span><br><span class="line">xdebug.trace_output_dir &#x3D; &quot;&#x2F;tmp&quot;</span><br><span class="line">xdebug.remote_connect_back &#x3D; On</span><br><span class="line">xdebug.remote_port&#x3D;9000</span><br><span class="line">xdebug.auto_trace&#x3D;off</span><br><span class="line">xdebug.default_enable&#x3D;on</span><br><span class="line">xdebug.collect_params&#x3D;4</span><br><span class="line">xdebug.collect_return&#x3D;on</span><br><span class="line">xdebug.show_exception_trace&#x3D;On</span><br><span class="line">xdebug.max_nesting_level &#x3D; 10000</span><br></pre></td></tr></table></figure>

<h1 id="安装-Chrome-的-Xdebug-Helper-插件"><a href="#安装-Chrome-的-Xdebug-Helper-插件" class="headerlink" title="安装 Chrome 的 Xdebug Helper 插件"></a>安装 Chrome 的 Xdebug Helper 插件</h1><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>打断点</li>
<li>点击 phpstorm 的电话图标，开始监听</li>
<li>Chrome 中，enable Xdebug Helper 插件</li>
<li>点击页面至断点所在位置，开始调试</li>
</ol>
<p>切换项目以及操作不当等可能导致PHP服务崩溃或系统崩溃，此时需重启PHP服务或系统，很蛋疼。<br>个人更喜欢方法一<br>以上配置方法一也可以完美运行</p>
]]></content>
      
        
        <tags>
            
            <tag> xdebug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置和使用 Xdebug (Laravel + Homestead + Xdebug)]]></title>
      <url>/2017/02/03/%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8-Xdebug-(Laravel-+-Homestead-+-Xdebug)/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-f23a03851fb5eafd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>Xdebug deepens debugging PHP apps and websites to a level you can’t receive from the manual process of using code level <code>var_dump()</code>.</p>
<a id="more"></a>

<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>To install Xdebug for PHP7 on Ubuntu you will need to do so manually. Ubuntu 15 and lower will not come with a package for PHP7 or its xDebug counterpart.</p>
<p>First, be sure you are using PHP 7 already by checking your version.</p>
<p><code>vagrant@homestead:~/www/caijing/cms_caijing$ php -v</code><br>Should give you something like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP 7.0.1-1+deb.sury.org~trusty+2 (cli) ( NTS )</span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</span><br><span class="line">    with Xdebug v2.5.0, Copyright (c) 2002-2016, by Derick Rethans</span><br><span class="line">    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies</span><br></pre></td></tr></table></figure>
<p>In my case I’m using the <strong>Larval Homestead PHP 7 branch with Vagrant and the VirtualBox provider</strong>. So, I have PHP 7 already installed and working with Nginx.</p>
<h1 id="Get-your-php-ini"><a href="#Get-your-php-ini" class="headerlink" title="Get your php.ini"></a>Get your php.ini</h1><p>Next output your php.ini information into a file or place you can get to the information from. I like to save mine to a file called php-info.txt.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~&#x2F;www&#x2F;caijing&#x2F;cms_caijing$ sudo php -i &gt; ~&#x2F;php-info.txt(一个你可以打开该文件的地方即可)</span><br></pre></td></tr></table></figure>
<h1 id="Use-the-Xdebug-Wizard"><a href="#Use-the-Xdebug-Wizard" class="headerlink" title="Use the Xdebug Wizard"></a>Use the Xdebug Wizard</h1><p>打开 php-info 文件，全选，复制，粘贴到 <a href="https://xdebug.org/wizard.php%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB">https://xdebug.org/wizard.php，然后点击</a> analyse，等待结果。</p>
<p>按照结果提示一步步来即可。</p>
<p>Send the text file information into the wizard at Xdebug Wizard. Then follow the instructions the wizard supplies.</p>
<p>Also, if you are using OSX you may need to run <code>brew install autoconf</code>.</p>
<p>下面是我本机(zzp)的 Instructions:</p>
<ol>
<li><p>Download xdebug-2.5.0.tgz (到想要保存的目录中执行，或者使用绝对路径  <code>sudo wget -O ~/downloads/xdebug-2.5.0.tgz https://xdebug.org/files/xdebug-2.5.0.tgz</code>)</p>
</li>
<li><p>Unpack the downloaded file with <code>tar -xvzf xdebug-2.5.0.tgz</code></p>
</li>
<li><p>Run: <code>cd xdebug-2.5.0</code></p>
</li>
<li><p>Run: <code>phpize</code> (See the FAQ if you don’t have phpize.)<br>As part of its output it should show:<br>Configuring for:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Zend Module Api No:      20151012</span><br><span class="line">Zend Extension Api No:   320151012</span><br></pre></td></tr></table></figure>
<p>If it does not, you are using the wrong phpize. Please follow this FAQ entry and skip the next step.</p>
</li>
<li><p>Run: <code>./configure</code></p>
</li>
<li><p>Run: <code>make</code></p>
</li>
<li><p>Run: <code>cp modules/xdebug.so /usr/lib/php/20151012</code></p>
</li>
<li><p>Edit /etc/php/7.0/cli/php.ini and add the line<br><code>zend_extension = /usr/lib/php/20151012/xdebug.so</code><br>这里，最好不要改动 php 的主配置文件，在 phpinfo() 输出内容中找到 Additional .ini files parsed，这里是辅助配置文件。本机为： <code>/etc/php/7.0/fpm/conf.d</code>，软链自：<code>/etc/php/mods-available/</code><br>在目录下新建一个文件 xdebug.ini， 添加需要的这行代码。然后还需要在<code>/etc/php/7.0/fpm/conf.d</code>下创建软链。</p>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.0-fpm restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<p>在项目的任何地方设置输出 phpinfo(), 在网页上能搜索到 xdebug 的内容，表示配置成功。</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-a7ec3e277ecfe17f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20161212_10.png"></p>
<h1 id="Enable-Remote-Xdebug"><a href="#Enable-Remote-Xdebug" class="headerlink" title="Enable Remote Xdebug"></a>Enable Remote Xdebug</h1><p>To use Xdebug remote debugging on a host computer you need to enable remote debugging on the guest server. In my case the guest is the Vagrant Homestead VM.</p>
<p>In the guest php.ini file add: （这些直接复制即可，不用改，同样添加至 xdebug.ini 即可）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_enable &#x3D; 1</span><br><span class="line">xdebug.remote_connect_back&#x3D;1</span><br><span class="line">xdebug.remote_port &#x3D; 9000</span><br><span class="line">xdebug.scream&#x3D;0</span><br><span class="line">xdebug.show_local_vars&#x3D;1</span><br><span class="line">xdebug.idekey&#x3D;PHPSTORM</span><br></pre></td></tr></table></figure>
<p>Since I use PhpStorm for Debugging I set my Xdebug key to PHPSTORM.<br>In the browser, the Xdebug and PhpStorm will look for a cookie called XDEBUG_SESSION with the value PHPSTORM. To set this cookie I use the Chrome Browser extension Xdebug helper. （这里暂时没有用到）</p>
<p>Reboot Services</p>
<p>To load the new configurations reload your PHP and HTTP server services. In my case that is nginx and php7.0-fpm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.0-fpm restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<h1 id="Configure-PHP-Storm"><a href="#Configure-PHP-Storm" class="headerlink" title="Configure PHP Storm"></a>Configure PHP Storm</h1><p>Now that Xdebug is install we are ready to configure a “PHP Remote Debug” for PhpStorm.</p>
<ol>
<li><p>Under <code>PhpStorm -&gt; Preferences -&gt; Languages&amp;Frameworks -&gt; PHP -&gt; Debug</code> be sure Xdebug is set to port 9000</p>
</li>
<li><p>Under <code>PhpStorm -&gt; Preferences -&gt; Languages&amp;Frameworks -&gt; PHP -&gt; Servers</code>, add a server using port 80 and set the Absolute path on the server.<br>其中，因为是虚拟机远程服务器的原因，勾选了使用 path mappings，将本地的项目目录 <code>/Users/ZouZhipeng/www/caijing/cms_caijing</code> 和服务器上的绝对路径 <code>/home/vagrant/www/caijing/cms_caijing</code> 进行关联。<br><img src="http://upload-images.jianshu.io/upload_images/693141-ad567cc7c1a170a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20161212_1.png"></p>
</li>
<li><p>屏幕上方的菜单栏：Under <code>Run -&gt; Edit Configurations</code> 添加一个 PHP Remote Debug， 选择 Servers 后点击省略号，即跳转到 Server 配置页面，即上面第二步操作的。<br><img src="http://upload-images.jianshu.io/upload_images/693141-69d0f1a6f53da420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20161212_5.png"></p>
</li>
<li><p>Set the server and the Ide key(session id) to PHPSTORM </p>
</li>
<li><p>还是刚才的页面，左侧➕，添加一个 PHP Web Application，我的配置如下<br>start URL 为项目开始的地址，即下方蓝色 url，点击臭虫会直接跳转到这里。<br><img src="http://upload-images.jianshu.io/upload_images/693141-611304b1de040915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Snip20161212_3.png"></p>
</li>
</ol>
<h1 id="Using-PhpStorm-with-Xdebug-on-a-Remote-Server-（这部分没用到）"><a href="#Using-PhpStorm-with-Xdebug-on-a-Remote-Server-（这部分没用到）" class="headerlink" title="Using PhpStorm with Xdebug on a Remote Server （这部分没用到）"></a>Using PhpStorm with Xdebug on a Remote Server （这部分没用到）</h1><p>To start receiving requests from the remote server enable “Debug” with Xdebug helper in Google Chrome on the page you want to debug. Then, unlike local testing that uses “Start Listening for PHP Debug Connections” use Run &gt; Debug instead.</p>
<p>Using the “Debug” command will open up the signal manually and open the direct connection to the remote server.</p>
<p>Set breakpoints and you are off.</p>
<h1 id="Out-of-Network-Servers-（troubleshooting，暂未用到）"><a href="#Out-of-Network-Servers-（troubleshooting，暂未用到）" class="headerlink" title="Out of Network Servers （troubleshooting，暂未用到）"></a>Out of Network Servers （troubleshooting，暂未用到）</h1><p>If you are trying to remote debug a website with Xdebug from outside your local network be sure the 9000 port is not blocked on your network. This is typically done at the router level.</p>
<p>As always consult the Xdebug remote documentation.</p>
<p>Next, ask Google “what is my public ip” and it will tell you.</p>
<p>Then be sure your remote server is not blocking your IP address.</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>在需要调试的行上打上断点（点击一下行号后面的空白处即可，再点一次取消断点），需要说明的是当程序运行到该断点时，程序会停留在该行，但该行本身不会执行。自此可以查看程序运行到此处时所包含的所有数据信息。当然，查看信息功能相当于使用echo，print或者var_dump。</p>
<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><p>打断点—&gt;点击臭虫—&gt;点击浏览器页面触发断点—&gt;自动跳转回PhpStorm—&gt;查看携带的数据（调试的目的）—&gt;可按步执行查找问题点—&gt;点击运行（或者F5）—&gt;浏览器页面继续执行—&gt;调试完成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-e4f1e54dfd890e54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160719101531030.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-c84a3d2da5ccfc37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160719101534475.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-6412b574967f7ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20160719101537936.png"></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.csdn.net/knight_quan/article/details/51953269">http://blog.csdn.net/knight_quan/article/details/51953269</a><br><a href="https://xdebug.org/wizard.php">https://xdebug.org/wizard.php</a><br><a href="https://php-built.com/2016/01/20/installing-xdebug-for-php7/">https://php-built.com/2016/01/20/installing-xdebug-for-php7/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> xdebug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【记录】Linux 开启 php 的 openssl 扩展]]></title>
      <url>/2017/01/31/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91Linux-%E5%BC%80%E5%90%AF-php-%E7%9A%84-openssl%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-d7d7e6eb62a8ce9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>php 版本升级到7.1.3后，发现 mcrypt加密算法不能用了。推荐的替代方案就是openssl，现记录一下其安装过程。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-b96962a577e0f494.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>

<h3 id="1-下载php源码包"><a href="#1-下载php源码包" class="headerlink" title="1. 下载php源码包"></a>1. 下载php源码包</h3><p>首先确定使用的php版本，<code>php -v</code>，也可以在<code>phpinfo()</code>中查看。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-f2c96ade456c299c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>如图，我的版本是7.1.3。</p>
<p>下载并解压，进入PHP的openssl扩展模块目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;mirrors.sohu.com&#x2F;php&#x2F;php-7.1.3.tar.gz</span><br><span class="line">$ tar zxvf php-7.1.3.tar.gz</span><br><span class="line">$ cd php-7.1.3&#x2F;ext&#x2F;openssl</span><br></pre></td></tr></table></figure>

<p>编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># $ which phpize 找到phpize应用位置</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;phpize</span><br><span class="line"># 然后执行</span><br><span class="line">$ &#x2F;usr&#x2F;bin&#x2F;phpize</span><br><span class="line"># 执行后，发现错误 无法找到config.m4 ，config0.m4就是config.m4。直接重命名</span><br><span class="line">$ cp config0.m4 config.m4</span><br><span class="line"># 重新执行phpize</span><br><span class="line">$ &#x2F;usr&#x2F;bin&#x2F;phpize</span><br><span class="line"># $ which php-config 找到php-config应用位置</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;php-config</span><br><span class="line"># 然后执行</span><br><span class="line">$ .&#x2F;configure --with-openssl --with-php-config&#x3D;&#x2F;usr&#x2F;bin&#x2F;php-config</span><br><span class="line">$ make</span><br><span class="line">$ make test</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p>安装完成后，会返回一个.so文件（<code>openssl.so</code>）的目录。在此目录下把<code>openssl.so</code> 文件拷贝到你在<code>php.ini</code> 中指定的 <code>extension_dir</code> 下（在<code>php.ini</code>文件中查找：<code>extension_dir =</code> 或者打印出<code>phpinfo()</code>），我这里的目录是 <code>/usr/lib/php/20160303</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-7b85fea403ac77d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>在php配置文件添加 openssl 扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ &#x2F;etc&#x2F;php&#x2F;7.1&#x2F;mods-available</span><br><span class="line">$ touch openssl.ini</span><br><span class="line">$ sudo vim openssl.ini</span><br></pre></td></tr></table></figure>

<p>文件内容为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; configuration for php openssl module</span><br><span class="line">; priority&#x3D;20</span><br><span class="line">extension&#x3D;openssl.so</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;php7.1-fpm restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<p>再次打印出<code>phpinfo()</code>，可以看到openssl相关的信息。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-d8737c97f385e984.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
]]></content>
      
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 安装 http2 支持]]></title>
      <url>/2017/01/17/Linux-%E5%AE%89%E8%A3%85-http2-%E6%94%AF%E6%8C%81/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-ffa57dd27771a53c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>

<ol>
<li><p>前提：服务器中已有 git，如果没有，输入下面的命令安装</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y tmux curl vim wget htop git</span><br></pre></td></tr></table></figure></li>
<li><p>curl请求一个需使用 http2 的网址，查看响应结果，为http1.1，说明暂时还不支持http2</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    vagrant@homestead:~$ curl -I https:&#x2F;&#x2F;nghttp2.org&#x2F;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Tue, 28 Mar 2017 04:58:27 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Last-Modified: Mon, 27 Mar 2017 14:39:24 GMT</span><br><span class="line">Etag: &quot;58d9241c-19ff&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 6655</span><br><span class="line">X-Backend-Header-Rtt: 0.001072</span><br><span class="line">Strict-Transport-Security: max-age&#x3D;31536000</span><br><span class="line">Server: nghttpx</span><br><span class="line">Via: 2 nghttpx</span><br><span class="line">x-frame-options: SAMEORIGIN</span><br><span class="line">x-xss-protection: 1; mode&#x3D;block</span><br><span class="line">x-content-type-options: nosniff</span><br></pre></td></tr></table></figure>
<p> 如果强制使用http2请求，无法得到响应</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ curl --http2 -I https:&#x2F;&#x2F;nghttp2.org&#x2F;</span><br><span class="line">curl: (1) Unsupported protocol</span><br></pre></td></tr></table></figure></li>
<li><p>安装 nghttp2</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Get build requirements</span><br><span class="line"># Some of these are used for the Python bindings</span><br><span class="line"># this package also installs</span><br><span class="line">sudo apt-get install g++ make binutils autoconf automake autotools-dev libtool pkg-config \</span><br><span class="line">zlib1g-dev libcunit1-dev libssl-dev libxml2-dev       libev-dev libevent-dev libjansson-dev \</span><br><span class="line">libjemalloc-dev cython python3-dev python-setuptools</span><br><span class="line"></span><br><span class="line"># Build nghttp2 from source</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tatsuhiro-t&#x2F;nghttp2.git</span><br><span class="line">cd nghttp2</span><br><span class="line">autoreconf -i</span><br><span class="line">automake</span><br><span class="line">autoconf</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
<li><p>升级最新版的 curl，<a href="https://curl.haxx.se/download.html">这里</a>查看curl版本</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">sudo apt-get build-dep curl</span><br><span class="line">wget http:&#x2F;&#x2F;curl.haxx.se&#x2F;download&#x2F;curl-7.xx.0.tar.bz2</span><br><span class="line">tar -xvjf curl-7.xx.0.tar.bz2</span><br><span class="line">cd curl-7.xx.0</span><br><span class="line">.&#x2F;configure --with-nghttp2&#x3D;&#x2F;usr&#x2F;local --with-ssl</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
</li>
<li><p>尝试再次连接</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Try this out first</span><br><span class="line">curl --http2 -I nghttp2.org</span><br><span class="line"></span><br><span class="line"># If you get errors, try setting this constant</span><br><span class="line"># to tell curl where to find shared libraries</span><br><span class="line">LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib &#x2F;usr&#x2F;local&#x2F;bin&#x2F;curl --http2 -I nghttp2.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~&#x2F;curl-7.xx.0$ LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib &#x2F;usr&#x2F;local&#x2F;bin&#x2F;curl --http2 -k -I -H &quot;Host: example.com&quot; https:&#x2F;&#x2F;localhost</span><br><span class="line">HTTP&#x2F;2.0 403</span><br><span class="line">server:nginx&#x2F;1.11.9</span><br><span class="line">date:Tue, 28 Mar 2017 05:47:10 GMT</span><br><span class="line">content-type:text&#x2F;html; charset&#x3D;utf-8</span><br><span class="line">content-length:169</span><br></pre></td></tr></table></figure></li>
<li><p>打印出phpinfo<br>curl 的http2 显示 yes，表示成功。否则需要手动安装php的http扩展。</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-3e7fd6d43ffe52c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
]]></content>
      
        
        <tags>
            
            <tag> http2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 启动加载文件顺序问题]]></title>
      <url>/2017/01/12/Mac-%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="Mac-启动加载文件位置（可设置环境变量）"><a href="#Mac-启动加载文件位置（可设置环境变量）" class="headerlink" title="Mac 启动加载文件位置（可设置环境变量）"></a>Mac 启动加载文件位置（可设置环境变量）</h2><p> （1）首先要知道你使用的Mac OS X是什么样的Shell，使用命令<br>echo $SHELL<br>如果输出的是：csh或者是tcsh，那么你用的就是C Shell。<br>如果输出的是：bash，sh，zsh，那么你的用的可能就是Bourne Shell的一个变种。<br>Mac OS X 10.2之前默认的是C Shell。<br>Mac OS X 10.3之后默认的是Bourne Shell。</p>
<a id="more"></a>

<p>（2）如果是Bourne Shell。<br>那么你可以把你要添加的环境变量添加到你主目录下面的.profile或者.bash_profile，如果存在没有关系添加进去即可，如果没有生成一个。</p>
<p>Mac配置环境变量的地方<br> 1./etc/profile   （建议不修改这个文件 ）<br> 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</p>
<p> 2./etc/bashrc    （一般在这个文件中添加系统级环境变量）<br> 全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。</p>
<p> 3.~/.bash_profile  （一般在这个文件中添加用户级环境变量）<br> 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!</p>
<h2 id="MAC-修改host文件"><a href="#MAC-修改host文件" class="headerlink" title="MAC 修改host文件 "></a>MAC 修改host文件 </h2><p>sudo vi /etc/hosts</p>
<p>目前还没有解决每次启动 terminal 都要重新运行一次 source .bash_profile 的问题。</p>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用-Sublime-替换文本中的换行-回车符等特殊符号]]></title>
      <url>/2017/01/09/%E4%BD%BF%E7%94%A8-Sublime-%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E6%8D%A2%E8%A1%8C-%E5%9B%9E%E8%BD%A6%E7%AC%A6%E7%AD%89%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-93b3a892a145f176.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>这个功能使用的比较频繁，但一直没有记住。在这里简单记录一下。</p>
</blockquote>
<a id="more"></a>

<ol>
<li><p>首先， <code>Cmd + Shift + F</code>打开查找替换框。</p>
</li>
<li><p>单击选中最左侧的正则匹配，图中的红框位置。</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-ba7e7df576291fe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<ol start="3">
<li><p>输入想要被替换的正则表达式，如<code>\n</code>。表达式会以橙色高亮显示。</p>
</li>
<li><p>输入想要替换的内容， 如<code>,\n</code>。</p>
</li>
</ol>
<p>就是这么简单。</p>
]]></content>
      
        
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[把 mac 上的默认 php 修改为 MAMP 等扩展环境中的 php 版本]]></title>
      <url>/2017/01/03/%E6%8A%8Amac%E4%B8%8A%E7%9A%84%E9%BB%98%E8%AE%A4php%E4%BF%AE%E6%94%B9%E4%B8%BAMAMP%E7%AD%89%E6%89%A9%E5%B1%95%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84php-%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<ol>
<li>把mac上的默认php修改为MAMP等扩展环境中的php 版本，也就是不使用 mac 自带的。步骤如下：</li>
</ol>
<a id="more"></a>

<p>打开terminal。输入<code>locate .bash_profile</code>， 找到我们需要编辑的文件的路径。<br>cd 到该目录下执行<code>sudo vim .bash_profile</code>,这个文件也有可能没有，如果没有就新建一个。<br>在vim中打开或新建好该文件后在文件末尾添加<br><code>export PATH=&quot;/Applications/MAMP/bin/php/php5.6.10/bin:$PATH&quot;</code><br>注：“=”号之后，“：”号之前的路径就是你要修改成的php的路径，我这里选取的是MAMP中自带的5.6版本。<br>保存后运行： <code>source .bash_profile</code>，可能会报错，不用管。<br>就大功告成了，接着我们验证一下，另开terminal，输入which PHP,有没有发现默认php的路径已经修改好了呢。接下来就可以正常使用了，如果还不行，重启电脑就可以了。</p>
<p>坑：在 /etc/profiles 中设置了环境变量后, 还是不能在 zsh 中使用. 是因为没有在 .zshrc 中配置.</p>
<p>在终端中输入: <code>cat ~/.zshrc</code> 以此来查看 .zshrc 文件, 找到里面的 <code># User configuration</code> 部分. 可以看到当前 zsh 支持的所有本地已配置环境变量.<br>在 <code>export PATH=”XXXX”</code> 里面追加一条想要配置的环境变量路径.</p>
]]></content>
      
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Yii-框架-开启网页调试功能]]></title>
      <url>/2016/12/30/Yii-%E6%A1%86%E6%9E%B6-%E5%BC%80%E5%90%AF%E7%BD%91%E9%A1%B5%E8%B0%83%E8%AF%95%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-6753b35ab3060072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>

<h2 id="1-首先在入口文件-index-php-开启-debug-模式"><a href="#1-首先在入口文件-index-php-开启-debug-模式" class="headerlink" title="1. 首先在入口文件 index.php  开启 debug 模式"></a>1. 首先在入口文件 <code>index.php</code>  开启 debug 模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defined(&#39;YII_DEBUG&#39;) or define(&#39;YII_DEBUG&#39;,true);</span><br></pre></td></tr></table></figure>

<h2 id="2-protected-config-main-php-的-log-下面"><a href="#2-protected-config-main-php-的-log-下面" class="headerlink" title="2. protected/config/main.php 的 log 下面"></a>2. <code>protected/config/main.php</code> 的 log 下面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;log&#39; &#x3D;&gt; array(</span><br><span class="line">            &#39;class&#39; &#x3D;&gt; &#39;CLogRouter&#39;,</span><br><span class="line">            &#39;routes&#39; &#x3D;&gt; array(</span><br><span class="line">                array(</span><br><span class="line">                    &#39;enabled&#39; &#x3D;&gt; true,</span><br><span class="line">                    &#39;class&#39; &#x3D;&gt; &#39;CWebLogRoute&#39;,</span><br><span class="line">                    &#39;levels&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">                    &#39;categories&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">                ),</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>就这么简单。</p>
]]></content>
      
        
        <tags>
            
            <tag> Yii </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 下搭建 laravel 运行环境]]></title>
      <url>/2016/12/23/mac-%E4%B8%8B%E6%90%AD%E5%BB%BA-laravel-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-e63645d2638a654a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<ol>
<li>安装 composer</li>
</ol>
<pre><code>php -r &quot;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&quot;
php -r &quot;if (hash_file(&#39;SHA384&#39;, &#39;composer-setup.php&#39;) === &#39;e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae&#39;) &#123; echo &#39;Installer verified&#39;; &#125; else &#123; echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); &#125; echo PHP_EOL;&quot;
php composer-setup.php
php -r &quot;unlink(&#39;composer-setup.php&#39;);&quot;```
可能出现 openssl 相关的错误，在之前的文章中已有解决方案。

执行第一条命令下载下来的 composer-setup.php 脚本将简单的检测 php.ini 中的参数设置，如果某些参数未正确设置则会给出警告；
然后下载最新版本的 composer.phar 文件到当前目录。
上述 3 条命令的作用依次是：
下载安装脚本（composer-setup.php）到当前目录。
检验文件的 hash 值。
执行安装过程。
删除安装脚本 -- composer-setup.php 。
2. 添加 composer 至全局变量
```mv composer.phar /usr/local/bin/composer```
现在输入 ```composer -V ```试试，就可以显示版本号了。

3.使用 composer 下载 laravel 安装包
```composer global require &quot;laravel/installer=~1.1&quot;```
然后把 ~/.composer/vendor/bin 路径放置于您的 PATH 里， 这样 laravel 执行文件就会存在你的系统。
具体方法为：cd 到/Users/ZouZhipeng，即.bash_profile所在的目录
```sudo vim .bash_profile```
 添加一行
```export PATH=&quot;/Users/ZouZhipeng/.composer/vendor/bin:$PATH&quot;```

</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全新离线安装 Laravel Homestead 记录]]></title>
      <url>/2016/12/03/%E5%85%A8%E6%96%B0%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Laravel-Homestead-%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-3263c5e58700a808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>之前安装的homestead系统版本为Ubuntu14.04，现业务需要，需升级为16.04，在虚拟机中直接升级完成后，无法启动。正好趁这个机会把所有需要升级的都升级一遍，全新安装并Laravel运行环境。</p>
</blockquote>
<a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ol>
<li>备份好数据后，彻底删除原来的运行环境，包括Homestead文件夹，虚拟机目录，.homestead 文件夹，box（<code>vagrant box remove boxname</code>）等。</li>
<li>下载并安装 <a href="https://www.virtualbox.org/wiki/Downloads">Virtualbox</a></li>
<li>下载并安装 <a href="https://www.vagrantup.com/downloads.html">vagrant</a></li>
<li>下载homestead离线安装包 <a href="https://atlas.hashicorp.com/laravel/boxes/homestead/versions/2.0.0/providers/virtualbox.box">virtualbox</a>，版本号的数字自行修改，如2.0.1 </li>
<li>virtualbox 可启动，命令行中 <code>vagrant -v</code> 显示vagrant版本号，准备工作完成。</li>
</ol>
<h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2. 开始安装"></a>2. 开始安装</h2><p><a href="http://www.golaravel.com/laravel/docs/5.0/homestead/">官方文档</a>给出的安装方式为在线安装，蛋疼的网速想要在短时间内安装成功非常困难，所以这里采用离线安装方式。</p>
<ol>
<li><p>新建一个目录，我这里命名为 vagrant，将准备工作下载好的 virtualbox.box 拷贝到该目录下</p>
</li>
<li><p>添加box，这里步骤2与步骤3实现的效果一致，但步骤2添加成功后可能会有更新问题，<strong>推荐跳过此步骤直接执行步骤3</strong>.</p>
<figure class="highlight plain"><figcaption><span>box list```查看目前系统中已有的box，新加的box尽量不要与原有的box重名。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &#96;&#96;&#96;vagrant vagrant box add  laravel&#x2F;homestead virtualbox.box&#96;&#96;&#96;，如果box文件在当前目录下，直接添加文件即可，如果不在，需要写明全路径。</span><br><span class="line">    </span><br><span class="line">    看到success添加盒子就成功了。</span><br><span class="line">3. 在virtualbox.box镜像所在目录创建metadata.json，输入以下内容</span><br></pre></td></tr></table></figure>
<p> {</p>
<pre><code> &quot;name&quot;: &quot;laravel/homestead&quot;,
 &quot;versions&quot;: [&#123;
     &quot;version&quot;: &quot;2.0.0&quot;,
     &quot;providers&quot;: [&#123;
         &quot;name&quot;: &quot;virtualbox&quot;,
         &quot;url&quot;: &quot;file://virtualbox.box&quot;
     &#125;]
 &#125;]</code></pre>
<p> }</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其中，url最好写box的全路径。然后输入以下命令添加box</span><br></pre></td></tr></table></figure>
<p> vagrant box add metadata.json</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看已安装的box</span><br></pre></td></tr></table></figure>
<p> vagrant box list</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 3. 克隆官方仓库</span><br><span class="line">homestead，vagrant，virtualbox之间的关系梳理</span><br><span class="line">1. homestead镜像就是laravel官方为了方便开发者，将一系列的开发环境、软件打包成一个镜像供大家使用，当前homestead包含[以下内容](https:&#x2F;&#x2F;laravel.com&#x2F;docs&#x2F;5.4&#x2F;homestead)：Ubuntu 16.04，Git，PHP 7.1，Nginx，MySQL，Postgres，Composer，Node (With Yarn, Bower, Grunt, Gulp) 等。</span><br><span class="line">2. vagrant可以看作是对virtualbox或vmware的一个高级封装，本质就是调用了一些virtualbox和vmware开放出来的api</span><br><span class="line">3. homestead git仓库呢则是laravel官方对于homestead虚拟机的一些配置文件，里面有一些方便的Linux脚本</span><br><span class="line"></span><br><span class="line">clone [版本库](https:&#x2F;&#x2F;github.com&#x2F;laravel&#x2F;homestead)</span><br></pre></td></tr></table></figure>
<p>git clone <a href="https://github.com/laravel/homestead.git">https://github.com/laravel/homestead.git</a> Homestead</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4. 配置 Homestead</span><br><span class="line">1. 进入到clone的目录中运行 init.sh，这样就在家目录中生成一个.homestead 的目录，里面包含homestead虚拟机的配置文件 Homestead.yaml (homestead在github上的版本已更新到5.1，有一些文件发生了变动。最主要的变动是当运行init.bat或init.sh时候，几个文件将不再复制到家目录的.homestead文件，而是直接被复制到homestead项目的根目录中。原先家目录下的.homestead可以直接删掉了！)</span><br><span class="line">2. 修改该文件</span><br></pre></td></tr></table></figure>
<p> ip: “192.168.10.10”<br> memory: 2048<br> cpus: 1<br> provider: virtualbox</p>
<p> authorize: ~/.ssh/id_rsa.pub</p>
<p> keys:</p>
<pre><code> - ~/.ssh/id_rsa</code></pre>
<p> folders:</p>
<pre><code> - map: /myCodeDir
   to: /home/vagrant/www</code></pre>
<p> sites:</p>
<pre><code> - map: homestead.app
   to: /home/vagrant/www/Laravel/public</code></pre>
<p> databases:</p>
<pre><code> - homestead</code></pre>
<h1 id="blackfire"><a href="#blackfire" class="headerlink" title="blackfire:"></a>blackfire:</h1><h1 id="id-foo"><a href="#id-foo" class="headerlink" title="- id: foo"></a>- id: foo</h1><h1 id="token-bar"><a href="#token-bar" class="headerlink" title="token: bar"></a>token: bar</h1><h1 id="client-id-foo"><a href="#client-id-foo" class="headerlink" title="client-id: foo"></a>client-id: foo</h1><h1 id="client-token-bar"><a href="#client-token-bar" class="headerlink" title="client-token: bar"></a>client-token: bar</h1><h1 id="ports"><a href="#ports" class="headerlink" title="ports:"></a>ports:</h1><h1 id="send-50000"><a href="#send-50000" class="headerlink" title="- send: 50000"></a>- send: 50000</h1><h1 id="to-5000"><a href="#to-5000" class="headerlink" title="to: 5000"></a>to: 5000</h1><h1 id="send-7777"><a href="#send-7777" class="headerlink" title="- send: 7777"></a>- send: 7777</h1><h1 id="to-777"><a href="#to-777" class="headerlink" title="to: 777"></a>to: 777</h1><h1 id="protocol-udp"><a href="#protocol-udp" class="headerlink" title="protocol: udp"></a>protocol: udp</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主要需要改动的就是 folders这一项，将本机的一个目录共享给虚拟机。</span><br><span class="line">rsa 公钥私钥路径一定要对，不然无法启动，没有的话通过git bash或其他Linux环境输入以下命令生成</span><br></pre></td></tr></table></figure>
<p> ssh-keygen -t rsa -C “vagrant@homestead”</p>
<pre><code></code></pre>
</li>
</ol>
<h2 id="5-启动-homestead"><a href="#5-启动-homestead" class="headerlink" title="5. 启动 homestead"></a>5. 启动 homestead</h2><ol>
<li>进入到homestead目录(git clone的那个) <code>vagrant up</code>，耐心等待一会就可以。</li>
<li>修改本地的hosts文件，添加homestead虚拟机的DNS</li>
<li>没有报错就正常启动了。 输入命令 <code>vagrant ssh</code>进入虚拟机。</li>
<li>升级，配置nginx等。</li>
</ol>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ol>
<li><a href="https://www.alwayscoder.com/offline-install-laravel-homestead/">离线安装&amp;配置laravel开发环境homestead
</a></li>
<li><a href="http://stackoverflow.com/questions/22922891/vagrant-ssh-authentication-failure">私钥问题</a></li>
<li><a href="http://stackoverflow.com/questions/22575261/vagrant-stuck-connection-timeout-retrying">连接超时问题</a></li>
<li><a href="http://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html">Vagrant入门</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 中 mamp-pro 的 localhost 显示为 403 Forbidden]]></title>
      <url>/2016/11/15/mac-%E4%B8%AD-mamp-pro-%E7%9A%84-localhost-%E6%98%BE%E7%A4%BA%E4%B8%BA-403-Forbidden/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-04ef97fb9985702e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p>解决方法很简单，在 mamp pro 中，依次找到 </p>
<p>Hosts &gt; Extended &gt; Indexes，勾选 Indexes，重启即可。</p>
<p>另外一个报错可能是 500 服务器错误，解决方法如下：</p>
<p>只需要配置php.ini即可。<br>在php的安装目录中找到php.ini文件并打开，找到display_errors，<br>默认情况下是display_errors = Off，把Off修改为On，保存关闭文件,然后重启apache。</p>
]]></content>
      
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用终端卸载 Ubuntu 应用]]></title>
      <url>/2016/11/12/%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%8D%B8%E8%BD%BD-Ubuntu-%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-22922c208e54a6ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<blockquote>
<p>一直以来，只是知道安装程序，而不知道怎么卸载。</p>
</blockquote>
<a id="more"></a>

<ol>
<li><p>打开终端。你将使用<code>apt-get</code>命令，这是用于管理已安装程序的通用命令。在卸载程序时，你可能需要输入管理员密码。</p>
<p> 当你输入密码时，密码将不会被显示。完成输入后按回车即可。</p>
</li>
<li><p>浏览已安装的程序。要查看已安装的软件包列表，请输入以下命令。请注意你希望卸载的软件包的名称。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list | grep &lt;programname&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载程序和所有配置文件。在终端中输入以下命令，把<programname>替换成你希望完全移除的程序：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove &lt;programname&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>只卸载程序。如果你移除程序但保留配置文件，请输入以下命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove &lt;programname&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令]]></title>
      <url>/2016/11/07/Git-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<ol>
<li>创建版本库：新建一个空目录，cd 到该目录，输入<code>git init</code>即可把该目录变为 git 可以管理的仓库。</li>
</ol>
<a id="more"></a>

<ol start="2">
<li>上一步会自动生成<code>.git</code>的目录，默认是隐藏的，可以通过<code> ls -ah</code>显示，但里面的东西最好不要动。</li>
<li>把文件添加到版本库：<code>git add yourfile.txt</code></li>
<li>把文件提交到仓库： <code>git commit -m &#39;your message&#39;</code></li>
<li>查看当前版本库状态：<code>git status</code></li>
<li>查看修改内容：<code>git diff</code>，没有问题后， <code>add &amp; commit</code></li>
<li>查看日志：时间由近至远 <code>git log</code><br><code>git log --pretty=oneline</code>使版本 ID 和每次修改输入的内容在一行显示</li>
<li>git 中，<code>HEAD</code>指向当前版本，<code>HEAD^</code>指向上一个版本，<code>HEAD^^</code>指向上两个版本， <code>HEAD-100</code>指向往上100个版本。<br>想要恢复到某一个版本：<code>git reset --hard HEAD-3</code><br>后悔药：在命令行窗口中找到 commit id，<code>git reset --hard 3564223</code>，版本号没必要写全，前几位就可以了，Git会自动去找。这样就回退了版本，如果 add 了而没有 commit，用命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。<br>如果已经关闭命令行窗口，commit id 可以通过<code>git reflog</code>找回。</li>
<li>放弃本地工作区的修改，恢复到版本库或暂存区的状态。<code>git checkout -- yourfile.txt</code>，注意这里两个横向前后都要有空格。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 下如何快速搭建 PHP 集成环境]]></title>
      <url>/2016/11/04/Mac-%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-PHP-%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>首先下载 MAMP 集成环境安装包 <a href="www.mamp.info">MAMP官网</a>。免费版只支持 PHP5.6 和7.0 两个版本，需要其他版本的只能付费下载 MAMP PRO 了。</p>
<a id="more"></a>

<p>下载后安装即可，非常简单</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-764791532f1931f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-bf3fceb62069e051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p>
<p>安装完成后点击 start，右上角两个绿灯亮起就说明环境配置成功了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-45f29022729c3323.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p>
<p>点击设置，可对端口进行设置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-ef9d70aec1593730.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p>
<p>设置端口后需要重新启动 MAMP。回到 MAMP 主页，点击 Open start page，可以打开浏览器，进入主页。这里可以进入 phpinfo 和 phpmyadmin。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-c7cd32ac6de73437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p>
<p>localhost 的目录为 <code>/Applications/MAMP/htdocs/</code><br>Apache 的配置文件路径为 <code>/Applications/MAMP/conf/apache/httpd.conf</code><br>Apache 的虚拟主机配置文件路径为 <code>/Applications/MAMP/conf/apache/extra/httpd-vhost.conf</code></p>
<p>配置虚拟主机：</p>
<ol>
<li>打开 httpd.conf，取消下面这行的注释 <code># Virtual hosts Include /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf </code></li>
<li>在 httpd-vhost.conf 中配置虚拟主机<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class="line">    DocumentRoot &quot;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;&quot;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    ServerAlias</span><br><span class="line">    ErrorLog &quot;logs&#x2F;dummy-host.example.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs&#x2F;dummy-host.example.com-access.log&quot; common</span><br><span class="line">    &lt;Directory &quot;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;&quot;&gt;</span><br><span class="line">        allow from all</span><br><span class="line">        AllowOverride all</span><br><span class="line">        Options +indexes</span><br><span class="line">    &lt;&#x2F;Directory&gt;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class="line">    DocumentRoot &quot;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;oa&quot;</span><br><span class="line">    ServerName www.oa.cc</span><br><span class="line">    ServerAlias oa.cc</span><br><span class="line">    ErrorLog &quot;logs&#x2F;dummy-host.example.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs&#x2F;dummy-host.example.com-access.log&quot; common</span><br><span class="line">    &lt;Directory &quot;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;oa&quot;&gt;</span><br><span class="line">        allow from all</span><br><span class="line">        AllowOverride all</span><br><span class="line">        Options +indexes</span><br><span class="line">    &lt;&#x2F;Directory&gt;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li>
<li>配置完成后重启 MAMP（** 注意关掉 shadowsocks 等代理软件 **）</li>
<li>在 hosts 文件中添加 DNS 解析，即可通过域名访问本地脚本文件。有两种方式<ol>
<li>在 Finder 上右键，选择Go to Folder…，输入<code>/private/etc</code>， 找到 hosts 文件，复制到其他地方，使用文本编辑器进行编辑，添加需要解析的行，如<code>127.0.0.1 www.oa.com oa.com</code>，保存后退出，复制，然后回到 etc 目录，粘贴，选择替换。</li>
</ol>
</li>
<li>打开终端 terminal，运行<code>sudo vim /private/etc/hosts</code>，就可以进行编辑了。编辑完成后保存即可。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 内置 brew 安装的 openssl 冲突解决方案]]></title>
      <url>/2016/10/08/mac-%E5%86%85%E7%BD%AE%E4%B8%8E-brew-%E5%AE%89%E8%A3%85%E7%9A%84-openssl-%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/693141-4d7763bad2f0d9ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<a id="more"></a>
<p>mac 系统自带的 openssl 信息如下：<br><code>Version 0.9.8 - 位于 /usr/bin/openssl</code>；<br>brew 安装的 openssl 信息如下：<br><code>Version 1.0.2h_1 - 位于 /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl</code></p>
<p>terminal 中输入<br><code>which openssl</code>或者<code>openssl version</code><br>可以看出，都是指向系统默认安装的，现在要做的就是把这个指向改为brew 安装的新版本，也就是 PHP 要进行编译所使用的版本。</p>
<p>方法：建立一个两版本之间的软链<br><code>ln -s /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl /usr/bin/openssl</code><br>如果上述操作无法执行，只能将原来的 openssl 先重命名，然后建立软链，但这样可能带来稳定性问题。</p>
<pre><code class="mv">ln -s /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl /usr/bin/openssl```
但我这里上述两种方式都报错，加 sudo，改权限777也没用。
```Operation not permitted```

###寻求其他解决方案
待添加，一个思路是更改环境变量的路径顺序

</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DEDECMS 调用多一层目录怎么解决]]></title>
      <url>/2016/09/03/DEDECMS-%7Bdede-global-cfg_templets_skin-%7D-%E8%B0%83%E7%94%A8%E5%A4%9A%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3-/</url>
      <content type="html"><![CDATA[<p>{dede:global.cfg_templets_skin/}的作用是调用默认模版的目录，如果刚开始安装织梦的时候不是在根目录下，而是在根目录的一个文件夹下，那么把织梦从文件夹下移动到根目录后会发现{dede:global.cfg_templets_skin/}调用出来的文件路径是错误了，多了一层目录。这种情况多发生在在本地搭建好织梦环境，调试好网站上传到服务器的时候。想要解决这个问题可以按照下面几个步骤。</p>
<a id="more"></a>

<p>一、在织梦后台里设置“系统基本参数”在“站点设置”选项里有站点根网址和网页主页链接的设置，看是否正确。</p>
<p>二、在织梦后台里设置“系统基本参数”在“核心设置”选项卡里有Dedecms安装目录设置，看是否正确。<br>我的问题就出现在这里：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/693141-16f2e9b31584805e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="核心设置出错"></p>
<p>删掉安装目录里面的所有内容就可以了。</p>
<p>然后更新缓存后重新生成看时候解决问题。</p>
<p>如果还没有解决问题，可以用phpmyadmin查看数据库中的“dede_sysconfig”表中的“table_results    DedeCMS安装目录”后的参数是否正确，修改这个参数后，跟新缓存，重新生成网站看是否解决问题。</p>
<p>如果还没有解决问题，那就在织梦后台“系统”-&gt;“数据库备份/还原”里找到“dede_sysconfig”表，点击后面的修复工具，这下这个问题应该就能解决了。</p>
]]></content>
      
        
        <tags>
            
            <tag> DEDECMS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iThoughtX-for-Mac-常用快捷键]]></title>
      <url>/2016/08/21/iThoughtX-for-Mac-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>作为 Mac 上大名鼎鼎的思维导图 App，IThoughtX 界面和操作都做到了极简，如果不掌握常用的快捷键操作，面对这个强大的工具只能是一头雾水，下面是整理的一些常用的快捷键。<br>表格贴不上来，只能截图了…</p>
<a id="more"></a>


<p><img src="http://upload-images.jianshu.io/upload_images/693141-e8554c82c5726c74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IThoughtX 常用快捷键.png"></p>
]]></content>
      
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
